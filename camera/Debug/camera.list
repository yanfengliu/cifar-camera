
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006708  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a80  08006a80  00016a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a8c  08006a8c  00016a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08006a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          0000c7f8  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000c868  2000c868  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ac5d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003257  00000000  00000000  0003acfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f58  00000000  00000000  0003df58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e00  00000000  00000000  0003eeb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008653  00000000  00000000  0003fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004a90  00000000  00000000  00048303  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004cd93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046ec  00000000  00000000  0004ce10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080068a0 	.word	0x080068a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080068a0 	.word	0x080068a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_Init+0x40>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005c0:	4a0b      	ldr	r2, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_Init+0x40>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005cc:	4a08      	ldr	r2, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_Init+0x40>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f947 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f808 	bl	80005f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005e4:	f004 fd3e 	bl	8005064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_InitTick+0x54>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_InitTick+0x58>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	fbb3 f3f1 	udiv	r3, r3, r1
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f95f 	bl	80008d6 <HAL_SYSTICK_Config>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
 8000620:	e00e      	b.n	8000640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d80a      	bhi.n	800063e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f927 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <HAL_InitTick+0x5c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000008 	.word	0x20000008
 800064c:	20000004 	.word	0x20000004
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	200000a0 	.word	0x200000a0

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	200000a0 	.word	0x200000a0

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_Delay+0x40>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad2      	subs	r2, r2, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3f7      	bcc.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000004 	.word	0x20000004

080006d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000746:	4909      	ldr	r1, [pc, #36]	; (800076c <NVIC_EnableIRQ+0x30>)
 8000748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074c:	095b      	lsrs	r3, r3, #5
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	f002 021f 	and.w	r2, r2, #31
 8000754:	2001      	movs	r0, #1
 8000756:	fa00 f202 	lsl.w	r2, r0, r2
 800075a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e100 	.word	0xe000e100

08000770 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	da0b      	bge.n	800079c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	490d      	ldr	r1, [pc, #52]	; (80007bc <NVIC_SetPriority+0x4c>)
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	3b04      	subs	r3, #4
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079a:	e009      	b.n	80007b0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	4908      	ldr	r1, [pc, #32]	; (80007c0 <NVIC_SetPriority+0x50>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	683a      	ldr	r2, [r7, #0]
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000ed00 	.word	0xe000ed00
 80007c0:	e000e100 	.word	0xe000e100

080007c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b089      	sub	sp, #36	; 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f1c3 0307 	rsb	r3, r3, #7
 80007de:	2b04      	cmp	r3, #4
 80007e0:	bf28      	it	cs
 80007e2:	2304      	movcs	r3, #4
 80007e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3304      	adds	r3, #4
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	d902      	bls.n	80007f4 <NVIC_EncodePriority+0x30>
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3b03      	subs	r3, #3
 80007f2:	e000      	b.n	80007f6 <NVIC_EncodePriority+0x32>
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	2201      	movs	r2, #1
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	401a      	ands	r2, r3
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800080a:	2101      	movs	r1, #1
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	1e59      	subs	r1, r3, #1
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff90 	bl	8000770 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff2f 	bl	80006d8 <NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000894:	f7ff ff44 	bl	8000720 <NVIC_GetPriorityGrouping>
 8000898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	6978      	ldr	r0, [r7, #20]
 80008a0:	f7ff ff90 	bl	80007c4 <NVIC_EncodePriority>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff5f 	bl	8000770 <NVIC_SetPriority>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff37 	bl	800073c <NVIC_EnableIRQ>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffa2 	bl	8000828 <SysTick_Config>
 80008e4:	4603      	mov	r3, r0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
 80008fc:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000908:	2b01      	cmp	r3, #1
 800090a:	d101      	bne.n	8000910 <HAL_DCMI_Start_DMA+0x20>
 800090c:	2302      	movs	r3, #2
 800090e:	e086      	b.n	8000a1e <HAL_DCMI_Start_DMA+0x12e>
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2201      	movs	r2, #1
 8000914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2202      	movs	r2, #2
 800091c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	6812      	ldr	r2, [r2, #0]
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800092e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	68fa      	ldr	r2, [r7, #12]
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	f022 0202 	bic.w	r2, r2, #2
 800093e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	6811      	ldr	r1, [r2, #0]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	430a      	orrs	r2, r1
 800094e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000954:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <HAL_DCMI_Start_DMA+0x138>)
 8000956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095c:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <HAL_DCMI_Start_DMA+0x13c>)
 800095e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000964:	2200      	movs	r2, #0
 8000966:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800097a:	d20a      	bcs.n	8000992 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3328      	adds	r3, #40	; 0x28
 8000986:	4619      	mov	r1, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	f000 fb08 	bl	8000fa0 <HAL_DMA_Start_IT>
 8000990:	e038      	b.n	8000a04 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000996:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <HAL_DCMI_Start_DMA+0x138>)
 8000998:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2201      	movs	r2, #1
 800099e:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80009ac:	e009      	b.n	80009c2 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b2:	085a      	lsrs	r2, r3, #1
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009bc:	005a      	lsls	r2, r3, #1
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ca:	d2f0      	bcs.n	80009ae <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d0:	1e9a      	subs	r2, r3, #2
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e2:	009a      	lsls	r2, r3, #2
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3328      	adds	r3, #40	; 0x28
 80009f4:	4619      	mov	r1, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	f000 fe28 	bl	8001654 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	6812      	ldr	r2, [r2, #0]
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	f042 0201 	orr.w	r2, r2, #1
 8000a12:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08000c21 	.word	0x08000c21
 8000a2c:	08000d4b 	.word	0x08000d4b

08000a30 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <HAL_DCMI_Stop+0xb0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	4a29      	ldr	r2, [pc, #164]	; (8000ae4 <HAL_DCMI_Stop+0xb4>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d101      	bne.n	8000a5a <HAL_DCMI_Stop+0x2a>
 8000a56:	2302      	movs	r3, #2
 8000a58:	e03d      	b.n	8000ad6 <HAL_DCMI_Stop+0xa6>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2202      	movs	r2, #2
 8000a66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1e5a      	subs	r2, r3, #1
 8000a7e:	60ba      	str	r2, [r7, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d107      	bne.n	8000a94 <HAL_DCMI_Stop+0x64>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a88:	f043 0220 	orr.w	r2, r3, #32
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8000a90:	2303      	movs	r3, #3
 8000a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1eb      	bne.n	8000a7a <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ab0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fad2 	bl	8001060 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	92492493 	.word	0x92492493

08000ae8 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d016      	beq.n	8000b30 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2204      	movs	r2, #4
 8000b08:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	f043 0202 	orr.w	r2, r3, #2
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2204      	movs	r2, #4
 8000b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <HAL_DCMI_IRQHandler+0xf8>)
 8000b24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fb08 	bl	8001140 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d016      	beq.n	8000b68 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2202      	movs	r2, #2
 8000b40:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2204      	movs	r2, #4
 8000b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b5a:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <HAL_DCMI_IRQHandler+0xf8>)
 8000b5c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 faec 	bl	8001140 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d006      	beq.n	8000b80 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2210      	movs	r2, #16
 8000b78:	615a      	str	r2, [r3, #20]
    
    /* Line interrupt Callback */
    HAL_DCMI_LineEventCallback(hdcmi);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f83c 	bl	8000bf8 <HAL_DCMI_LineEventCallback>
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2208      	movs	r2, #8
 8000b90:	615a      	str	r2, [r3, #20]
    
    /* VSYNC Callback */
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f83a 	bl	8000c0c <HAL_DCMI_VsyncEventCallback>
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d019      	beq.n	8000bd6 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d107      	bne.n	8000bc0 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	6812      	ldr	r2, [r2, #0]
 8000bb8:	68d2      	ldr	r2, [r2, #12]
 8000bba:	f022 021e 	bic.w	r2, r2, #30
 8000bbe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	68d2      	ldr	r2, [r2, #12]
 8000bca:	f022 0201 	bic.w	r2, r2, #1
 8000bce:	60da      	str	r2, [r3, #12]

    /* Frame Callback */
    HAL_DCMI_FrameEventCallback(hdcmi);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f003 ff4b 	bl	8004a6c <HAL_DCMI_FrameEventCallback>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08000d4b 	.word	0x08000d4b

08000be4 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c30:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d043      	beq.n	8000cc2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c46:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d118      	bne.n	8000c86 <DCMI_DMAXferCplt+0x66>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d015      	beq.n	8000c86 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	00da      	lsls	r2, r3, #3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4413      	add	r3, r2
 8000c72:	2200      	movs	r2, #0
 8000c74:	4619      	mov	r1, r3
 8000c76:	f001 ff29 	bl	8002acc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	629a      	str	r2, [r3, #40]	; 0x28
 8000c84:	e044      	b.n	8000d10 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d13c      	bne.n	8000d10 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	00da      	lsls	r2, r3, #3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f001 ff0b 	bl	8002acc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	1e5a      	subs	r2, r3, #1
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8000cc0:	e026      	b.n	8000d10 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	e017      	b.n	8000d10 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d10f      	bne.n	8000d10 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d00:	0091      	lsls	r1, r2, #2
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	440a      	add	r2, r1
 8000d06:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d112      	bne.n	8000d42 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	68d2      	ldr	r2, [r2, #12]
 8000d26:	f042 0201 	orr.w	r2, r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d103      	bne.n	8000d42 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d003      	beq.n	8000d6a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* DCMI error Callback */
  HAL_DCMI_ErrorCallback(hdcmi);
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff ff3a 	bl	8000be4 <HAL_DCMI_ErrorCallback>
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e057      	b.n	8000e3a <HAL_DCMI_Init+0xc2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d102      	bne.n	8000d9c <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f004 f98c 	bl	80050b4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2202      	movs	r2, #2
 8000da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000db2:	f023 0308 	bic.w	r3, r3, #8
 8000db6:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	6811      	ldr	r1, [r2, #0]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6850      	ldr	r0, [r2, #4]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6952      	ldr	r2, [r2, #20]
 8000dca:	4310      	orrs	r0, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	68d2      	ldr	r2, [r2, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000dd0:	4310      	orrs	r0, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6912      	ldr	r2, [r2, #16]
 8000dd6:	4310      	orrs	r0, r2
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	6892      	ldr	r2, [r2, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000ddc:	4310      	orrs	r0, r2
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6992      	ldr	r2, [r2, #24]
 8000de2:	4310      	orrs	r0, r2
                                     hdcmi->Init.JPEGMode 
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6a12      	ldr	r2, [r2, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000de8:	4302      	orrs	r2, r0
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b10      	cmp	r3, #16
 8000df4:	d111      	bne.n	8000e1a <HAL_DCMI_Init+0xa2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	7f12      	ldrb	r2, [r2, #28]
 8000dfe:	4611      	mov	r1, r2
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	7f52      	ldrb	r2, [r2, #29]
 8000e04:	0212      	lsls	r2, r2, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000e06:	4311      	orrs	r1, r2
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	7f92      	ldrb	r2, [r2, #30]
 8000e0c:	0412      	lsls	r2, r2, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8000e0e:	4311      	orrs	r1, r2
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	7fd2      	ldrb	r2, [r2, #31]
 8000e14:	0612      	lsls	r2, r2, #24
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8000e16:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8000e18:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	68d2      	ldr	r2, [r2, #12]
 8000e24:	f042 021e 	orr.w	r2, r2, #30
 8000e28:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff fc14 	bl	800067c <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e099      	b.n	8000f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6812      	ldr	r2, [r2, #0]
 8000e78:	6812      	ldr	r2, [r2, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e80:	e00f      	b.n	8000ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e82:	f7ff fbfb 	bl	800067c <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d908      	bls.n	8000ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e078      	b.n	8000f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e8      	bne.n	8000e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_DMA_Init+0x158>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d107      	bne.n	8000f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4313      	orrs	r3, r2
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f023 0307 	bic.w	r3, r3, #7
 8000f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d117      	bne.n	8000f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00e      	beq.n	8000f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fb09 	bl	8001560 <DMA_CheckFifoParam>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f62:	2301      	movs	r3, #1
 8000f64:	e016      	b.n	8000f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fac0 	bl	80014f4 <DMA_CalcBaseAndBitshift>
 8000f74:	4603      	mov	r3, r0
 8000f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	223f      	movs	r2, #63	; 0x3f
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	f010803f 	.word	0xf010803f

08000fa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_DMA_Start_IT+0x26>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e048      	b.n	8001058 <HAL_DMA_Start_IT+0xb8>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d137      	bne.n	800104a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 fa52 	bl	8001498 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	223f      	movs	r2, #63	; 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	f042 0216 	orr.w	r2, r2, #22
 800100e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	6952      	ldr	r2, [r2, #20]
 800101a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800101e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	f042 0208 	orr.w	r2, r2, #8
 8001036:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	e005      	b.n	8001056 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001052:	2302      	movs	r3, #2
 8001054:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001056:	7dfb      	ldrb	r3, [r7, #23]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800106e:	f7ff fb05 	bl	800067c <HAL_GetTick>
 8001072:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d008      	beq.n	8001092 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e052      	b.n	8001138 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	f022 0216 	bic.w	r2, r2, #22
 80010a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	6952      	ldr	r2, [r2, #20]
 80010ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d103      	bne.n	80010c2 <HAL_DMA_Abort+0x62>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f022 0208 	bic.w	r2, r2, #8
 80010d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e2:	e013      	b.n	800110c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e4:	f7ff faca 	bl	800067c <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d90c      	bls.n	800110c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2220      	movs	r2, #32
 80010f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e015      	b.n	8001138 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1e4      	bne.n	80010e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111e:	223f      	movs	r2, #63	; 0x3f
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d004      	beq.n	800115e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00c      	b.n	8001178 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2205      	movs	r2, #5
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001190:	4b92      	ldr	r3, [pc, #584]	; (80013dc <HAL_DMA_IRQHandler+0x258>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a92      	ldr	r2, [pc, #584]	; (80013e0 <HAL_DMA_IRQHandler+0x25c>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0a9b      	lsrs	r3, r3, #10
 800119c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ae:	2208      	movs	r2, #8
 80011b0:	409a      	lsls	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d01a      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	f022 0204 	bic.w	r2, r2, #4
 80011d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2208      	movs	r2, #8
 80011de:	409a      	lsls	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	2201      	movs	r2, #1
 80011f6:	409a      	lsls	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d012      	beq.n	8001226 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2201      	movs	r2, #1
 8001214:	409a      	lsls	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	f043 0202 	orr.w	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122a:	2204      	movs	r2, #4
 800122c:	409a      	lsls	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d012      	beq.n	800125c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2204      	movs	r2, #4
 800124a:	409a      	lsls	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	f043 0204 	orr.w	r2, r3, #4
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	2210      	movs	r2, #16
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d043      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	d03c      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2210      	movs	r2, #16
 8001280:	409a      	lsls	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d018      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d108      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d024      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	4798      	blx	r3
 80012b2:	e01f      	b.n	80012f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d01b      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
 80012c4:	e016      	b.n	80012f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	f022 0208 	bic.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	2220      	movs	r2, #32
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 808e 	beq.w	8001422 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 8086 	beq.w	8001422 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	2220      	movs	r2, #32
 800131c:	409a      	lsls	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b05      	cmp	r3, #5
 800132c:	d136      	bne.n	800139c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	f022 0216 	bic.w	r2, r2, #22
 800133c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	6952      	ldr	r2, [r2, #20]
 8001348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <HAL_DMA_IRQHandler+0x1da>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	f022 0208 	bic.w	r2, r2, #8
 800136c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001372:	223f      	movs	r2, #63	; 0x3f
 8001374:	409a      	lsls	r2, r3
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138e:	2b00      	cmp	r3, #0
 8001390:	d07d      	beq.n	800148e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	4798      	blx	r3
        }
        return;
 800139a:	e078      	b.n	800148e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d01c      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d108      	bne.n	80013ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d030      	beq.n	8001422 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
 80013c8:	e02b      	b.n	8001422 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d027      	beq.n	8001422 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	4798      	blx	r3
 80013da:	e022      	b.n	8001422 <HAL_DMA_IRQHandler+0x29e>
 80013dc:	20000008 	.word	0x20000008
 80013e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	f022 0210 	bic.w	r2, r2, #16
 8001400:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001426:	2b00      	cmp	r3, #0
 8001428:	d032      	beq.n	8001490 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d022      	beq.n	800147c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	f022 0201 	bic.w	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3301      	adds	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	4293      	cmp	r3, r2
 8001458:	d807      	bhi.n	800146a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f2      	bne.n	800144e <HAL_DMA_IRQHandler+0x2ca>
 8001468:	e000      	b.n	800146c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800146a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	4798      	blx	r3
 800148c:	e000      	b.n	8001490 <HAL_DMA_IRQHandler+0x30c>
        return;
 800148e:	bf00      	nop
    }
  }
}
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop

08001498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b40      	cmp	r3, #64	; 0x40
 80014c4:	d108      	bne.n	80014d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014d6:	e007      	b.n	80014e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3b10      	subs	r3, #16
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <DMA_CalcBaseAndBitshift+0x64>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800150e:	4a13      	ldr	r2, [pc, #76]	; (800155c <DMA_CalcBaseAndBitshift+0x68>)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d909      	bls.n	8001536 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800152a:	f023 0303 	bic.w	r3, r3, #3
 800152e:	1d1a      	adds	r2, r3, #4
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	659a      	str	r2, [r3, #88]	; 0x58
 8001534:	e007      	b.n	8001546 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800153e:	f023 0303 	bic.w	r3, r3, #3
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	aaaaaaab 	.word	0xaaaaaaab
 800155c:	080068d0 	.word	0x080068d0

08001560 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11f      	bne.n	80015ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d855      	bhi.n	800162c <DMA_CheckFifoParam+0xcc>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <DMA_CheckFifoParam+0x28>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001599 	.word	0x08001599
 800158c:	080015ab 	.word	0x080015ab
 8001590:	08001599 	.word	0x08001599
 8001594:	0800162d 	.word	0x0800162d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d045      	beq.n	8001630 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a8:	e042      	b.n	8001630 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015b2:	d13f      	bne.n	8001634 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b8:	e03c      	b.n	8001634 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c2:	d121      	bne.n	8001608 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d836      	bhi.n	8001638 <DMA_CheckFifoParam+0xd8>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <DMA_CheckFifoParam+0x70>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015e7 	.word	0x080015e7
 80015d8:	080015e1 	.word	0x080015e1
 80015dc:	080015f9 	.word	0x080015f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
      break;
 80015e4:	e02f      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d024      	beq.n	800163c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f6:	e021      	b.n	800163c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001600:	d11e      	bne.n	8001640 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001606:	e01b      	b.n	8001640 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d902      	bls.n	8001614 <DMA_CheckFifoParam+0xb4>
 800160e:	2b03      	cmp	r3, #3
 8001610:	d003      	beq.n	800161a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001612:	e018      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
      break;
 8001618:	e015      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00e      	beq.n	8001644 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
      break;
 800162a:	e00b      	b.n	8001644 <DMA_CheckFifoParam+0xe4>
      break;
 800162c:	bf00      	nop
 800162e:	e00a      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 8001630:	bf00      	nop
 8001632:	e008      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 8001634:	bf00      	nop
 8001636:	e006      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 8001638:	bf00      	nop
 800163a:	e004      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 800163c:	bf00      	nop
 800163e:	e002      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;   
 8001640:	bf00      	nop
 8001642:	e000      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 8001644:	bf00      	nop
    }
  } 
  
  return status; 
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b80      	cmp	r3, #128	; 0x80
 800166c:	d106      	bne.n	800167c <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f001 ba08 	b.w	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x1438>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	2b00      	cmp	r3, #0
 8001692:	d105      	bne.n	80016a0 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2240      	movs	r2, #64	; 0x40
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	f001 b9f6 	b.w	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x1438>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d102      	bne.n	80016b0 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80016aa:	2302      	movs	r3, #2
 80016ac:	f001 b9ee 	b.w	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x1438>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	f041 81dc 	bne.w	8002a7e <HAL_DMAEx_MultiBufferStart_IT+0x142a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016e2:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f001 fa04 	bl	8002b00 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4ba0      	ldr	r3, [pc, #640]	; (8001980 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8001700:	429a      	cmp	r2, r3
 8001702:	d96c      	bls.n	80017de <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 8001704:	4a9f      	ldr	r2, [pc, #636]	; (8001984 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	4b9e      	ldr	r3, [pc, #632]	; (8001988 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 800170e:	4299      	cmp	r1, r3
 8001710:	d062      	beq.n	80017d8 <HAL_DMAEx_MultiBufferStart_IT+0x184>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	4b9c      	ldr	r3, [pc, #624]	; (800198c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 800171a:	4299      	cmp	r1, r3
 800171c:	d05a      	beq.n	80017d4 <HAL_DMAEx_MultiBufferStart_IT+0x180>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4b9a      	ldr	r3, [pc, #616]	; (8001990 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8001726:	4299      	cmp	r1, r3
 8001728:	d052      	beq.n	80017d0 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4619      	mov	r1, r3
 8001730:	4b98      	ldr	r3, [pc, #608]	; (8001994 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001732:	4299      	cmp	r1, r3
 8001734:	d04a      	beq.n	80017cc <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	4b96      	ldr	r3, [pc, #600]	; (8001998 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800173e:	4299      	cmp	r1, r3
 8001740:	d041      	beq.n	80017c6 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	4b94      	ldr	r3, [pc, #592]	; (800199c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 800174a:	4299      	cmp	r1, r3
 800174c:	d038      	beq.n	80017c0 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4b92      	ldr	r3, [pc, #584]	; (80019a0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8001756:	4299      	cmp	r1, r3
 8001758:	d02f      	beq.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4619      	mov	r1, r3
 8001760:	4b90      	ldr	r3, [pc, #576]	; (80019a4 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8001762:	4299      	cmp	r1, r3
 8001764:	d026      	beq.n	80017b4 <HAL_DMAEx_MultiBufferStart_IT+0x160>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 800176e:	4299      	cmp	r1, r3
 8001770:	d01d      	beq.n	80017ae <HAL_DMAEx_MultiBufferStart_IT+0x15a>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 800177a:	4299      	cmp	r1, r3
 800177c:	d014      	beq.n	80017a8 <HAL_DMAEx_MultiBufferStart_IT+0x154>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	4b8a      	ldr	r3, [pc, #552]	; (80019b0 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8001786:	4299      	cmp	r1, r3
 8001788:	d00b      	beq.n	80017a2 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4b88      	ldr	r3, [pc, #544]	; (80019b4 <HAL_DMAEx_MultiBufferStart_IT+0x360>)
 8001792:	4299      	cmp	r1, r3
 8001794:	d102      	bne.n	800179c <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8001796:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800179a:	e01e      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 800179c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017a0:	e01b      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017a6:	e018      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ac:	e015      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017b2:	e012      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b8:	e00f      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017be:	e00c      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c4:	e009      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017ca:	e006      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017cc:	2320      	movs	r3, #32
 80017ce:	e004      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017d0:	2320      	movs	r3, #32
 80017d2:	e002      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017d4:	2320      	movs	r3, #32
 80017d6:	e000      	b.n	80017da <HAL_DMAEx_MultiBufferStart_IT+0x186>
 80017d8:	2320      	movs	r3, #32
 80017da:	60d3      	str	r3, [r2, #12]
 80017dc:	e176      	b.n	8001acc <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b74      	ldr	r3, [pc, #464]	; (80019b8 <HAL_DMAEx_MultiBufferStart_IT+0x364>)
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d96c      	bls.n	80018c4 <HAL_DMAEx_MultiBufferStart_IT+0x270>
 80017ea:	4a66      	ldr	r2, [pc, #408]	; (8001984 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80017f4:	4299      	cmp	r1, r3
 80017f6:	d062      	beq.n	80018be <HAL_DMAEx_MultiBufferStart_IT+0x26a>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4b63      	ldr	r3, [pc, #396]	; (800198c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8001800:	4299      	cmp	r1, r3
 8001802:	d05a      	beq.n	80018ba <HAL_DMAEx_MultiBufferStart_IT+0x266>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	4b61      	ldr	r3, [pc, #388]	; (8001990 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 800180c:	4299      	cmp	r1, r3
 800180e:	d052      	beq.n	80018b6 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001818:	4299      	cmp	r1, r3
 800181a:	d04a      	beq.n	80018b2 <HAL_DMAEx_MultiBufferStart_IT+0x25e>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	4b5d      	ldr	r3, [pc, #372]	; (8001998 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8001824:	4299      	cmp	r1, r3
 8001826:	d041      	beq.n	80018ac <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4b5b      	ldr	r3, [pc, #364]	; (800199c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8001830:	4299      	cmp	r1, r3
 8001832:	d038      	beq.n	80018a6 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4619      	mov	r1, r3
 800183a:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 800183c:	4299      	cmp	r1, r3
 800183e:	d02f      	beq.n	80018a0 <HAL_DMAEx_MultiBufferStart_IT+0x24c>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8001848:	4299      	cmp	r1, r3
 800184a:	d026      	beq.n	800189a <HAL_DMAEx_MultiBufferStart_IT+0x246>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 8001854:	4299      	cmp	r1, r3
 8001856:	d01d      	beq.n	8001894 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8001860:	4299      	cmp	r1, r3
 8001862:	d014      	beq.n	800188e <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 800186c:	4299      	cmp	r1, r3
 800186e:	d00b      	beq.n	8001888 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_DMAEx_MultiBufferStart_IT+0x360>)
 8001878:	4299      	cmp	r1, r3
 800187a:	d102      	bne.n	8001882 <HAL_DMAEx_MultiBufferStart_IT+0x22e>
 800187c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001880:	e01e      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8001882:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001886:	e01b      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8001888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800188c:	e018      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 800188e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001892:	e015      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8001894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001898:	e012      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 800189a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800189e:	e00f      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018a4:	e00c      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018aa:	e009      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b0:	e006      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018b2:	2320      	movs	r3, #32
 80018b4:	e004      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018b6:	2320      	movs	r3, #32
 80018b8:	e002      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018ba:	2320      	movs	r3, #32
 80018bc:	e000      	b.n	80018c0 <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 80018be:	2320      	movs	r3, #32
 80018c0:	6093      	str	r3, [r2, #8]
 80018c2:	e103      	b.n	8001acc <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <HAL_DMAEx_MultiBufferStart_IT+0x368>)
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f240 8091 	bls.w	80019f4 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
 80018d2:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <HAL_DMAEx_MultiBufferStart_IT+0x36c>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80018dc:	4299      	cmp	r1, r3
 80018de:	f000 8086 	beq.w	80019ee <HAL_DMAEx_MultiBufferStart_IT+0x39a>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 80018ea:	4299      	cmp	r1, r3
 80018ec:	d07d      	beq.n	80019ea <HAL_DMAEx_MultiBufferStart_IT+0x396>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 80018f6:	4299      	cmp	r1, r3
 80018f8:	d075      	beq.n	80019e6 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8001902:	4299      	cmp	r1, r3
 8001904:	d06d      	beq.n	80019e2 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 800190e:	4299      	cmp	r1, r3
 8001910:	d064      	beq.n	80019dc <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 800191a:	4299      	cmp	r1, r3
 800191c:	d05b      	beq.n	80019d6 <HAL_DMAEx_MultiBufferStart_IT+0x382>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8001926:	4299      	cmp	r1, r3
 8001928:	d052      	beq.n	80019d0 <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8001932:	4299      	cmp	r1, r3
 8001934:	d049      	beq.n	80019ca <HAL_DMAEx_MultiBufferStart_IT+0x376>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 800193e:	4299      	cmp	r1, r3
 8001940:	d040      	beq.n	80019c4 <HAL_DMAEx_MultiBufferStart_IT+0x370>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 800194a:	4299      	cmp	r1, r3
 800194c:	d014      	beq.n	8001978 <HAL_DMAEx_MultiBufferStart_IT+0x324>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8001956:	4299      	cmp	r1, r3
 8001958:	d00b      	beq.n	8001972 <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_DMAEx_MultiBufferStart_IT+0x360>)
 8001962:	4299      	cmp	r1, r3
 8001964:	d102      	bne.n	800196c <HAL_DMAEx_MultiBufferStart_IT+0x318>
 8001966:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800196a:	e041      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 800196c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001970:	e03e      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8001972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001976:	e03b      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8001978:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800197c:	e038      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 800197e:	bf00      	nop
 8001980:	40026458 	.word	0x40026458
 8001984:	40026400 	.word	0x40026400
 8001988:	40026010 	.word	0x40026010
 800198c:	40026410 	.word	0x40026410
 8001990:	40026070 	.word	0x40026070
 8001994:	40026470 	.word	0x40026470
 8001998:	40026028 	.word	0x40026028
 800199c:	40026428 	.word	0x40026428
 80019a0:	40026088 	.word	0x40026088
 80019a4:	40026488 	.word	0x40026488
 80019a8:	40026040 	.word	0x40026040
 80019ac:	40026440 	.word	0x40026440
 80019b0:	400260a0 	.word	0x400260a0
 80019b4:	400264a0 	.word	0x400264a0
 80019b8:	400260b8 	.word	0x400260b8
 80019bc:	40026058 	.word	0x40026058
 80019c0:	40026000 	.word	0x40026000
 80019c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019c8:	e012      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ce:	e00f      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d4:	e00c      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019da:	e009      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019e0:	e006      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019e2:	2320      	movs	r3, #32
 80019e4:	e004      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019e6:	2320      	movs	r3, #32
 80019e8:	e002      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019ea:	2320      	movs	r3, #32
 80019ec:	e000      	b.n	80019f0 <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 80019ee:	2320      	movs	r3, #32
 80019f0:	60d3      	str	r3, [r2, #12]
 80019f2:	e06b      	b.n	8001acc <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80019f4:	4aa0      	ldr	r2, [pc, #640]	; (8001c78 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	4b9f      	ldr	r3, [pc, #636]	; (8001c7c <HAL_DMAEx_MultiBufferStart_IT+0x628>)
 80019fe:	4299      	cmp	r1, r3
 8001a00:	d062      	beq.n	8001ac8 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4619      	mov	r1, r3
 8001a08:	4b9d      	ldr	r3, [pc, #628]	; (8001c80 <HAL_DMAEx_MultiBufferStart_IT+0x62c>)
 8001a0a:	4299      	cmp	r1, r3
 8001a0c:	d05a      	beq.n	8001ac4 <HAL_DMAEx_MultiBufferStart_IT+0x470>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4b9b      	ldr	r3, [pc, #620]	; (8001c84 <HAL_DMAEx_MultiBufferStart_IT+0x630>)
 8001a16:	4299      	cmp	r1, r3
 8001a18:	d052      	beq.n	8001ac0 <HAL_DMAEx_MultiBufferStart_IT+0x46c>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4b99      	ldr	r3, [pc, #612]	; (8001c88 <HAL_DMAEx_MultiBufferStart_IT+0x634>)
 8001a22:	4299      	cmp	r1, r3
 8001a24:	d04a      	beq.n	8001abc <HAL_DMAEx_MultiBufferStart_IT+0x468>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b97      	ldr	r3, [pc, #604]	; (8001c8c <HAL_DMAEx_MultiBufferStart_IT+0x638>)
 8001a2e:	4299      	cmp	r1, r3
 8001a30:	d041      	beq.n	8001ab6 <HAL_DMAEx_MultiBufferStart_IT+0x462>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4b95      	ldr	r3, [pc, #596]	; (8001c90 <HAL_DMAEx_MultiBufferStart_IT+0x63c>)
 8001a3a:	4299      	cmp	r1, r3
 8001a3c:	d038      	beq.n	8001ab0 <HAL_DMAEx_MultiBufferStart_IT+0x45c>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4b93      	ldr	r3, [pc, #588]	; (8001c94 <HAL_DMAEx_MultiBufferStart_IT+0x640>)
 8001a46:	4299      	cmp	r1, r3
 8001a48:	d02f      	beq.n	8001aaa <HAL_DMAEx_MultiBufferStart_IT+0x456>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <HAL_DMAEx_MultiBufferStart_IT+0x644>)
 8001a52:	4299      	cmp	r1, r3
 8001a54:	d026      	beq.n	8001aa4 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4b8f      	ldr	r3, [pc, #572]	; (8001c9c <HAL_DMAEx_MultiBufferStart_IT+0x648>)
 8001a5e:	4299      	cmp	r1, r3
 8001a60:	d01d      	beq.n	8001a9e <HAL_DMAEx_MultiBufferStart_IT+0x44a>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4b8d      	ldr	r3, [pc, #564]	; (8001ca0 <HAL_DMAEx_MultiBufferStart_IT+0x64c>)
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	d014      	beq.n	8001a98 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4b8b      	ldr	r3, [pc, #556]	; (8001ca4 <HAL_DMAEx_MultiBufferStart_IT+0x650>)
 8001a76:	4299      	cmp	r1, r3
 8001a78:	d00b      	beq.n	8001a92 <HAL_DMAEx_MultiBufferStart_IT+0x43e>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <HAL_DMAEx_MultiBufferStart_IT+0x654>)
 8001a82:	4299      	cmp	r1, r3
 8001a84:	d102      	bne.n	8001a8c <HAL_DMAEx_MultiBufferStart_IT+0x438>
 8001a86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a8a:	e01e      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a90:	e01b      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001a92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a96:	e018      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001a98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a9c:	e015      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001a9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aa2:	e012      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001aa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aa8:	e00f      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aae:	e00c      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ab4:	e009      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aba:	e006      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001abc:	2320      	movs	r3, #32
 8001abe:	e004      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	e002      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001ac4:	2320      	movs	r3, #32
 8001ac6:	e000      	b.n	8001aca <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8001ac8:	2320      	movs	r3, #32
 8001aca:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b76      	ldr	r3, [pc, #472]	; (8001cac <HAL_DMAEx_MultiBufferStart_IT+0x658>)
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d96c      	bls.n	8001bb2 <HAL_DMAEx_MultiBufferStart_IT+0x55e>
 8001ad8:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_DMAEx_MultiBufferStart_IT+0x628>)
 8001ae2:	4299      	cmp	r1, r3
 8001ae4:	d062      	beq.n	8001bac <HAL_DMAEx_MultiBufferStart_IT+0x558>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4b64      	ldr	r3, [pc, #400]	; (8001c80 <HAL_DMAEx_MultiBufferStart_IT+0x62c>)
 8001aee:	4299      	cmp	r1, r3
 8001af0:	d05a      	beq.n	8001ba8 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4b62      	ldr	r3, [pc, #392]	; (8001c84 <HAL_DMAEx_MultiBufferStart_IT+0x630>)
 8001afa:	4299      	cmp	r1, r3
 8001afc:	d052      	beq.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4b60      	ldr	r3, [pc, #384]	; (8001c88 <HAL_DMAEx_MultiBufferStart_IT+0x634>)
 8001b06:	4299      	cmp	r1, r3
 8001b08:	d04a      	beq.n	8001ba0 <HAL_DMAEx_MultiBufferStart_IT+0x54c>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_DMAEx_MultiBufferStart_IT+0x638>)
 8001b12:	4299      	cmp	r1, r3
 8001b14:	d041      	beq.n	8001b9a <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_DMAEx_MultiBufferStart_IT+0x63c>)
 8001b1e:	4299      	cmp	r1, r3
 8001b20:	d038      	beq.n	8001b94 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_DMAEx_MultiBufferStart_IT+0x640>)
 8001b2a:	4299      	cmp	r1, r3
 8001b2c:	d02f      	beq.n	8001b8e <HAL_DMAEx_MultiBufferStart_IT+0x53a>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4619      	mov	r1, r3
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_DMAEx_MultiBufferStart_IT+0x644>)
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d026      	beq.n	8001b88 <HAL_DMAEx_MultiBufferStart_IT+0x534>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_DMAEx_MultiBufferStart_IT+0x648>)
 8001b42:	4299      	cmp	r1, r3
 8001b44:	d01d      	beq.n	8001b82 <HAL_DMAEx_MultiBufferStart_IT+0x52e>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4b54      	ldr	r3, [pc, #336]	; (8001ca0 <HAL_DMAEx_MultiBufferStart_IT+0x64c>)
 8001b4e:	4299      	cmp	r1, r3
 8001b50:	d014      	beq.n	8001b7c <HAL_DMAEx_MultiBufferStart_IT+0x528>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_DMAEx_MultiBufferStart_IT+0x650>)
 8001b5a:	4299      	cmp	r1, r3
 8001b5c:	d00b      	beq.n	8001b76 <HAL_DMAEx_MultiBufferStart_IT+0x522>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HAL_DMAEx_MultiBufferStart_IT+0x654>)
 8001b66:	4299      	cmp	r1, r3
 8001b68:	d102      	bne.n	8001b70 <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 8001b6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b6e:	e01e      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b74:	e01b      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b7a:	e018      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b80:	e015      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b86:	e012      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	e00f      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	e00c      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	e009      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9e:	e006      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001ba0:	2310      	movs	r3, #16
 8001ba2:	e004      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	e002      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001ba8:	2310      	movs	r3, #16
 8001baa:	e000      	b.n	8001bae <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8001bac:	2310      	movs	r3, #16
 8001bae:	60d3      	str	r3, [r2, #12]
 8001bb0:	e173      	b.n	8001e9a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f240 808e 	bls.w	8001cdc <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8001bc0:	4a3b      	ldr	r2, [pc, #236]	; (8001cb0 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_DMAEx_MultiBufferStart_IT+0x628>)
 8001bca:	4299      	cmp	r1, r3
 8001bcc:	f000 8083 	beq.w	8001cd6 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_DMAEx_MultiBufferStart_IT+0x62c>)
 8001bd8:	4299      	cmp	r1, r3
 8001bda:	d07a      	beq.n	8001cd2 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_DMAEx_MultiBufferStart_IT+0x630>)
 8001be4:	4299      	cmp	r1, r3
 8001be6:	d072      	beq.n	8001cce <HAL_DMAEx_MultiBufferStart_IT+0x67a>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_DMAEx_MultiBufferStart_IT+0x634>)
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	d06a      	beq.n	8001cca <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_DMAEx_MultiBufferStart_IT+0x638>)
 8001bfc:	4299      	cmp	r1, r3
 8001bfe:	d061      	beq.n	8001cc4 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_DMAEx_MultiBufferStart_IT+0x63c>)
 8001c08:	4299      	cmp	r1, r3
 8001c0a:	d058      	beq.n	8001cbe <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_DMAEx_MultiBufferStart_IT+0x640>)
 8001c14:	4299      	cmp	r1, r3
 8001c16:	d04f      	beq.n	8001cb8 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_DMAEx_MultiBufferStart_IT+0x644>)
 8001c20:	4299      	cmp	r1, r3
 8001c22:	d026      	beq.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x61e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_DMAEx_MultiBufferStart_IT+0x648>)
 8001c2c:	4299      	cmp	r1, r3
 8001c2e:	d01d      	beq.n	8001c6c <HAL_DMAEx_MultiBufferStart_IT+0x618>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_DMAEx_MultiBufferStart_IT+0x64c>)
 8001c38:	4299      	cmp	r1, r3
 8001c3a:	d014      	beq.n	8001c66 <HAL_DMAEx_MultiBufferStart_IT+0x612>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_DMAEx_MultiBufferStart_IT+0x650>)
 8001c44:	4299      	cmp	r1, r3
 8001c46:	d00b      	beq.n	8001c60 <HAL_DMAEx_MultiBufferStart_IT+0x60c>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_DMAEx_MultiBufferStart_IT+0x654>)
 8001c50:	4299      	cmp	r1, r3
 8001c52:	d102      	bne.n	8001c5a <HAL_DMAEx_MultiBufferStart_IT+0x606>
 8001c54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c58:	e03e      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c5e:	e03b      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c64:	e038      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c6a:	e035      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c70:	e032      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	e02f      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001c78:	40026000 	.word	0x40026000
 8001c7c:	40026010 	.word	0x40026010
 8001c80:	40026410 	.word	0x40026410
 8001c84:	40026070 	.word	0x40026070
 8001c88:	40026470 	.word	0x40026470
 8001c8c:	40026028 	.word	0x40026028
 8001c90:	40026428 	.word	0x40026428
 8001c94:	40026088 	.word	0x40026088
 8001c98:	40026488 	.word	0x40026488
 8001c9c:	40026040 	.word	0x40026040
 8001ca0:	40026440 	.word	0x40026440
 8001ca4:	400260a0 	.word	0x400260a0
 8001ca8:	400264a0 	.word	0x400264a0
 8001cac:	40026458 	.word	0x40026458
 8001cb0:	40026400 	.word	0x40026400
 8001cb4:	400260b8 	.word	0x400260b8
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	e00c      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	e009      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc8:	e006      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001cca:	2310      	movs	r3, #16
 8001ccc:	e004      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001cce:	2310      	movs	r3, #16
 8001cd0:	e002      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	e000      	b.n	8001cd8 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	6093      	str	r3, [r2, #8]
 8001cda:	e0de      	b.n	8001e9a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4ba1      	ldr	r3, [pc, #644]	; (8001f68 <HAL_DMAEx_MultiBufferStart_IT+0x914>)
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d96c      	bls.n	8001dc2 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8001ce8:	4aa0      	ldr	r2, [pc, #640]	; (8001f6c <HAL_DMAEx_MultiBufferStart_IT+0x918>)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4b9f      	ldr	r3, [pc, #636]	; (8001f70 <HAL_DMAEx_MultiBufferStart_IT+0x91c>)
 8001cf2:	4299      	cmp	r1, r3
 8001cf4:	d062      	beq.n	8001dbc <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4b9d      	ldr	r3, [pc, #628]	; (8001f74 <HAL_DMAEx_MultiBufferStart_IT+0x920>)
 8001cfe:	4299      	cmp	r1, r3
 8001d00:	d05a      	beq.n	8001db8 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <HAL_DMAEx_MultiBufferStart_IT+0x924>)
 8001d0a:	4299      	cmp	r1, r3
 8001d0c:	d052      	beq.n	8001db4 <HAL_DMAEx_MultiBufferStart_IT+0x760>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4b99      	ldr	r3, [pc, #612]	; (8001f7c <HAL_DMAEx_MultiBufferStart_IT+0x928>)
 8001d16:	4299      	cmp	r1, r3
 8001d18:	d04a      	beq.n	8001db0 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4b97      	ldr	r3, [pc, #604]	; (8001f80 <HAL_DMAEx_MultiBufferStart_IT+0x92c>)
 8001d22:	4299      	cmp	r1, r3
 8001d24:	d041      	beq.n	8001daa <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4b95      	ldr	r3, [pc, #596]	; (8001f84 <HAL_DMAEx_MultiBufferStart_IT+0x930>)
 8001d2e:	4299      	cmp	r1, r3
 8001d30:	d038      	beq.n	8001da4 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <HAL_DMAEx_MultiBufferStart_IT+0x934>)
 8001d3a:	4299      	cmp	r1, r3
 8001d3c:	d02f      	beq.n	8001d9e <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <HAL_DMAEx_MultiBufferStart_IT+0x938>)
 8001d46:	4299      	cmp	r1, r3
 8001d48:	d026      	beq.n	8001d98 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4b8f      	ldr	r3, [pc, #572]	; (8001f90 <HAL_DMAEx_MultiBufferStart_IT+0x93c>)
 8001d52:	4299      	cmp	r1, r3
 8001d54:	d01d      	beq.n	8001d92 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4b8d      	ldr	r3, [pc, #564]	; (8001f94 <HAL_DMAEx_MultiBufferStart_IT+0x940>)
 8001d5e:	4299      	cmp	r1, r3
 8001d60:	d014      	beq.n	8001d8c <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4619      	mov	r1, r3
 8001d68:	4b8b      	ldr	r3, [pc, #556]	; (8001f98 <HAL_DMAEx_MultiBufferStart_IT+0x944>)
 8001d6a:	4299      	cmp	r1, r3
 8001d6c:	d00b      	beq.n	8001d86 <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <HAL_DMAEx_MultiBufferStart_IT+0x948>)
 8001d76:	4299      	cmp	r1, r3
 8001d78:	d102      	bne.n	8001d80 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8001d7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d7e:	e01e      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001d80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d84:	e01b      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001d86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d8a:	e018      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001d8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d90:	e015      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001d92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d96:	e012      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9c:	e00f      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da2:	e00c      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001da8:	e009      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dae:	e006      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001db0:	2310      	movs	r3, #16
 8001db2:	e004      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001db4:	2310      	movs	r3, #16
 8001db6:	e002      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001db8:	2310      	movs	r3, #16
 8001dba:	e000      	b.n	8001dbe <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8001dbc:	2310      	movs	r3, #16
 8001dbe:	60d3      	str	r3, [r2, #12]
 8001dc0:	e06b      	b.n	8001e9a <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8001dc2:	4a6a      	ldr	r2, [pc, #424]	; (8001f6c <HAL_DMAEx_MultiBufferStart_IT+0x918>)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <HAL_DMAEx_MultiBufferStart_IT+0x91c>)
 8001dcc:	4299      	cmp	r1, r3
 8001dce:	d062      	beq.n	8001e96 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_DMAEx_MultiBufferStart_IT+0x920>)
 8001dd8:	4299      	cmp	r1, r3
 8001dda:	d05a      	beq.n	8001e92 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_DMAEx_MultiBufferStart_IT+0x924>)
 8001de4:	4299      	cmp	r1, r3
 8001de6:	d052      	beq.n	8001e8e <HAL_DMAEx_MultiBufferStart_IT+0x83a>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4b63      	ldr	r3, [pc, #396]	; (8001f7c <HAL_DMAEx_MultiBufferStart_IT+0x928>)
 8001df0:	4299      	cmp	r1, r3
 8001df2:	d04a      	beq.n	8001e8a <HAL_DMAEx_MultiBufferStart_IT+0x836>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <HAL_DMAEx_MultiBufferStart_IT+0x92c>)
 8001dfc:	4299      	cmp	r1, r3
 8001dfe:	d041      	beq.n	8001e84 <HAL_DMAEx_MultiBufferStart_IT+0x830>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_DMAEx_MultiBufferStart_IT+0x930>)
 8001e08:	4299      	cmp	r1, r3
 8001e0a:	d038      	beq.n	8001e7e <HAL_DMAEx_MultiBufferStart_IT+0x82a>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4619      	mov	r1, r3
 8001e12:	4b5d      	ldr	r3, [pc, #372]	; (8001f88 <HAL_DMAEx_MultiBufferStart_IT+0x934>)
 8001e14:	4299      	cmp	r1, r3
 8001e16:	d02f      	beq.n	8001e78 <HAL_DMAEx_MultiBufferStart_IT+0x824>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_DMAEx_MultiBufferStart_IT+0x938>)
 8001e20:	4299      	cmp	r1, r3
 8001e22:	d026      	beq.n	8001e72 <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_DMAEx_MultiBufferStart_IT+0x93c>)
 8001e2c:	4299      	cmp	r1, r3
 8001e2e:	d01d      	beq.n	8001e6c <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_DMAEx_MultiBufferStart_IT+0x940>)
 8001e38:	4299      	cmp	r1, r3
 8001e3a:	d014      	beq.n	8001e66 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4b55      	ldr	r3, [pc, #340]	; (8001f98 <HAL_DMAEx_MultiBufferStart_IT+0x944>)
 8001e44:	4299      	cmp	r1, r3
 8001e46:	d00b      	beq.n	8001e60 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_DMAEx_MultiBufferStart_IT+0x948>)
 8001e50:	4299      	cmp	r1, r3
 8001e52:	d102      	bne.n	8001e5a <HAL_DMAEx_MultiBufferStart_IT+0x806>
 8001e54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e58:	e01e      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e5e:	e01b      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e64:	e018      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e6a:	e015      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e70:	e012      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e76:	e00f      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7c:	e00c      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	e009      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	e006      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	e004      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e8e:	2310      	movs	r3, #16
 8001e90:	e002      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e92:	2310      	movs	r3, #16
 8001e94:	e000      	b.n	8001e98 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8001e96:	2310      	movs	r3, #16
 8001e98:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <HAL_DMAEx_MultiBufferStart_IT+0x94c>)
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	f240 808f 	bls.w	8001fc6 <HAL_DMAEx_MultiBufferStart_IT+0x972>
 8001ea8:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_DMAEx_MultiBufferStart_IT+0x950>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <HAL_DMAEx_MultiBufferStart_IT+0x91c>)
 8001eb2:	4299      	cmp	r1, r3
 8001eb4:	f000 8084 	beq.w	8001fc0 <HAL_DMAEx_MultiBufferStart_IT+0x96c>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_DMAEx_MultiBufferStart_IT+0x920>)
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d07b      	beq.n	8001fbc <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_DMAEx_MultiBufferStart_IT+0x924>)
 8001ecc:	4299      	cmp	r1, r3
 8001ece:	d073      	beq.n	8001fb8 <HAL_DMAEx_MultiBufferStart_IT+0x964>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_DMAEx_MultiBufferStart_IT+0x928>)
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d06b      	beq.n	8001fb4 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_DMAEx_MultiBufferStart_IT+0x92c>)
 8001ee4:	4299      	cmp	r1, r3
 8001ee6:	d062      	beq.n	8001fae <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_DMAEx_MultiBufferStart_IT+0x930>)
 8001ef0:	4299      	cmp	r1, r3
 8001ef2:	d059      	beq.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_DMAEx_MultiBufferStart_IT+0x934>)
 8001efc:	4299      	cmp	r1, r3
 8001efe:	d02f      	beq.n	8001f60 <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_DMAEx_MultiBufferStart_IT+0x938>)
 8001f08:	4299      	cmp	r1, r3
 8001f0a:	d026      	beq.n	8001f5a <HAL_DMAEx_MultiBufferStart_IT+0x906>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_DMAEx_MultiBufferStart_IT+0x93c>)
 8001f14:	4299      	cmp	r1, r3
 8001f16:	d01d      	beq.n	8001f54 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_DMAEx_MultiBufferStart_IT+0x940>)
 8001f20:	4299      	cmp	r1, r3
 8001f22:	d014      	beq.n	8001f4e <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_DMAEx_MultiBufferStart_IT+0x944>)
 8001f2c:	4299      	cmp	r1, r3
 8001f2e:	d00b      	beq.n	8001f48 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_DMAEx_MultiBufferStart_IT+0x948>)
 8001f38:	4299      	cmp	r1, r3
 8001f3a:	d102      	bne.n	8001f42 <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8001f3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f40:	e03f      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f46:	e03c      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f4c:	e039      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f52:	e036      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f58:	e033      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f5e:	e030      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f64:	e02d      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001f66:	bf00      	nop
 8001f68:	40026058 	.word	0x40026058
 8001f6c:	40026000 	.word	0x40026000
 8001f70:	40026010 	.word	0x40026010
 8001f74:	40026410 	.word	0x40026410
 8001f78:	40026070 	.word	0x40026070
 8001f7c:	40026470 	.word	0x40026470
 8001f80:	40026028 	.word	0x40026028
 8001f84:	40026428 	.word	0x40026428
 8001f88:	40026088 	.word	0x40026088
 8001f8c:	40026488 	.word	0x40026488
 8001f90:	40026040 	.word	0x40026040
 8001f94:	40026440 	.word	0x40026440
 8001f98:	400260a0 	.word	0x400260a0
 8001f9c:	400264a0 	.word	0x400264a0
 8001fa0:	40026458 	.word	0x40026458
 8001fa4:	40026400 	.word	0x40026400
 8001fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fac:	e009      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb2:	e006      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	e004      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001fb8:	2308      	movs	r3, #8
 8001fba:	e002      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	e000      	b.n	8001fc2 <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8001fc0:	2308      	movs	r3, #8
 8001fc2:	60d3      	str	r3, [r2, #12]
 8001fc4:	e173      	b.n	80022ae <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b9f      	ldr	r3, [pc, #636]	; (800224c <HAL_DMAEx_MultiBufferStart_IT+0xbf8>)
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d96c      	bls.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xa58>
 8001fd2:	4a9f      	ldr	r2, [pc, #636]	; (8002250 <HAL_DMAEx_MultiBufferStart_IT+0xbfc>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4b9e      	ldr	r3, [pc, #632]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0xc00>)
 8001fdc:	4299      	cmp	r1, r3
 8001fde:	d062      	beq.n	80020a6 <HAL_DMAEx_MultiBufferStart_IT+0xa52>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4b9c      	ldr	r3, [pc, #624]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0xc04>)
 8001fe8:	4299      	cmp	r1, r3
 8001fea:	d05a      	beq.n	80020a2 <HAL_DMAEx_MultiBufferStart_IT+0xa4e>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4b9a      	ldr	r3, [pc, #616]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0xc08>)
 8001ff4:	4299      	cmp	r1, r3
 8001ff6:	d052      	beq.n	800209e <HAL_DMAEx_MultiBufferStart_IT+0xa4a>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4b98      	ldr	r3, [pc, #608]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0xc0c>)
 8002000:	4299      	cmp	r1, r3
 8002002:	d04a      	beq.n	800209a <HAL_DMAEx_MultiBufferStart_IT+0xa46>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4619      	mov	r1, r3
 800200a:	4b96      	ldr	r3, [pc, #600]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0xc10>)
 800200c:	4299      	cmp	r1, r3
 800200e:	d041      	beq.n	8002094 <HAL_DMAEx_MultiBufferStart_IT+0xa40>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	4b94      	ldr	r3, [pc, #592]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0xc14>)
 8002018:	4299      	cmp	r1, r3
 800201a:	d038      	beq.n	800208e <HAL_DMAEx_MultiBufferStart_IT+0xa3a>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	4b92      	ldr	r3, [pc, #584]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0xc18>)
 8002024:	4299      	cmp	r1, r3
 8002026:	d02f      	beq.n	8002088 <HAL_DMAEx_MultiBufferStart_IT+0xa34>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	4b90      	ldr	r3, [pc, #576]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0xc1c>)
 8002030:	4299      	cmp	r1, r3
 8002032:	d026      	beq.n	8002082 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0xc20>)
 800203c:	4299      	cmp	r1, r3
 800203e:	d01d      	beq.n	800207c <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	4b8c      	ldr	r3, [pc, #560]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0xc24>)
 8002048:	4299      	cmp	r1, r3
 800204a:	d014      	beq.n	8002076 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0xc28>)
 8002054:	4299      	cmp	r1, r3
 8002056:	d00b      	beq.n	8002070 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	4b88      	ldr	r3, [pc, #544]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0xc2c>)
 8002060:	4299      	cmp	r1, r3
 8002062:	d102      	bne.n	800206a <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8002064:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002068:	e01e      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800206a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206e:	e01b      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8002070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002074:	e018      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8002076:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800207a:	e015      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800207c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002080:	e012      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8002082:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002086:	e00f      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8002088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208c:	e00c      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800208e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002092:	e009      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8002094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002098:	e006      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800209a:	2308      	movs	r3, #8
 800209c:	e004      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800209e:	2308      	movs	r3, #8
 80020a0:	e002      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e000      	b.n	80020a8 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 80020a6:	2308      	movs	r3, #8
 80020a8:	6093      	str	r3, [r2, #8]
 80020aa:	e100      	b.n	80022ae <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b74      	ldr	r3, [pc, #464]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0xc30>)
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d96c      	bls.n	8002192 <HAL_DMAEx_MultiBufferStart_IT+0xb3e>
 80020b8:	4a73      	ldr	r2, [pc, #460]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0xc34>)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0xc00>)
 80020c2:	4299      	cmp	r1, r3
 80020c4:	d062      	beq.n	800218c <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4b62      	ldr	r3, [pc, #392]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0xc04>)
 80020ce:	4299      	cmp	r1, r3
 80020d0:	d05a      	beq.n	8002188 <HAL_DMAEx_MultiBufferStart_IT+0xb34>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4619      	mov	r1, r3
 80020d8:	4b60      	ldr	r3, [pc, #384]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0xc08>)
 80020da:	4299      	cmp	r1, r3
 80020dc:	d052      	beq.n	8002184 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	4b5e      	ldr	r3, [pc, #376]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0xc0c>)
 80020e6:	4299      	cmp	r1, r3
 80020e8:	d04a      	beq.n	8002180 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	4b5c      	ldr	r3, [pc, #368]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0xc10>)
 80020f2:	4299      	cmp	r1, r3
 80020f4:	d041      	beq.n	800217a <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4b5a      	ldr	r3, [pc, #360]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0xc14>)
 80020fe:	4299      	cmp	r1, r3
 8002100:	d038      	beq.n	8002174 <HAL_DMAEx_MultiBufferStart_IT+0xb20>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	4b58      	ldr	r3, [pc, #352]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0xc18>)
 800210a:	4299      	cmp	r1, r3
 800210c:	d02f      	beq.n	800216e <HAL_DMAEx_MultiBufferStart_IT+0xb1a>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0xc1c>)
 8002116:	4299      	cmp	r1, r3
 8002118:	d026      	beq.n	8002168 <HAL_DMAEx_MultiBufferStart_IT+0xb14>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0xc20>)
 8002122:	4299      	cmp	r1, r3
 8002124:	d01d      	beq.n	8002162 <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4619      	mov	r1, r3
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0xc24>)
 800212e:	4299      	cmp	r1, r3
 8002130:	d014      	beq.n	800215c <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4619      	mov	r1, r3
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0xc28>)
 800213a:	4299      	cmp	r1, r3
 800213c:	d00b      	beq.n	8002156 <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0xc2c>)
 8002146:	4299      	cmp	r1, r3
 8002148:	d102      	bne.n	8002150 <HAL_DMAEx_MultiBufferStart_IT+0xafc>
 800214a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800214e:	e01e      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002150:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002154:	e01b      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002156:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800215a:	e018      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800215c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002160:	e015      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002162:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002166:	e012      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800216c:	e00f      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800216e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002172:	e00c      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002178:	e009      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800217a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217e:	e006      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002180:	2308      	movs	r3, #8
 8002182:	e004      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002184:	2308      	movs	r3, #8
 8002186:	e002      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8002188:	2308      	movs	r3, #8
 800218a:	e000      	b.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800218c:	2308      	movs	r3, #8
 800218e:	60d3      	str	r3, [r2, #12]
 8002190:	e08d      	b.n	80022ae <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 8002192:	4a3d      	ldr	r2, [pc, #244]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0xc34>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_DMAEx_MultiBufferStart_IT+0xc00>)
 800219c:	4299      	cmp	r1, r3
 800219e:	f000 8084 	beq.w	80022aa <HAL_DMAEx_MultiBufferStart_IT+0xc56>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0xc04>)
 80021aa:	4299      	cmp	r1, r3
 80021ac:	d07b      	beq.n	80022a6 <HAL_DMAEx_MultiBufferStart_IT+0xc52>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0xc08>)
 80021b6:	4299      	cmp	r1, r3
 80021b8:	d073      	beq.n	80022a2 <HAL_DMAEx_MultiBufferStart_IT+0xc4e>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4619      	mov	r1, r3
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0xc0c>)
 80021c2:	4299      	cmp	r1, r3
 80021c4:	d06b      	beq.n	800229e <HAL_DMAEx_MultiBufferStart_IT+0xc4a>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0xc10>)
 80021ce:	4299      	cmp	r1, r3
 80021d0:	d062      	beq.n	8002298 <HAL_DMAEx_MultiBufferStart_IT+0xc44>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4619      	mov	r1, r3
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0xc14>)
 80021da:	4299      	cmp	r1, r3
 80021dc:	d059      	beq.n	8002292 <HAL_DMAEx_MultiBufferStart_IT+0xc3e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0xc18>)
 80021e6:	4299      	cmp	r1, r3
 80021e8:	d050      	beq.n	800228c <HAL_DMAEx_MultiBufferStart_IT+0xc38>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4619      	mov	r1, r3
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0xc1c>)
 80021f2:	4299      	cmp	r1, r3
 80021f4:	d026      	beq.n	8002244 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0xc20>)
 80021fe:	4299      	cmp	r1, r3
 8002200:	d01d      	beq.n	800223e <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4619      	mov	r1, r3
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0xc24>)
 800220a:	4299      	cmp	r1, r3
 800220c:	d014      	beq.n	8002238 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0xc28>)
 8002216:	4299      	cmp	r1, r3
 8002218:	d00b      	beq.n	8002232 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0xc2c>)
 8002222:	4299      	cmp	r1, r3
 8002224:	d102      	bne.n	800222c <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002226:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800222a:	e03f      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002230:	e03c      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8002232:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002236:	e039      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8002238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800223c:	e036      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800223e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002242:	e033      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8002244:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002248:	e030      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800224a:	bf00      	nop
 800224c:	400260b8 	.word	0x400260b8
 8002250:	40026400 	.word	0x40026400
 8002254:	40026010 	.word	0x40026010
 8002258:	40026410 	.word	0x40026410
 800225c:	40026070 	.word	0x40026070
 8002260:	40026470 	.word	0x40026470
 8002264:	40026028 	.word	0x40026028
 8002268:	40026428 	.word	0x40026428
 800226c:	40026088 	.word	0x40026088
 8002270:	40026488 	.word	0x40026488
 8002274:	40026040 	.word	0x40026040
 8002278:	40026440 	.word	0x40026440
 800227c:	400260a0 	.word	0x400260a0
 8002280:	400264a0 	.word	0x400264a0
 8002284:	40026058 	.word	0x40026058
 8002288:	40026000 	.word	0x40026000
 800228c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002290:	e00c      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8002292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002296:	e009      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8002298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229c:	e006      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800229e:	2308      	movs	r3, #8
 80022a0:	e004      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 80022a2:	2308      	movs	r3, #8
 80022a4:	e002      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 80022a6:	2308      	movs	r3, #8
 80022a8:	e000      	b.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 80022aa:	2308      	movs	r3, #8
 80022ac:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b9f      	ldr	r3, [pc, #636]	; (8002534 <HAL_DMAEx_MultiBufferStart_IT+0xee0>)
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d96c      	bls.n	8002394 <HAL_DMAEx_MultiBufferStart_IT+0xd40>
 80022ba:	4a9f      	ldr	r2, [pc, #636]	; (8002538 <HAL_DMAEx_MultiBufferStart_IT+0xee4>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4b9e      	ldr	r3, [pc, #632]	; (800253c <HAL_DMAEx_MultiBufferStart_IT+0xee8>)
 80022c4:	4299      	cmp	r1, r3
 80022c6:	d062      	beq.n	800238e <HAL_DMAEx_MultiBufferStart_IT+0xd3a>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4619      	mov	r1, r3
 80022ce:	4b9c      	ldr	r3, [pc, #624]	; (8002540 <HAL_DMAEx_MultiBufferStart_IT+0xeec>)
 80022d0:	4299      	cmp	r1, r3
 80022d2:	d05a      	beq.n	800238a <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	4b9a      	ldr	r3, [pc, #616]	; (8002544 <HAL_DMAEx_MultiBufferStart_IT+0xef0>)
 80022dc:	4299      	cmp	r1, r3
 80022de:	d052      	beq.n	8002386 <HAL_DMAEx_MultiBufferStart_IT+0xd32>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	4b98      	ldr	r3, [pc, #608]	; (8002548 <HAL_DMAEx_MultiBufferStart_IT+0xef4>)
 80022e8:	4299      	cmp	r1, r3
 80022ea:	d04a      	beq.n	8002382 <HAL_DMAEx_MultiBufferStart_IT+0xd2e>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4619      	mov	r1, r3
 80022f2:	4b96      	ldr	r3, [pc, #600]	; (800254c <HAL_DMAEx_MultiBufferStart_IT+0xef8>)
 80022f4:	4299      	cmp	r1, r3
 80022f6:	d041      	beq.n	800237c <HAL_DMAEx_MultiBufferStart_IT+0xd28>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4b94      	ldr	r3, [pc, #592]	; (8002550 <HAL_DMAEx_MultiBufferStart_IT+0xefc>)
 8002300:	4299      	cmp	r1, r3
 8002302:	d038      	beq.n	8002376 <HAL_DMAEx_MultiBufferStart_IT+0xd22>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	4b92      	ldr	r3, [pc, #584]	; (8002554 <HAL_DMAEx_MultiBufferStart_IT+0xf00>)
 800230c:	4299      	cmp	r1, r3
 800230e:	d02f      	beq.n	8002370 <HAL_DMAEx_MultiBufferStart_IT+0xd1c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4b90      	ldr	r3, [pc, #576]	; (8002558 <HAL_DMAEx_MultiBufferStart_IT+0xf04>)
 8002318:	4299      	cmp	r1, r3
 800231a:	d026      	beq.n	800236a <HAL_DMAEx_MultiBufferStart_IT+0xd16>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	4b8e      	ldr	r3, [pc, #568]	; (800255c <HAL_DMAEx_MultiBufferStart_IT+0xf08>)
 8002324:	4299      	cmp	r1, r3
 8002326:	d01d      	beq.n	8002364 <HAL_DMAEx_MultiBufferStart_IT+0xd10>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>)
 8002330:	4299      	cmp	r1, r3
 8002332:	d014      	beq.n	800235e <HAL_DMAEx_MultiBufferStart_IT+0xd0a>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4b8a      	ldr	r3, [pc, #552]	; (8002564 <HAL_DMAEx_MultiBufferStart_IT+0xf10>)
 800233c:	4299      	cmp	r1, r3
 800233e:	d00b      	beq.n	8002358 <HAL_DMAEx_MultiBufferStart_IT+0xd04>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	4b88      	ldr	r3, [pc, #544]	; (8002568 <HAL_DMAEx_MultiBufferStart_IT+0xf14>)
 8002348:	4299      	cmp	r1, r3
 800234a:	d102      	bne.n	8002352 <HAL_DMAEx_MultiBufferStart_IT+0xcfe>
 800234c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002350:	e01e      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002352:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002356:	e01b      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002358:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800235c:	e018      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800235e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002362:	e015      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002364:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002368:	e012      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800236a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800236e:	e00f      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002374:	e00c      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237a:	e009      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800237c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002380:	e006      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002382:	2304      	movs	r3, #4
 8002384:	e004      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8002386:	2304      	movs	r3, #4
 8002388:	e002      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800238a:	2304      	movs	r3, #4
 800238c:	e000      	b.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800238e:	2304      	movs	r3, #4
 8002390:	60d3      	str	r3, [r2, #12]
 8002392:	e175      	b.n	8002680 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b74      	ldr	r3, [pc, #464]	; (800256c <HAL_DMAEx_MultiBufferStart_IT+0xf18>)
 800239c:	429a      	cmp	r2, r3
 800239e:	d96c      	bls.n	800247a <HAL_DMAEx_MultiBufferStart_IT+0xe26>
 80023a0:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_DMAEx_MultiBufferStart_IT+0xee4>)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <HAL_DMAEx_MultiBufferStart_IT+0xee8>)
 80023aa:	4299      	cmp	r1, r3
 80023ac:	d062      	beq.n	8002474 <HAL_DMAEx_MultiBufferStart_IT+0xe20>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4b62      	ldr	r3, [pc, #392]	; (8002540 <HAL_DMAEx_MultiBufferStart_IT+0xeec>)
 80023b6:	4299      	cmp	r1, r3
 80023b8:	d05a      	beq.n	8002470 <HAL_DMAEx_MultiBufferStart_IT+0xe1c>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	4b60      	ldr	r3, [pc, #384]	; (8002544 <HAL_DMAEx_MultiBufferStart_IT+0xef0>)
 80023c2:	4299      	cmp	r1, r3
 80023c4:	d052      	beq.n	800246c <HAL_DMAEx_MultiBufferStart_IT+0xe18>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_DMAEx_MultiBufferStart_IT+0xef4>)
 80023ce:	4299      	cmp	r1, r3
 80023d0:	d04a      	beq.n	8002468 <HAL_DMAEx_MultiBufferStart_IT+0xe14>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_DMAEx_MultiBufferStart_IT+0xef8>)
 80023da:	4299      	cmp	r1, r3
 80023dc:	d041      	beq.n	8002462 <HAL_DMAEx_MultiBufferStart_IT+0xe0e>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <HAL_DMAEx_MultiBufferStart_IT+0xefc>)
 80023e6:	4299      	cmp	r1, r3
 80023e8:	d038      	beq.n	800245c <HAL_DMAEx_MultiBufferStart_IT+0xe08>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	4b58      	ldr	r3, [pc, #352]	; (8002554 <HAL_DMAEx_MultiBufferStart_IT+0xf00>)
 80023f2:	4299      	cmp	r1, r3
 80023f4:	d02f      	beq.n	8002456 <HAL_DMAEx_MultiBufferStart_IT+0xe02>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_DMAEx_MultiBufferStart_IT+0xf04>)
 80023fe:	4299      	cmp	r1, r3
 8002400:	d026      	beq.n	8002450 <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	4b54      	ldr	r3, [pc, #336]	; (800255c <HAL_DMAEx_MultiBufferStart_IT+0xf08>)
 800240a:	4299      	cmp	r1, r3
 800240c:	d01d      	beq.n	800244a <HAL_DMAEx_MultiBufferStart_IT+0xdf6>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4619      	mov	r1, r3
 8002414:	4b52      	ldr	r3, [pc, #328]	; (8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>)
 8002416:	4299      	cmp	r1, r3
 8002418:	d014      	beq.n	8002444 <HAL_DMAEx_MultiBufferStart_IT+0xdf0>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_DMAEx_MultiBufferStart_IT+0xf10>)
 8002422:	4299      	cmp	r1, r3
 8002424:	d00b      	beq.n	800243e <HAL_DMAEx_MultiBufferStart_IT+0xdea>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <HAL_DMAEx_MultiBufferStart_IT+0xf14>)
 800242e:	4299      	cmp	r1, r3
 8002430:	d102      	bne.n	8002438 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8002432:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002436:	e01e      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243c:	e01b      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800243e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002442:	e018      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002444:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002448:	e015      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800244a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800244e:	e012      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002454:	e00f      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800245a:	e00c      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800245c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002460:	e009      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002466:	e006      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002468:	2304      	movs	r3, #4
 800246a:	e004      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800246c:	2304      	movs	r3, #4
 800246e:	e002      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002470:	2304      	movs	r3, #4
 8002472:	e000      	b.n	8002476 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8002474:	2304      	movs	r3, #4
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	e102      	b.n	8002680 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	4b3b      	ldr	r3, [pc, #236]	; (8002570 <HAL_DMAEx_MultiBufferStart_IT+0xf1c>)
 8002482:	429a      	cmp	r2, r3
 8002484:	f240 8090 	bls.w	80025a8 <HAL_DMAEx_MultiBufferStart_IT+0xf54>
 8002488:	4a3a      	ldr	r2, [pc, #232]	; (8002574 <HAL_DMAEx_MultiBufferStart_IT+0xf20>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_DMAEx_MultiBufferStart_IT+0xee8>)
 8002492:	4299      	cmp	r1, r3
 8002494:	f000 8085 	beq.w	80025a2 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_DMAEx_MultiBufferStart_IT+0xeec>)
 80024a0:	4299      	cmp	r1, r3
 80024a2:	d07c      	beq.n	800259e <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <HAL_DMAEx_MultiBufferStart_IT+0xef0>)
 80024ac:	4299      	cmp	r1, r3
 80024ae:	d074      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_DMAEx_MultiBufferStart_IT+0xef4>)
 80024b8:	4299      	cmp	r1, r3
 80024ba:	d06c      	beq.n	8002596 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_DMAEx_MultiBufferStart_IT+0xef8>)
 80024c4:	4299      	cmp	r1, r3
 80024c6:	d063      	beq.n	8002590 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_DMAEx_MultiBufferStart_IT+0xefc>)
 80024d0:	4299      	cmp	r1, r3
 80024d2:	d05a      	beq.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_DMAEx_MultiBufferStart_IT+0xf00>)
 80024dc:	4299      	cmp	r1, r3
 80024de:	d051      	beq.n	8002584 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_DMAEx_MultiBufferStart_IT+0xf04>)
 80024e8:	4299      	cmp	r1, r3
 80024ea:	d048      	beq.n	800257e <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <HAL_DMAEx_MultiBufferStart_IT+0xf08>)
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d03f      	beq.n	8002578 <HAL_DMAEx_MultiBufferStart_IT+0xf24>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>)
 8002500:	4299      	cmp	r1, r3
 8002502:	d014      	beq.n	800252e <HAL_DMAEx_MultiBufferStart_IT+0xeda>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4619      	mov	r1, r3
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_DMAEx_MultiBufferStart_IT+0xf10>)
 800250c:	4299      	cmp	r1, r3
 800250e:	d00b      	beq.n	8002528 <HAL_DMAEx_MultiBufferStart_IT+0xed4>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <HAL_DMAEx_MultiBufferStart_IT+0xf14>)
 8002518:	4299      	cmp	r1, r3
 800251a:	d102      	bne.n	8002522 <HAL_DMAEx_MultiBufferStart_IT+0xece>
 800251c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002520:	e040      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8002522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002526:	e03d      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8002528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800252c:	e03a      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800252e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002532:	e037      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8002534:	40026458 	.word	0x40026458
 8002538:	40026400 	.word	0x40026400
 800253c:	40026010 	.word	0x40026010
 8002540:	40026410 	.word	0x40026410
 8002544:	40026070 	.word	0x40026070
 8002548:	40026470 	.word	0x40026470
 800254c:	40026028 	.word	0x40026028
 8002550:	40026428 	.word	0x40026428
 8002554:	40026088 	.word	0x40026088
 8002558:	40026488 	.word	0x40026488
 800255c:	40026040 	.word	0x40026040
 8002560:	40026440 	.word	0x40026440
 8002564:	400260a0 	.word	0x400260a0
 8002568:	400264a0 	.word	0x400264a0
 800256c:	400260b8 	.word	0x400260b8
 8002570:	40026058 	.word	0x40026058
 8002574:	40026000 	.word	0x40026000
 8002578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800257c:	e012      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800257e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002582:	e00f      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8002584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002588:	e00c      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800258a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258e:	e009      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8002590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002594:	e006      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8002596:	2304      	movs	r3, #4
 8002598:	e004      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800259a:	2304      	movs	r3, #4
 800259c:	e002      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800259e:	2304      	movs	r3, #4
 80025a0:	e000      	b.n	80025a4 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 80025a2:	2304      	movs	r3, #4
 80025a4:	60d3      	str	r3, [r2, #12]
 80025a6:	e06b      	b.n	8002680 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 80025a8:	4a9e      	ldr	r2, [pc, #632]	; (8002824 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4619      	mov	r1, r3
 80025b0:	4b9d      	ldr	r3, [pc, #628]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 80025b2:	4299      	cmp	r1, r3
 80025b4:	d062      	beq.n	800267c <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4b9b      	ldr	r3, [pc, #620]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 80025be:	4299      	cmp	r1, r3
 80025c0:	d05a      	beq.n	8002678 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4b99      	ldr	r3, [pc, #612]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 80025ca:	4299      	cmp	r1, r3
 80025cc:	d052      	beq.n	8002674 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4b97      	ldr	r3, [pc, #604]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 80025d6:	4299      	cmp	r1, r3
 80025d8:	d04a      	beq.n	8002670 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4b95      	ldr	r3, [pc, #596]	; (8002838 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 80025e2:	4299      	cmp	r1, r3
 80025e4:	d041      	beq.n	800266a <HAL_DMAEx_MultiBufferStart_IT+0x1016>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 80025ee:	4299      	cmp	r1, r3
 80025f0:	d038      	beq.n	8002664 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4b91      	ldr	r3, [pc, #580]	; (8002840 <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 80025fa:	4299      	cmp	r1, r3
 80025fc:	d02f      	beq.n	800265e <HAL_DMAEx_MultiBufferStart_IT+0x100a>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 8002606:	4299      	cmp	r1, r3
 8002608:	d026      	beq.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 8002612:	4299      	cmp	r1, r3
 8002614:	d01d      	beq.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0xffe>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4b8b      	ldr	r3, [pc, #556]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 800261e:	4299      	cmp	r1, r3
 8002620:	d014      	beq.n	800264c <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4b89      	ldr	r3, [pc, #548]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 800262a:	4299      	cmp	r1, r3
 800262c:	d00b      	beq.n	8002646 <HAL_DMAEx_MultiBufferStart_IT+0xff2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	4b87      	ldr	r3, [pc, #540]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 8002636:	4299      	cmp	r1, r3
 8002638:	d102      	bne.n	8002640 <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 800263a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800263e:	e01e      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002644:	e01b      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002646:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800264a:	e018      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800264c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002650:	e015      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002652:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002656:	e012      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265c:	e00f      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800265e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002662:	e00c      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002668:	e009      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800266a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800266e:	e006      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002670:	2304      	movs	r3, #4
 8002672:	e004      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002674:	2304      	movs	r3, #4
 8002676:	e002      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8002678:	2304      	movs	r3, #4
 800267a:	e000      	b.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800267c:	2304      	movs	r3, #4
 800267e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <HAL_DMAEx_MultiBufferStart_IT+0x1204>)
 8002688:	429a      	cmp	r2, r3
 800268a:	d968      	bls.n	800275e <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 800268c:	4a73      	ldr	r2, [pc, #460]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4b64      	ldr	r3, [pc, #400]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 8002696:	4299      	cmp	r1, r3
 8002698:	d05e      	beq.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x1104>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 80026a2:	4299      	cmp	r1, r3
 80026a4:	d056      	beq.n	8002754 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4b60      	ldr	r3, [pc, #384]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 80026ae:	4299      	cmp	r1, r3
 80026b0:	d04e      	beq.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 80026ba:	4299      	cmp	r1, r3
 80026bc:	d046      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x10f8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 80026c6:	4299      	cmp	r1, r3
 80026c8:	d03e      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x10f4>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4619      	mov	r1, r3
 80026d0:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 80026d2:	4299      	cmp	r1, r3
 80026d4:	d036      	beq.n	8002744 <HAL_DMAEx_MultiBufferStart_IT+0x10f0>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 80026de:	4299      	cmp	r1, r3
 80026e0:	d02e      	beq.n	8002740 <HAL_DMAEx_MultiBufferStart_IT+0x10ec>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 80026ea:	4299      	cmp	r1, r3
 80026ec:	d026      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4b54      	ldr	r3, [pc, #336]	; (8002848 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 80026f6:	4299      	cmp	r1, r3
 80026f8:	d01d      	beq.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 8002702:	4299      	cmp	r1, r3
 8002704:	d014      	beq.n	8002730 <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 800270e:	4299      	cmp	r1, r3
 8002710:	d00b      	beq.n	800272a <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4619      	mov	r1, r3
 8002718:	4b4e      	ldr	r3, [pc, #312]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 800271a:	4299      	cmp	r1, r3
 800271c:	d102      	bne.n	8002724 <HAL_DMAEx_MultiBufferStart_IT+0x10d0>
 800271e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002722:	e01a      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002724:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002728:	e017      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800272a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272e:	e014      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002734:	e011      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273a:	e00e      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800273c:	2340      	movs	r3, #64	; 0x40
 800273e:	e00c      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	e00a      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002744:	2340      	movs	r3, #64	; 0x40
 8002746:	e008      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	e006      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 800274c:	2301      	movs	r3, #1
 800274e:	e004      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002750:	2301      	movs	r3, #1
 8002752:	e002      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8002758:	2301      	movs	r3, #1
 800275a:	60d3      	str	r3, [r2, #12]
 800275c:	e166      	b.n	8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x13d8>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b3e      	ldr	r3, [pc, #248]	; (8002860 <HAL_DMAEx_MultiBufferStart_IT+0x120c>)
 8002766:	429a      	cmp	r2, r3
 8002768:	f240 8089 	bls.w	800287e <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 800276c:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 8002776:	4299      	cmp	r1, r3
 8002778:	d07e      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4619      	mov	r1, r3
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 8002782:	4299      	cmp	r1, r3
 8002784:	d076      	beq.n	8002874 <HAL_DMAEx_MultiBufferStart_IT+0x1220>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4619      	mov	r1, r3
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 800278e:	4299      	cmp	r1, r3
 8002790:	d06e      	beq.n	8002870 <HAL_DMAEx_MultiBufferStart_IT+0x121c>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	4b26      	ldr	r3, [pc, #152]	; (8002834 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 800279a:	4299      	cmp	r1, r3
 800279c:	d066      	beq.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x1218>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 80027a6:	4299      	cmp	r1, r3
 80027a8:	d05e      	beq.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x1214>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 80027b2:	4299      	cmp	r1, r3
 80027b4:	d056      	beq.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x1210>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 80027be:	4299      	cmp	r1, r3
 80027c0:	d02e      	beq.n	8002820 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 80027ca:	4299      	cmp	r1, r3
 80027cc:	d026      	beq.n	800281c <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 80027d6:	4299      	cmp	r1, r3
 80027d8:	d01d      	beq.n	8002816 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 80027e2:	4299      	cmp	r1, r3
 80027e4:	d014      	beq.n	8002810 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4b18      	ldr	r3, [pc, #96]	; (8002850 <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 80027ee:	4299      	cmp	r1, r3
 80027f0:	d00b      	beq.n	800280a <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 80027fa:	4299      	cmp	r1, r3
 80027fc:	d102      	bne.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80027fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002802:	e03a      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002804:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002808:	e037      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 800280a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800280e:	e034      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002814:	e031      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002816:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800281a:	e02e      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 800281c:	2340      	movs	r3, #64	; 0x40
 800281e:	e02c      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002820:	2340      	movs	r3, #64	; 0x40
 8002822:	e02a      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002824:	40026000 	.word	0x40026000
 8002828:	40026010 	.word	0x40026010
 800282c:	40026410 	.word	0x40026410
 8002830:	40026070 	.word	0x40026070
 8002834:	40026470 	.word	0x40026470
 8002838:	40026028 	.word	0x40026028
 800283c:	40026428 	.word	0x40026428
 8002840:	40026088 	.word	0x40026088
 8002844:	40026488 	.word	0x40026488
 8002848:	40026040 	.word	0x40026040
 800284c:	40026440 	.word	0x40026440
 8002850:	400260a0 	.word	0x400260a0
 8002854:	400264a0 	.word	0x400264a0
 8002858:	40026458 	.word	0x40026458
 800285c:	40026400 	.word	0x40026400
 8002860:	400260b8 	.word	0x400260b8
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	e008      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002868:	2340      	movs	r3, #64	; 0x40
 800286a:	e006      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 800286c:	2301      	movs	r3, #1
 800286e:	e004      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002870:	2301      	movs	r3, #1
 8002872:	e002      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8002878:	2301      	movs	r3, #1
 800287a:	6093      	str	r3, [r2, #8]
 800287c:	e0d6      	b.n	8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x13d8>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	4b83      	ldr	r3, [pc, #524]	; (8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x1440>)
 8002886:	429a      	cmp	r2, r3
 8002888:	d968      	bls.n	800295c <HAL_DMAEx_MultiBufferStart_IT+0x1308>
 800288a:	4a83      	ldr	r2, [pc, #524]	; (8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x1444>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	4b82      	ldr	r3, [pc, #520]	; (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x1448>)
 8002894:	4299      	cmp	r1, r3
 8002896:	d05e      	beq.n	8002956 <HAL_DMAEx_MultiBufferStart_IT+0x1302>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	4b80      	ldr	r3, [pc, #512]	; (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x144c>)
 80028a0:	4299      	cmp	r1, r3
 80028a2:	d056      	beq.n	8002952 <HAL_DMAEx_MultiBufferStart_IT+0x12fe>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4b7e      	ldr	r3, [pc, #504]	; (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1450>)
 80028ac:	4299      	cmp	r1, r3
 80028ae:	d04e      	beq.n	800294e <HAL_DMAEx_MultiBufferStart_IT+0x12fa>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4b7c      	ldr	r3, [pc, #496]	; (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x1454>)
 80028b8:	4299      	cmp	r1, r3
 80028ba:	d046      	beq.n	800294a <HAL_DMAEx_MultiBufferStart_IT+0x12f6>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x1458>)
 80028c4:	4299      	cmp	r1, r3
 80028c6:	d03e      	beq.n	8002946 <HAL_DMAEx_MultiBufferStart_IT+0x12f2>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4b78      	ldr	r3, [pc, #480]	; (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x145c>)
 80028d0:	4299      	cmp	r1, r3
 80028d2:	d036      	beq.n	8002942 <HAL_DMAEx_MultiBufferStart_IT+0x12ee>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1460>)
 80028dc:	4299      	cmp	r1, r3
 80028de:	d02e      	beq.n	800293e <HAL_DMAEx_MultiBufferStart_IT+0x12ea>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x1464>)
 80028e8:	4299      	cmp	r1, r3
 80028ea:	d026      	beq.n	800293a <HAL_DMAEx_MultiBufferStart_IT+0x12e6>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	4b72      	ldr	r3, [pc, #456]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x1468>)
 80028f4:	4299      	cmp	r1, r3
 80028f6:	d01d      	beq.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x12e0>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x146c>)
 8002900:	4299      	cmp	r1, r3
 8002902:	d014      	beq.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0x12da>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	4b6e      	ldr	r3, [pc, #440]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1470>)
 800290c:	4299      	cmp	r1, r3
 800290e:	d00b      	beq.n	8002928 <HAL_DMAEx_MultiBufferStart_IT+0x12d4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	4b6c      	ldr	r3, [pc, #432]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x1474>)
 8002918:	4299      	cmp	r1, r3
 800291a:	d102      	bne.n	8002922 <HAL_DMAEx_MultiBufferStart_IT+0x12ce>
 800291c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002920:	e01a      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002922:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002926:	e017      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800292c:	e014      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 800292e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002932:	e011      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002934:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002938:	e00e      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 800293a:	2340      	movs	r3, #64	; 0x40
 800293c:	e00c      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	e00a      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002942:	2340      	movs	r3, #64	; 0x40
 8002944:	e008      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002946:	2340      	movs	r3, #64	; 0x40
 8002948:	e006      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 800294a:	2301      	movs	r3, #1
 800294c:	e004      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 800294e:	2301      	movs	r3, #1
 8002950:	e002      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8002956:	2301      	movs	r3, #1
 8002958:	60d3      	str	r3, [r2, #12]
 800295a:	e067      	b.n	8002a2c <HAL_DMAEx_MultiBufferStart_IT+0x13d8>
 800295c:	4a4e      	ldr	r2, [pc, #312]	; (8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x1444>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x1448>)
 8002966:	4299      	cmp	r1, r3
 8002968:	d05e      	beq.n	8002a28 <HAL_DMAEx_MultiBufferStart_IT+0x13d4>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x144c>)
 8002972:	4299      	cmp	r1, r3
 8002974:	d056      	beq.n	8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x13d0>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1450>)
 800297e:	4299      	cmp	r1, r3
 8002980:	d04e      	beq.n	8002a20 <HAL_DMAEx_MultiBufferStart_IT+0x13cc>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_DMAEx_MultiBufferStart_IT+0x1454>)
 800298a:	4299      	cmp	r1, r3
 800298c:	d046      	beq.n	8002a1c <HAL_DMAEx_MultiBufferStart_IT+0x13c8>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_DMAEx_MultiBufferStart_IT+0x1458>)
 8002996:	4299      	cmp	r1, r3
 8002998:	d03e      	beq.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x13c4>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4b43      	ldr	r3, [pc, #268]	; (8002ab0 <HAL_DMAEx_MultiBufferStart_IT+0x145c>)
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d036      	beq.n	8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x13c0>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4b41      	ldr	r3, [pc, #260]	; (8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1460>)
 80029ae:	4299      	cmp	r1, r3
 80029b0:	d02e      	beq.n	8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x13bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x1464>)
 80029ba:	4299      	cmp	r1, r3
 80029bc:	d026      	beq.n	8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x13b8>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4b3d      	ldr	r3, [pc, #244]	; (8002abc <HAL_DMAEx_MultiBufferStart_IT+0x1468>)
 80029c6:	4299      	cmp	r1, r3
 80029c8:	d01d      	beq.n	8002a06 <HAL_DMAEx_MultiBufferStart_IT+0x13b2>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <HAL_DMAEx_MultiBufferStart_IT+0x146c>)
 80029d2:	4299      	cmp	r1, r3
 80029d4:	d014      	beq.n	8002a00 <HAL_DMAEx_MultiBufferStart_IT+0x13ac>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1470>)
 80029de:	4299      	cmp	r1, r3
 80029e0:	d00b      	beq.n	80029fa <HAL_DMAEx_MultiBufferStart_IT+0x13a6>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x1474>)
 80029ea:	4299      	cmp	r1, r3
 80029ec:	d102      	bne.n	80029f4 <HAL_DMAEx_MultiBufferStart_IT+0x13a0>
 80029ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f2:	e01a      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 80029f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029f8:	e017      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 80029fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fe:	e014      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a04:	e011      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a0a:	e00e      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a0c:	2340      	movs	r3, #64	; 0x40
 8002a0e:	e00c      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a10:	2340      	movs	r3, #64	; 0x40
 8002a12:	e00a      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a14:	2340      	movs	r3, #64	; 0x40
 8002a16:	e008      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a18:	2340      	movs	r3, #64	; 0x40
 8002a1a:	e006      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e004      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e002      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	f042 0216 	orr.w	r2, r2, #22
 8002a3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	6952      	ldr	r2, [r2, #20]
 8002a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a4a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x1408>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x1418>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	f042 0208 	orr.w	r2, r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e005      	b.n	8002a8a <HAL_DMAEx_MultiBufferStart_IT+0x1436>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
 8002a88:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40026058 	.word	0x40026058
 8002a98:	40026000 	.word	0x40026000
 8002a9c:	40026010 	.word	0x40026010
 8002aa0:	40026410 	.word	0x40026410
 8002aa4:	40026070 	.word	0x40026070
 8002aa8:	40026470 	.word	0x40026470
 8002aac:	40026028 	.word	0x40026028
 8002ab0:	40026428 	.word	0x40026428
 8002ab4:	40026088 	.word	0x40026088
 8002ab8:	40026488 	.word	0x40026488
 8002abc:	40026040 	.word	0x40026040
 8002ac0:	40026440 	.word	0x40026440
 8002ac4:	400260a0 	.word	0x400260a0
 8002ac8:	400264a0 	.word	0x400264a0

08002acc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	e003      	b.n	8002af2 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d108      	bne.n	8002b30 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b2e:	e007      	b.n	8002b40 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e177      	b.n	8002e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 8166 	bne.w	8002e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x4a>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b12      	cmp	r3, #18
 8002b94:	d123      	bne.n	8002bde <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	08da      	lsrs	r2, r3, #3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3208      	adds	r2, #8
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0203 	and.w	r2, r3, #3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00b      	beq.n	8002c32 <HAL_GPIO_Init+0xe6>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b12      	cmp	r3, #18
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80c0 	beq.w	8002e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4a65      	ldr	r2, [pc, #404]	; (8002e6c <HAL_GPIO_Init+0x320>)
 8002cd8:	4b64      	ldr	r3, [pc, #400]	; (8002e6c <HAL_GPIO_Init+0x320>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b62      	ldr	r3, [pc, #392]	; (8002e6c <HAL_GPIO_Init+0x320>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cee:	4a60      	ldr	r2, [pc, #384]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a57      	ldr	r2, [pc, #348]	; (8002e74 <HAL_GPIO_Init+0x328>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d037      	beq.n	8002d8a <HAL_GPIO_Init+0x23e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a56      	ldr	r2, [pc, #344]	; (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_GPIO_Init+0x23a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a55      	ldr	r2, [pc, #340]	; (8002e7c <HAL_GPIO_Init+0x330>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <HAL_GPIO_Init+0x236>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a54      	ldr	r2, [pc, #336]	; (8002e80 <HAL_GPIO_Init+0x334>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x232>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a53      	ldr	r2, [pc, #332]	; (8002e84 <HAL_GPIO_Init+0x338>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x22e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_GPIO_Init+0x33c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x22a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_GPIO_Init+0x340>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_GPIO_Init+0x344>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x348>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	; (8002e98 <HAL_GPIO_Init+0x34c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d62:	2309      	movs	r3, #9
 8002d64:	e012      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d66:	230a      	movs	r3, #10
 8002d68:	e010      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d6e:	2307      	movs	r3, #7
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x240>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9c:	4934      	ldr	r1, [pc, #208]	; (8002e70 <HAL_GPIO_Init+0x324>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002daa:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dce:	4a33      	ldr	r2, [pc, #204]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df8:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfe:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e22:	4a1e      	ldr	r2, [pc, #120]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e4c:	4a13      	ldr	r2, [pc, #76]	; (8002e9c <HAL_GPIO_Init+0x350>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae84 	bls.w	8002b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	3724      	adds	r7, #36	; 0x24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40021400 	.word	0x40021400
 8002e8c:	40021800 	.word	0x40021800
 8002e90:	40021c00 	.word	0x40021c00
 8002e94:	40022000 	.word	0x40022000
 8002e98:	40022400 	.word	0x40022400
 8002e9c:	40013c00 	.word	0x40013c00

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0c8      	b.n	800304c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f002 f9f6 	bl	80052c0 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2224      	movs	r2, #36	; 0x24
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eec:	f001 f8c2 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4a57      	ldr	r2, [pc, #348]	; (8003054 <HAL_I2C_Init+0x1b4>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4952      	ldr	r1, [pc, #328]	; (8003058 <HAL_I2C_Init+0x1b8>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d802      	bhi.n	8002f1a <HAL_I2C_Init+0x7a>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	e009      	b.n	8002f2e <HAL_I2C_Init+0x8e>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <HAL_I2C_Init+0x1bc>)
 8002f26:	fba1 1303 	umull	r1, r3, r1, r3
 8002f2a:	099b      	lsrs	r3, r3, #6
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_I2C_Init+0x1b8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d812      	bhi.n	8002f64 <HAL_I2C_Init+0xc4>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d906      	bls.n	8002f60 <HAL_I2C_Init+0xc0>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	e045      	b.n	8002fec <HAL_I2C_Init+0x14c>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e043      	b.n	8002fec <HAL_I2C_Init+0x14c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10f      	bne.n	8002f8c <HAL_I2C_Init+0xec>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e010      	b.n	8002fae <HAL_I2C_Init+0x10e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Init+0x116>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e01a      	b.n	8002fec <HAL_I2C_Init+0x14c>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_I2C_Init+0x134>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd2:	e00b      	b.n	8002fec <HAL_I2C_Init+0x14c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fec:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	69d1      	ldr	r1, [r2, #28]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6a12      	ldr	r2, [r2, #32]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6911      	ldr	r1, [r2, #16]
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6951      	ldr	r1, [r2, #20]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6992      	ldr	r2, [r2, #24]
 800301a:	430a      	orrs	r2, r1
 800301c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	431bde83 	.word	0x431bde83
 8003058:	000186a0 	.word	0x000186a0
 800305c:	10624dd3 	.word	0x10624dd3

08003060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	460b      	mov	r3, r1
 800306e:	817b      	strh	r3, [r7, #10]
 8003070:	4613      	mov	r3, r2
 8003072:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003078:	f7fd fb00 	bl	800067c <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	f040 80ee 	bne.w	8003268 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2319      	movs	r3, #25
 8003092:	2201      	movs	r2, #1
 8003094:	4977      	ldr	r1, [pc, #476]	; (8003274 <HAL_I2C_Master_Transmit+0x214>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f972 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0e1      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x54>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0da      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d007      	beq.n	80030da <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	; 0x21
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2210      	movs	r2, #16
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	893a      	ldrh	r2, [r7, #8]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a5a      	ldr	r2, [pc, #360]	; (8003278 <HAL_I2C_Master_Transmit+0x218>)
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f8aa 	bl	800327c <I2C_MasterRequestWrite>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00f      	beq.n	800314e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d105      	bne.n	8003142 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e093      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e08d      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8003164:	e066      	b.n	8003234 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	6a39      	ldr	r1, [r7, #32]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f9c7 	bl	80034fe <I2C_WaitOnTXEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00f      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b04      	cmp	r3, #4
 800317c:	d109      	bne.n	8003192 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e06b      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e069      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	1c58      	adds	r0, r3, #1
 80031a0:	68f9      	ldr	r1, [r7, #12]
 80031a2:	6248      	str	r0, [r1, #36]	; 0x24
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d119      	bne.n	8003204 <HAL_I2C_Master_Transmit+0x1a4>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c58      	adds	r0, r3, #1
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	6248      	str	r0, [r1, #36]	; 0x24
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	6a39      	ldr	r1, [r7, #32]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9b5 	bl	8003578 <I2C_WaitOnBTFFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00f      	beq.n	8003234 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	2b04      	cmp	r3, #4
 800321a:	d109      	bne.n	8003230 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	6812      	ldr	r2, [r2, #0]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e01c      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e01a      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	d194      	bne.n	8003166 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	00100002 	.word	0x00100002
 8003278:	ffff0000 	.word	0xffff0000

0800327c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	460b      	mov	r3, r1
 800328a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b04      	cmp	r3, #4
 8003296:	d006      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2a>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d003      	beq.n	80032a6 <I2C_MasterRequestWrite+0x2a>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032a4:	d108      	bne.n	80032b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e00b      	b.n	80032d0 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	2b12      	cmp	r3, #18
 80032be:	d107      	bne.n	80032d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f84f 	bl	8003380 <I2C_WaitOnFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e040      	b.n	800336e <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f4:	d107      	bne.n	8003306 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	897a      	ldrh	r2, [r7, #10]
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	e021      	b.n	800334a <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	897a      	ldrh	r2, [r7, #10]
 800330c:	11d2      	asrs	r2, r2, #7
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f002 0206 	and.w	r2, r2, #6
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f062 020f 	orn	r2, r2, #15
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4915      	ldr	r1, [pc, #84]	; (8003378 <I2C_MasterRequestWrite+0xfc>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f87c 	bl	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b04      	cmp	r3, #4
 8003336:	d101      	bne.n	800333c <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e018      	b.n	800336e <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e016      	b.n	800336e <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	897a      	ldrh	r2, [r7, #10]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	490b      	ldr	r1, [pc, #44]	; (800337c <I2C_MasterRequestWrite+0x100>)
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f866 	bl	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b04      	cmp	r3, #4
 8003362:	d101      	bne.n	8003368 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e002      	b.n	800336e <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e000      	b.n	800336e <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	00010008 	.word	0x00010008
 800337c:	00010002 	.word	0x00010002

08003380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	4613      	mov	r3, r2
 800338e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8003390:	e01f      	b.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d01b      	beq.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033a0:	f7fd f96c 	bl	800067c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	1ad2      	subs	r2, r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d910      	bls.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e023      	b.n	800341a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d10d      	bne.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x78>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4013      	ands	r3, r2
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf0c      	ite	eq
 80033ee:	2301      	moveq	r3, #1
 80033f0:	2300      	movne	r3, #0
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	461a      	mov	r2, r3
 80033f6:	e00c      	b.n	8003412 <I2C_WaitOnFlagUntilTimeout+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d0bc      	beq.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003430:	e040      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003440:	d11c      	bne.n	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800345a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2204      	movs	r2, #4
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e03c      	b.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003482:	d017      	beq.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d007      	beq.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800348a:	f7fd f8f7 	bl	800067c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	1ad2      	subs	r2, r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d90c      	bls.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e020      	b.n	80034f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0c1b      	lsrs	r3, r3, #16
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10c      	bne.n	80034d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4013      	ands	r3, r2
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e00b      	b.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4013      	ands	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d19e      	bne.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350a:	e029      	b.n	8003560 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f870 	bl	80035f2 <I2C_IsAcknowledgeFailed>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e029      	b.n	8003570 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d01d      	beq.n	8003560 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800352a:	f7fd f8a7 	bl	800067c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	1ad2      	subs	r2, r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d912      	bls.n	8003560 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0220 	orr.w	r2, r3, #32
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e007      	b.n	8003570 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b80      	cmp	r3, #128	; 0x80
 800356c:	d1ce      	bne.n	800350c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	e029      	b.n	80035da <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f833 	bl	80035f2 <I2C_IsAcknowledgeFailed>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e029      	b.n	80035ea <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d01d      	beq.n	80035da <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a4:	f7fd f86a 	bl	800067c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d912      	bls.n	80035da <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e007      	b.n	80035ea <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d1ce      	bne.n	8003586 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003608:	d114      	bne.n	8003634 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003612:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2204      	movs	r2, #4
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b20      	cmp	r3, #32
 8003656:	d129      	bne.n	80036ac <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367a:	f022 0210 	bic.w	r2, r2, #16
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	6812      	ldr	r2, [r2, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b085      	sub	sp, #20
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d12a      	bne.n	800372a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80036f4:	89fb      	ldrh	r3, [r7, #14]
 80036f6:	f023 030f 	bic.w	r3, r3, #15
 80036fa:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	4313      	orrs	r3, r2
 8003704:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	89fa      	ldrh	r2, [r7, #14]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 800372a:	2302      	movs	r3, #2
  }
}  
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <HAL_PWREx_EnableOverDrive+0x94>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003764:	f7fc ff8a 	bl	800067c <HAL_GetTick>
 8003768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800376a:	e009      	b.n	8003780 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800376c:	f7fc ff86 	bl	800067c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377a:	d901      	bls.n	8003780 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e01f      	b.n	80037c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d1ee      	bne.n	800376c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003794:	f7fc ff72 	bl	800067c <HAL_GetTick>
 8003798:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800379a:	e009      	b.n	80037b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800379c:	f7fc ff6e 	bl	800067c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037aa:	d901      	bls.n	80037b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e007      	b.n	80037c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037b0:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037bc:	d1ee      	bne.n	800379c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	420e0040 	.word	0x420e0040
 80037d0:	40007000 	.word	0x40007000
 80037d4:	420e0044 	.word	0x420e0044

080037d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e22d      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d075      	beq.n	80038e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037f6:	4ba3      	ldr	r3, [pc, #652]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d00c      	beq.n	800381c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003802:	4ba0      	ldr	r3, [pc, #640]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d112      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4b9d      	ldr	r3, [pc, #628]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381a:	d10b      	bne.n	8003834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	4b99      	ldr	r3, [pc, #612]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d05b      	beq.n	80038e0 <HAL_RCC_OscConfig+0x108>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d157      	bne.n	80038e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e208      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d106      	bne.n	800384c <HAL_RCC_OscConfig+0x74>
 800383e:	4a91      	ldr	r2, [pc, #580]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	4b90      	ldr	r3, [pc, #576]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0x98>
 8003856:	4a8b      	ldr	r2, [pc, #556]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	4b8a      	ldr	r3, [pc, #552]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4a88      	ldr	r2, [pc, #544]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xb0>
 8003870:	4a84      	ldr	r2, [pc, #528]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003872:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4a81      	ldr	r2, [pc, #516]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 800387e:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fc fef4 	bl	800067c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7fc fef0 	bl	800067c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1cd      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xc0>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b8:	f7fc fee0 	bl	800067c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fc fedc 	bl	800067c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1b9      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0xe8>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d063      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b62      	ldr	r3, [pc, #392]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e18d      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4956      	ldr	r1, [pc, #344]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 800392c:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e03a      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <HAL_RCC_OscConfig+0x2b0>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394e:	f7fc fe95 	bl	800067c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7fc fe91 	bl	800067c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e16e      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003968:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4943      	ldr	r1, [pc, #268]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	4b43      	ldr	r3, [pc, #268]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4313      	orrs	r3, r2
 8003986:	600b      	str	r3, [r1, #0]
 8003988:	e015      	b.n	80039b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800398a:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_RCC_OscConfig+0x2b0>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7fc fe74 	bl	800067c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003998:	f7fc fe70 	bl	800067c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e14d      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d030      	beq.n	8003a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d016      	beq.n	80039f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <HAL_RCC_OscConfig+0x2b4>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fc fe54 	bl	800067c <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d8:	f7fc fe50 	bl	800067c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e12d      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x200>
 80039f6:	e015      	b.n	8003a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x2b4>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fc fe3d 	bl	800067c <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a06:	f7fc fe39 	bl	800067c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e116      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f0      	bne.n	8003a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a0 	beq.w	8003b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2300      	movs	r3, #0
 8003a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10f      	bne.n	8003a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a50:	6413      	str	r3, [r2, #64]	; 0x40
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x2b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d121      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_RCC_OscConfig+0x2b8>)
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <HAL_RCC_OscConfig+0x2b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fc fdff 	bl	800067c <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	e011      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2ce>
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	42470000 	.word	0x42470000
 8003a8c:	42470e80 	.word	0x42470e80
 8003a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a94:	f7fc fdf2 	bl	800067c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0cf      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	; (8003c50 <HAL_RCC_OscConfig+0x478>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x2f0>
 8003aba:	4a66      	ldr	r2, [pc, #408]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003abc:	4b65      	ldr	r3, [pc, #404]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	e01c      	b.n	8003b02 <HAL_RCC_OscConfig+0x32a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d10c      	bne.n	8003aea <HAL_RCC_OscConfig+0x312>
 8003ad0:	4a60      	ldr	r2, [pc, #384]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003ad2:	4b60      	ldr	r3, [pc, #384]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	6713      	str	r3, [r2, #112]	; 0x70
 8003adc:	4a5d      	ldr	r2, [pc, #372]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003ade:	4b5d      	ldr	r3, [pc, #372]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCC_OscConfig+0x32a>
 8003aea:	4a5a      	ldr	r2, [pc, #360]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003aec:	4b59      	ldr	r3, [pc, #356]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70
 8003af6:	4a57      	ldr	r2, [pc, #348]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003af8:	4b56      	ldr	r3, [pc, #344]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d015      	beq.n	8003b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fc fdb7 	bl	800067c <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7fc fdb3 	bl	800067c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e08e      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ee      	beq.n	8003b12 <HAL_RCC_OscConfig+0x33a>
 8003b34:	e014      	b.n	8003b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7fc fda1 	bl	800067c <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fc fd9d 	bl	800067c <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e078      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b54:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ee      	bne.n	8003b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003b68:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d064      	beq.n	8003c44 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7a:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d05c      	beq.n	8003c40 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d141      	bne.n	8003c12 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8e:	4b32      	ldr	r3, [pc, #200]	; (8003c58 <HAL_RCC_OscConfig+0x480>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fc fd72 	bl	800067c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fc fd6e 	bl	800067c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e04b      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bba:	4926      	ldr	r1, [pc, #152]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	019b      	lsls	r3, r3, #6
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	061b      	lsls	r3, r3, #24
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003be4:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <HAL_RCC_OscConfig+0x480>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bea:	f7fc fd47 	bl	800067c <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf2:	f7fc fd43 	bl	800067c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e020      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x41a>
 8003c10:	e018      	b.n	8003c44 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c12:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <HAL_RCC_OscConfig+0x480>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fc fd30 	bl	800067c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fc fd2c 	bl	800067c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e009      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_RCC_OscConfig+0x47c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x448>
 8003c3e:	e001      	b.n	8003c44 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40007000 	.word	0x40007000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	42470060 	.word	0x42470060

08003c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0ca      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b67      	ldr	r3, [pc, #412]	; (8003e10 <HAL_RCC_ClockConfig+0x1b4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 020f 	and.w	r2, r3, #15
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d20c      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b64      	ldr	r3, [pc, #400]	; (8003e10 <HAL_RCC_ClockConfig+0x1b4>)
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b62      	ldr	r3, [pc, #392]	; (8003e10 <HAL_RCC_ClockConfig+0x1b4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b6      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4a58      	ldr	r2, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	4b58      	ldr	r3, [pc, #352]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4a52      	ldr	r2, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003cca:	4b52      	ldr	r3, [pc, #328]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	494f      	ldr	r1, [pc, #316]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d044      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d119      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07d      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e06d      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e065      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4936      	ldr	r1, [pc, #216]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f023 0203 	bic.w	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fc fc96 	bl	800067c <HAL_GetTick>
 8003d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fc fc92 	bl	800067c <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e04d      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_ClockConfig+0x1b4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 020f 	and.w	r2, r3, #15
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d90c      	bls.n	8003da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCC_ClockConfig+0x1b4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e030      	b.n	8003e06 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4918      	ldr	r1, [pc, #96]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dce:	4911      	ldr	r1, [pc, #68]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f885 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003de6:	4601      	mov	r1, r0
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_ClockConfig+0x1b8>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
 8003df6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dfa:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7fc fbf8 	bl	80005f4 <HAL_InitTick>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023c00 	.word	0x40023c00
 8003e14:	40023800 	.word	0x40023800
 8003e18:	080069d0 	.word	0x080069d0
 8003e1c:	20000008 	.word	0x20000008

08003e20 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d129      	bne.n	8003e86 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e38:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003e60:	2300      	movs	r3, #0
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003e64:	f107 031c 	add.w	r3, r7, #28
 8003e68:	4619      	mov	r1, r3
 8003e6a:	481f      	ldr	r0, [pc, #124]	; (8003ee8 <HAL_RCC_MCOConfig+0xc8>)
 8003e6c:	f7fe fe6e 	bl	8002b4c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003e70:	481c      	ldr	r0, [pc, #112]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003e84:	e029      	b.n	8003eda <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e8c:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f043 0304 	orr.w	r3, r3, #4
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	480b      	ldr	r0, [pc, #44]	; (8003eec <HAL_RCC_MCOConfig+0xcc>)
 8003ec0:	f7fe fe44 	bl	8002b4c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003ec4:	4807      	ldr	r0, [pc, #28]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003ec6:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCC_MCOConfig+0xc4>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	00d9      	lsls	r1, r3, #3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	6083      	str	r3, [r0, #8]
}
 8003eda:	bf00      	nop
 8003edc:	3730      	adds	r7, #48	; 0x30
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020000 	.word	0x40020000
 8003eec:	40020800 	.word	0x40020800

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b087      	sub	sp, #28
 8003ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ef8:	2200      	movs	r2, #0
 8003efa:	60fa      	str	r2, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	617a      	str	r2, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8003f04:	2200      	movs	r2, #0
 8003f06:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f08:	4a51      	ldr	r2, [pc, #324]	; (8004050 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f0a:	6892      	ldr	r2, [r2, #8]
 8003f0c:	f002 020c 	and.w	r2, r2, #12
 8003f10:	2a04      	cmp	r2, #4
 8003f12:	d007      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x34>
 8003f14:	2a08      	cmp	r2, #8
 8003f16:	d008      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f18:	2a00      	cmp	r2, #0
 8003f1a:	f040 8090 	bne.w	800403e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f1e:	4b4d      	ldr	r3, [pc, #308]	; (8004054 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f20:	613b      	str	r3, [r7, #16]
       break;
 8003f22:	e08f      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f24:	4b4c      	ldr	r3, [pc, #304]	; (8004058 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f26:	613b      	str	r3, [r7, #16]
      break;
 8003f28:	e08c      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2a:	4a49      	ldr	r2, [pc, #292]	; (8004050 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f2c:	6852      	ldr	r2, [r2, #4]
 8003f2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f32:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f34:	4a46      	ldr	r2, [pc, #280]	; (8004050 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f36:	6852      	ldr	r2, [r2, #4]
 8003f38:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003f3c:	2a00      	cmp	r2, #0
 8003f3e:	d023      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	ea03 0301 	and.w	r3, r3, r1
 8003f56:	ea04 0402 	and.w	r4, r4, r2
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f5c:	fb02 f104 	mul.w	r1, r2, r4
 8003f60:	2200      	movs	r2, #0
 8003f62:	fb02 f203 	mul.w	r2, r2, r3
 8003f66:	440a      	add	r2, r1
 8003f68:	493b      	ldr	r1, [pc, #236]	; (8004058 <HAL_RCC_GetSysClockFreq+0x168>)
 8003f6a:	fba3 0101 	umull	r0, r1, r3, r1
 8003f6e:	1853      	adds	r3, r2, r1
 8003f70:	4619      	mov	r1, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f04f 0400 	mov.w	r4, #0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	f7fc f990 	bl	80002a0 <__aeabi_uldivmod>
 8003f80:	4603      	mov	r3, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e04c      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f88:	4a31      	ldr	r2, [pc, #196]	; (8004050 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f8a:	6852      	ldr	r2, [r2, #4]
 8003f8c:	0992      	lsrs	r2, r2, #6
 8003f8e:	4611      	mov	r1, r2
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f240 15ff 	movw	r5, #511	; 0x1ff
 8003f98:	f04f 0600 	mov.w	r6, #0
 8003f9c:	ea05 0501 	and.w	r5, r5, r1
 8003fa0:	ea06 0602 	and.w	r6, r6, r2
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8003fac:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8003fb0:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	465a      	mov	r2, fp
 8003fb8:	46aa      	mov	sl, r5
 8003fba:	46b3      	mov	fp, r6
 8003fbc:	4655      	mov	r5, sl
 8003fbe:	465e      	mov	r6, fp
 8003fc0:	1b4d      	subs	r5, r1, r5
 8003fc2:	eb62 0606 	sbc.w	r6, r2, r6
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4632      	mov	r2, r6
 8003fca:	0194      	lsls	r4, r2, #6
 8003fcc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003fd0:	018b      	lsls	r3, r1, #6
 8003fd2:	1a5b      	subs	r3, r3, r1
 8003fd4:	eb64 0402 	sbc.w	r4, r4, r2
 8003fd8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8003fdc:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8003fe0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	464c      	mov	r4, r9
 8003fe8:	4655      	mov	r5, sl
 8003fea:	465e      	mov	r6, fp
 8003fec:	18ed      	adds	r5, r5, r3
 8003fee:	eb46 0604 	adc.w	r6, r6, r4
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	4634      	mov	r4, r6
 8003ff6:	02a2      	lsls	r2, r4, #10
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	e897 0018 	ldmia.w	r7, {r3, r4}
 800400a:	4618      	mov	r0, r3
 800400c:	4621      	mov	r1, r4
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 0400 	mov.w	r4, #0
 8004014:	461a      	mov	r2, r3
 8004016:	4623      	mov	r3, r4
 8004018:	f7fc f942 	bl	80002a0 <__aeabi_uldivmod>
 800401c:	4603      	mov	r3, r0
 800401e:	460c      	mov	r4, r1
 8004020:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_GetSysClockFreq+0x160>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	0c1b      	lsrs	r3, r3, #16
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	3301      	adds	r3, #1
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	fbb2 f3f3 	udiv	r3, r2, r3
 800403a:	613b      	str	r3, [r7, #16]
      break;
 800403c:	e002      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800403e:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetSysClockFreq+0x164>)
 8004040:	613b      	str	r3, [r7, #16]
      break;
 8004042:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004044:	693b      	ldr	r3, [r7, #16]
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	017d7840 	.word	0x017d7840

0800405c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_GetHCLKFreq+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000008 	.word	0x20000008

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004078:	f7ff fff0 	bl	800405c <HAL_RCC_GetHCLKFreq>
 800407c:	4601      	mov	r1, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0a9b      	lsrs	r3, r3, #10
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4a03      	ldr	r2, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	080069e0 	.word	0x080069e0

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040a0:	f7ff ffdc 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0b5b      	lsrs	r3, r3, #13
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4a03      	ldr	r2, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b2:	5cd3      	ldrb	r3, [r2, r3]
 80040b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	080069e0 	.word	0x080069e0

080040c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e025      	b.n	8004124 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 fa6b 	bl	80055c8 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fbbf 	bl	8004888 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	461a      	mov	r2, r3
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	f000 fc2a 	bl	800496e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e055      	b.n	80041ea <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 f8f9 	bl	8005350 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004174:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6851      	ldr	r1, [r2, #4]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	4311      	orrs	r1, r2
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	68d2      	ldr	r2, [r2, #12]
 8004188:	4311      	orrs	r1, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6912      	ldr	r2, [r2, #16]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6952      	ldr	r2, [r2, #20]
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6992      	ldr	r2, [r2, #24]
 800419a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	69d2      	ldr	r2, [r2, #28]
 80041a4:	4311      	orrs	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6a12      	ldr	r2, [r2, #32]
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6992      	ldr	r2, [r2, #24]
 80041bc:	0c12      	lsrs	r2, r2, #16
 80041be:	f002 0104 	and.w	r1, r2, #4
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6812      	ldr	r2, [r2, #0]
 80041d2:	69d2      	ldr	r2, [r2, #28]
 80041d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d8:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e03f      	b.n	8004284 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 f901 	bl	8005420 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2224      	movs	r2, #36	; 0x24
 8004222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	68d2      	ldr	r2, [r2, #12]
 8004230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004234:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f90a 	bl	8004450 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	6912      	ldr	r2, [r2, #16]
 8004246:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	6952      	ldr	r2, [r2, #20]
 8004256:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	68d2      	ldr	r2, [r2, #12]
 8004266:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800426a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	f040 8082 	bne.w	80043b2 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d002      	beq.n	80042ba <HAL_UART_Transmit+0x2e>
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e07a      	b.n	80043b4 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_UART_Transmit+0x40>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e073      	b.n	80043b4 <HAL_UART_Transmit+0x128>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2221      	movs	r2, #33	; 0x21
 80042de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042e2:	f7fc f9cb 	bl	800067c <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	88fa      	ldrh	r2, [r7, #6]
 80042ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	88fa      	ldrh	r2, [r7, #6]
 80042f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80042f4:	e041      	b.n	800437a <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d121      	bne.n	8004352 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	; 0x80
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f84f 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e045      	b.n	80043b4 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	8812      	ldrh	r2, [r2, #0]
 8004334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004338:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3302      	adds	r3, #2
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	e017      	b.n	800437a <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3301      	adds	r3, #1
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	e013      	b.n	800437a <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	2180      	movs	r1, #128	; 0x80
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f82d 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e023      	b.n	80043b4 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1c59      	adds	r1, r3, #1
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1b8      	bne.n	80042f6 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2200      	movs	r2, #0
 800438c:	2140      	movs	r1, #64	; 0x40
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f814 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e00a      	b.n	80043b4 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80043cc:	e02c      	b.n	8004428 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d028      	beq.n	8004428 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <UART_WaitOnFlagUntilTimeout+0x30>
 80043dc:	f7fc f94e 	bl	800067c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	1ad2      	subs	r2, r2, r3
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d91d      	bls.n	8004428 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	68d2      	ldr	r2, [r2, #12]
 80043f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	6812      	ldr	r2, [r2, #0]
 8004404:	6952      	ldr	r2, [r2, #20]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e00f      	b.n	8004448 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	401a      	ands	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	429a      	cmp	r2, r3
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	429a      	cmp	r2, r3
 8004444:	d0c3      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800446a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800448c:	f023 030c 	bic.w	r3, r3, #12
 8004490:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e0:	f040 80e4 	bne.w	80046ac <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4aab      	ldr	r2, [pc, #684]	; (8004798 <UART_SetConfig+0x348>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <UART_SetConfig+0xa8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4aaa      	ldr	r2, [pc, #680]	; (800479c <UART_SetConfig+0x34c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d16c      	bne.n	80045d2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681c      	ldr	r4, [r3, #0]
 80044fc:	f7ff fdce 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004500:	4602      	mov	r2, r0
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009a      	lsls	r2, r3, #2
 800450a:	441a      	add	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	4aa2      	ldr	r2, [pc, #648]	; (80047a0 <UART_SetConfig+0x350>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	011d      	lsls	r5, r3, #4
 8004520:	f7ff fdbc 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004524:	4602      	mov	r2, r0
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	009a      	lsls	r2, r3, #2
 800452e:	441a      	add	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fbb2 f6f3 	udiv	r6, r2, r3
 800453a:	f7ff fdaf 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 800453e:	4602      	mov	r2, r0
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009a      	lsls	r2, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	4a92      	ldr	r2, [pc, #584]	; (80047a0 <UART_SetConfig+0x350>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2264      	movs	r2, #100	; 0x64
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	1af3      	subs	r3, r6, r3
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	3332      	adds	r3, #50	; 0x32
 8004568:	4a8d      	ldr	r2, [pc, #564]	; (80047a0 <UART_SetConfig+0x350>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004576:	441d      	add	r5, r3
 8004578:	f7ff fd90 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 800457c:	4602      	mov	r2, r0
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009a      	lsls	r2, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004592:	f7ff fd83 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004596:	4602      	mov	r2, r0
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009a      	lsls	r2, r3, #2
 80045a0:	441a      	add	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	4a7c      	ldr	r2, [pc, #496]	; (80047a0 <UART_SetConfig+0x350>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2264      	movs	r2, #100	; 0x64
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	1af3      	subs	r3, r6, r3
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	3332      	adds	r3, #50	; 0x32
 80045c0:	4a77      	ldr	r2, [pc, #476]	; (80047a0 <UART_SetConfig+0x350>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	442b      	add	r3, r5
 80045ce:	60a3      	str	r3, [r4, #8]
 80045d0:	e154      	b.n	800487c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681c      	ldr	r4, [r3, #0]
 80045d6:	f7ff fd4d 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80045da:	4602      	mov	r2, r0
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009a      	lsls	r2, r3, #2
 80045e4:	441a      	add	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	4a6b      	ldr	r2, [pc, #428]	; (80047a0 <UART_SetConfig+0x350>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	011d      	lsls	r5, r3, #4
 80045fa:	f7ff fd3b 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80045fe:	4602      	mov	r2, r0
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009a      	lsls	r2, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	fbb2 f6f3 	udiv	r6, r2, r3
 8004614:	f7ff fd2e 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004618:	4602      	mov	r2, r0
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009a      	lsls	r2, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	fbb2 f3f3 	udiv	r3, r2, r3
 800462e:	4a5c      	ldr	r2, [pc, #368]	; (80047a0 <UART_SetConfig+0x350>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	2264      	movs	r2, #100	; 0x64
 8004638:	fb02 f303 	mul.w	r3, r2, r3
 800463c:	1af3      	subs	r3, r6, r3
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	3332      	adds	r3, #50	; 0x32
 8004642:	4a57      	ldr	r2, [pc, #348]	; (80047a0 <UART_SetConfig+0x350>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004650:	441d      	add	r5, r3
 8004652:	f7ff fd0f 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004656:	4602      	mov	r2, r0
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009a      	lsls	r2, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fbb2 f6f3 	udiv	r6, r2, r3
 800466c:	f7ff fd02 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004670:	4602      	mov	r2, r0
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009a      	lsls	r2, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	4a46      	ldr	r2, [pc, #280]	; (80047a0 <UART_SetConfig+0x350>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	2264      	movs	r2, #100	; 0x64
 8004690:	fb02 f303 	mul.w	r3, r2, r3
 8004694:	1af3      	subs	r3, r6, r3
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	4a41      	ldr	r2, [pc, #260]	; (80047a0 <UART_SetConfig+0x350>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	442b      	add	r3, r5
 80046a8:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80046aa:	e0e7      	b.n	800487c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a39      	ldr	r2, [pc, #228]	; (8004798 <UART_SetConfig+0x348>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <UART_SetConfig+0x270>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a38      	ldr	r2, [pc, #224]	; (800479c <UART_SetConfig+0x34c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d171      	bne.n	80047a4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681c      	ldr	r4, [r3, #0]
 80046c4:	f7ff fcea 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009a      	lsls	r2, r3, #2
 80046d2:	441a      	add	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	fbb2 f3f3 	udiv	r3, r2, r3
 80046de:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <UART_SetConfig+0x350>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	011d      	lsls	r5, r3, #4
 80046e8:	f7ff fcd8 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009a      	lsls	r2, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8004702:	f7ff fccb 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004706:	4602      	mov	r2, r0
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <UART_SetConfig+0x350>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2264      	movs	r2, #100	; 0x64
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	1af3      	subs	r3, r6, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <UART_SetConfig+0x350>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	441d      	add	r5, r3
 800473e:	f7ff fcad 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 8004742:	4602      	mov	r2, r0
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fbb2 f6f3 	udiv	r6, r2, r3
 8004758:	f7ff fca0 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 800475c:	4602      	mov	r2, r0
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009a      	lsls	r2, r3, #2
 8004766:	441a      	add	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004772:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <UART_SetConfig+0x350>)
 8004774:	fba2 2303 	umull	r2, r3, r2, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2264      	movs	r2, #100	; 0x64
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	1af3      	subs	r3, r6, r3
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	; 0x32
 8004786:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <UART_SetConfig+0x350>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	442b      	add	r3, r5
 8004794:	60a3      	str	r3, [r4, #8]
 8004796:	e071      	b.n	800487c <UART_SetConfig+0x42c>
 8004798:	40011000 	.word	0x40011000
 800479c:	40011400 	.word	0x40011400
 80047a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	f7ff fc64 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009a      	lsls	r2, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	4a30      	ldr	r2, [pc, #192]	; (8004884 <UART_SetConfig+0x434>)
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	011d      	lsls	r5, r3, #4
 80047cc:	f7ff fc52 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	4613      	mov	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	009a      	lsls	r2, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80047e6:	f7ff fc45 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	009a      	lsls	r2, r3, #2
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	4a20      	ldr	r2, [pc, #128]	; (8004884 <UART_SetConfig+0x434>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2264      	movs	r2, #100	; 0x64
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	1af3      	subs	r3, r6, r3
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	3332      	adds	r3, #50	; 0x32
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <UART_SetConfig+0x434>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004820:	441d      	add	r5, r3
 8004822:	f7ff fc27 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004826:	4602      	mov	r2, r0
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f6f3 	udiv	r6, r2, r3
 800483c:	f7ff fc1a 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 8004840:	4602      	mov	r2, r0
 8004842:	4613      	mov	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	009a      	lsls	r2, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	4a0b      	ldr	r2, [pc, #44]	; (8004884 <UART_SetConfig+0x434>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	095b      	lsrs	r3, r3, #5
 800485e:	2264      	movs	r2, #100	; 0x64
 8004860:	fb02 f303 	mul.w	r3, r2, r3
 8004864:	1af3      	subs	r3, r6, r3
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	3332      	adds	r3, #50	; 0x32
 800486a:	4a06      	ldr	r2, [pc, #24]	; (8004884 <UART_SetConfig+0x434>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	442b      	add	r3, r5
 8004878:	60a3      	str	r3, [r4, #8]
}
 800487a:	e7ff      	b.n	800487c <UART_SetConfig+0x42c>
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	51eb851f 	.word	0x51eb851f

08004888 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d029      	beq.n	80048f6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80048ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048b2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048bc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80048c2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80048c8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80048ce:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80048d4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80048da:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80048e0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80048e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e034      	b.n	8004960 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004902:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800490c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004912:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800492a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004934:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800493a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004940:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004946:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800494c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800496e:	b480      	push	{r7}
 8004970:	b087      	sub	sp, #28
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d02e      	beq.n	80049e6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004994:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049a4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80049ae:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80049b8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	3b01      	subs	r3, #1
 80049c0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049c2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80049cc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80049d6:	4313      	orrs	r3, r2
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	e03b      	b.n	8004a5e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004a1c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a2c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004a36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004a40:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_DCMI_FrameEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	captured = 1;
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <HAL_DCMI_FrameEventCallback+0x1c>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
	HAL_DCMI_Stop(hdcmi);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fb ffd8 	bl	8000a30 <HAL_DCMI_Stop>
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	2000008c 	.word	0x2000008c

08004a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Hello, world!\n");
 8004a92:	4832      	ldr	r0, [pc, #200]	; (8004b5c <main+0xd0>)
 8004a94:	f000 ff92 	bl	80059bc <puts>
	memset(data, 0, sizeof(data)/sizeof(uint16_t));
 8004a98:	f44f 42c6 	mov.w	r2, #25344	; 0x6300
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4830      	ldr	r0, [pc, #192]	; (8004b60 <main+0xd4>)
 8004aa0:	f000 ff28 	bl	80058f4 <memset>
//	for (int i = 0; i < sizeof(data); i++){
//		data[i] = 0;
//	}
	int i = sizeof(data);
 8004aa4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004aa8:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aaa:	f7fb fd81 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aae:	f000 f863 	bl	8004b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ab2:	f000 fa07 	bl	8004ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ab6:	f000 f99d 	bl	8004df4 <MX_DMA_Init>
  MX_DCMI_Init();
 8004aba:	f000 f8d3 	bl	8004c64 <MX_DCMI_Init>
  MX_FMC_Init();
 8004abe:	f000 f9b9 	bl	8004e34 <MX_FMC_Init>
  MX_I2C1_Init();
 8004ac2:	f000 f8f7 	bl	8004cb4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004ac6:	f000 f935 	bl	8004d34 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004aca:	f000 f969 	bl	8004da0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OV7670_init(&hi2c1);
 8004ace:	4825      	ldr	r0, [pc, #148]	; (8004b64 <main+0xd8>)
 8004ad0:	f000 fa86 	bl	8004fe0 <OV7670_init>
  HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t) &data, sizeof(data)/4);
 8004ad4:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <main+0xd4>)
 8004ad6:	f44f 5346 	mov.w	r3, #12672	; 0x3180
 8004ada:	2100      	movs	r1, #0
 8004adc:	4822      	ldr	r0, [pc, #136]	; (8004b68 <main+0xdc>)
 8004ade:	f7fb ff07 	bl	80008f0 <HAL_DCMI_Start_DMA>

	while(!captured);
 8004ae2:	bf00      	nop
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <main+0xe0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0fb      	beq.n	8004ae4 <main+0x58>
	uint8_t buffer[10];
	memset(buffer, 0, 10);
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	220a      	movs	r2, #10
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fefe 	bl	80058f4 <memset>
	for (int i = 0; i < 176 * 144; i++){
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e029      	b.n	8004b52 <main+0xc6>
		sprintf(buffer, "%d\r\n", data[i]);
 8004afe:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <main+0xd4>)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b06:	461a      	mov	r2, r3
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	4919      	ldr	r1, [pc, #100]	; (8004b70 <main+0xe4>)
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 ff5d 	bl	80059cc <siprintf>
		int k = strlen(buffer);
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fb6b 	bl	80001f0 <strlen>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	613b      	str	r3, [r7, #16]
		for(int j=0;j<strlen(buffer);j++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e00b      	b.n	8004b3c <main+0xb0>
		{
			HAL_UART_Transmit(&huart1, &buffer[j], 1, 1000);
 8004b24:	1d3a      	adds	r2, r7, #4
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	18d1      	adds	r1, r2, r3
 8004b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4810      	ldr	r0, [pc, #64]	; (8004b74 <main+0xe8>)
 8004b32:	f7ff fbab 	bl	800428c <HAL_UART_Transmit>
		for(int j=0;j<strlen(buffer);j++)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fb fb56 	bl	80001f0 <strlen>
 8004b44:	4602      	mov	r2, r0
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d8eb      	bhi.n	8004b24 <main+0x98>
	for (int i = 0; i < 176 * 144; i++){
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8004b58:	dbd1      	blt.n	8004afe <main+0x72>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b5a:	e7fe      	b.n	8004b5a <main+0xce>
 8004b5c:	080068b8 	.word	0x080068b8
 8004b60:	200001d8 	.word	0x200001d8
 8004b64:	200000a4 	.word	0x200000a4
 8004b68:	20000158 	.word	0x20000158
 8004b6c:	2000008c 	.word	0x2000008c
 8004b70:	080068c8 	.word	0x080068c8
 8004b74:	20000198 	.word	0x20000198

08004b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b094      	sub	sp, #80	; 0x50
 8004b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b7e:	f107 0320 	add.w	r3, r7, #32
 8004b82:	2230      	movs	r2, #48	; 0x30
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 feb4 	bl	80058f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b8c:	f107 030c 	add.w	r3, r7, #12
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60bb      	str	r3, [r7, #8]
 8004ba0:	4a2e      	ldr	r2, [pc, #184]	; (8004c5c <SystemClock_Config+0xe4>)
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <SystemClock_Config+0xe4>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6413      	str	r3, [r2, #64]	; 0x40
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <SystemClock_Config+0xe4>)
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb8:	2300      	movs	r3, #0
 8004bba:	607b      	str	r3, [r7, #4]
 8004bbc:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <SystemClock_Config+0xe8>)
 8004bbe:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <SystemClock_Config+0xe8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b25      	ldr	r3, [pc, #148]	; (8004c60 <SystemClock_Config+0xe8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bdc:	2310      	movs	r3, #16
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004be0:	2302      	movs	r3, #2
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004be4:	2300      	movs	r3, #0
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004be8:	2308      	movs	r3, #8
 8004bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004bec:	23b4      	movs	r3, #180	; 0xb4
 8004bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bf8:	f107 0320 	add.w	r3, r7, #32
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fdeb 	bl	80037d8 <HAL_RCC_OscConfig>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004c08:	f000 f9e2 	bl	8004fd0 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004c0c:	f7fe fd94 	bl	8003738 <HAL_PWREx_EnableOverDrive>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004c16:	f000 f9db 	bl	8004fd0 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c1a:	230f      	movs	r3, #15
 8004c1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	2105      	movs	r1, #5
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff f80f 	bl	8003c5c <HAL_RCC_ClockConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8004c44:	f000 f9c4 	bl	8004fd0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7ff f8e7 	bl	8003e20 <HAL_RCC_MCOConfig>
}
 8004c52:	bf00      	nop
 8004c54:	3750      	adds	r7, #80	; 0x50
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	40007000 	.word	0x40007000

08004c64 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c6a:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <MX_DCMI_Init+0x4c>)
 8004c6c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c76:	2220      	movs	r2, #32
 8004c78:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8004c98:	4804      	ldr	r0, [pc, #16]	; (8004cac <MX_DCMI_Init+0x48>)
 8004c9a:	f7fc f86d 	bl	8000d78 <HAL_DCMI_Init>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8004ca4:	f000 f994 	bl	8004fd0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8004ca8:	bf00      	nop
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000158 	.word	0x20000158
 8004cb0:	50050000 	.word	0x50050000

08004cb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cba:	4a1c      	ldr	r2, [pc, #112]	; (8004d2c <MX_I2C1_Init+0x78>)
 8004cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <MX_I2C1_Init+0x7c>)
 8004cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cc4:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004cd0:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ce4:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cea:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cf0:	480d      	ldr	r0, [pc, #52]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004cf2:	f7fe f8d5 	bl	8002ea0 <HAL_I2C_Init>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004cfc:	f000 f968 	bl	8004fd0 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004d00:	2100      	movs	r1, #0
 8004d02:	4809      	ldr	r0, [pc, #36]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004d04:	f7fe fc9d 	bl	8003642 <HAL_I2CEx_ConfigAnalogFilter>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8004d0e:	f000 f95f 	bl	8004fd0 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004d12:	2100      	movs	r1, #0
 8004d14:	4804      	ldr	r0, [pc, #16]	; (8004d28 <MX_I2C1_Init+0x74>)
 8004d16:	f7fe fcd0 	bl	80036ba <HAL_I2CEx_ConfigDigitalFilter>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8004d20:	f000 f956 	bl	8004fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d24:	bf00      	nop
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200000a4 	.word	0x200000a4
 8004d2c:	40005400 	.word	0x40005400
 8004d30:	000186a0 	.word	0x000186a0

08004d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d38:	4b17      	ldr	r3, [pc, #92]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d3a:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <MX_SPI1_Init+0x68>)
 8004d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d3e:	4b16      	ldr	r3, [pc, #88]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d4c:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d80:	220a      	movs	r2, #10
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d84:	4804      	ldr	r0, [pc, #16]	; (8004d98 <MX_SPI1_Init+0x64>)
 8004d86:	f7ff f9d1 	bl	800412c <HAL_SPI_Init>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004d90:	f000 f91e 	bl	8004fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d94:	bf00      	nop
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	2000c7d8 	.word	0x2000c7d8
 8004d9c:	40013000 	.word	0x40013000

08004da0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004da6:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <MX_USART1_UART_Init+0x50>)
 8004da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004daa:	4b10      	ldr	r3, [pc, #64]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dc6:	220c      	movs	r2, #12
 8004dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dca:	4b08      	ldr	r3, [pc, #32]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dd6:	4805      	ldr	r0, [pc, #20]	; (8004dec <MX_USART1_UART_Init+0x4c>)
 8004dd8:	f7ff fa0b 	bl	80041f2 <HAL_UART_Init>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004de2:	f000 f8f5 	bl	8004fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000198 	.word	0x20000198
 8004df0:	40011000 	.word	0x40011000

08004df4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <MX_DMA_Init+0x3c>)
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <MX_DMA_Init+0x3c>)
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e08:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <MX_DMA_Init+0x3c>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2100      	movs	r1, #0
 8004e1a:	2039      	movs	r0, #57	; 0x39
 8004e1c:	f7fb fd31 	bl	8000882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004e20:	2039      	movs	r0, #57	; 0x39
 8004e22:	f7fb fd4a 	bl	80008ba <HAL_NVIC_EnableIRQ>

}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023800 	.word	0x40023800

08004e34 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e3c:	4a20      	ldr	r2, [pc, #128]	; (8004ec0 <MX_FMC_Init+0x8c>)
 8004e3e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e4e:	2204      	movs	r2, #4
 8004e50:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e54:	2210      	movs	r2, #16
 8004e56:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004e58:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8004e5e:	4b17      	ldr	r3, [pc, #92]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e60:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004e64:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8004e6c:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e72:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004e74:	4b11      	ldr	r3, [pc, #68]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8004e7a:	4b10      	ldr	r3, [pc, #64]	; (8004ebc <MX_FMC_Init+0x88>)
 8004e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8004e82:	2302      	movs	r3, #2
 8004e84:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8004e86:	2307      	movs	r3, #7
 8004e88:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8004e8e:	2307      	movs	r3, #7
 8004e90:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8004e92:	2303      	movs	r3, #3
 8004e94:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8004e96:	2302      	movs	r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004e9e:	1d3b      	adds	r3, r7, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4806      	ldr	r0, [pc, #24]	; (8004ebc <MX_FMC_Init+0x88>)
 8004ea4:	f7ff f90e 	bl	80040c4 <HAL_SDRAM_Init>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8004eae:	f000 f88f 	bl	8004fd0 <Error_Handler>
  }

}
 8004eb2:	bf00      	nop
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	2000c830 	.word	0x2000c830
 8004ec0:	a0000140 	.word	0xa0000140

08004ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eca:	f107 031c 	add.w	r3, r7, #28
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	609a      	str	r2, [r3, #8]
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	4a3a      	ldr	r2, [pc, #232]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004ee0:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	f043 0310 	orr.w	r3, r3, #16
 8004ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eea:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	4a33      	ldr	r2, [pc, #204]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004efc:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	f043 0320 	orr.w	r3, r3, #32
 8004f04:	6313      	str	r3, [r2, #48]	; 0x30
 8004f06:	4b30      	ldr	r3, [pc, #192]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	4a2c      	ldr	r2, [pc, #176]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f18:	4b2b      	ldr	r3, [pc, #172]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	f043 0304 	orr.w	r3, r3, #4
 8004f20:	6313      	str	r3, [r2, #48]	; 0x30
 8004f22:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f3e:	4b22      	ldr	r3, [pc, #136]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f58:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	607b      	str	r3, [r7, #4]
 8004f6a:	4a17      	ldr	r2, [pc, #92]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f6c:	4b16      	ldr	r3, [pc, #88]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	f043 0308 	orr.w	r3, r3, #8
 8004f74:	6313      	str	r3, [r2, #48]	; 0x30
 8004f76:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	6313      	str	r3, [r2, #48]	; 0x30
 8004f92:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <MX_GPIO_Init+0x104>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb4:	f107 031c 	add.w	r3, r7, #28
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4804      	ldr	r0, [pc, #16]	; (8004fcc <MX_GPIO_Init+0x108>)
 8004fbc:	f7fd fdc6 	bl	8002b4c <HAL_GPIO_Init>

}
 8004fc0:	bf00      	nop
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020000 	.word	0x40020000

08004fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
	...

08004fe0 <OV7670_init>:
		{ 0xb1, 0x0c }, //
		{ 0xb2, 0x0e }, //
		{ 0xb3, 0x82 }, //
		{ 0x4b, 0x01 }, };

void OV7670_init(I2C_HandleTypeDef* p_hi2c1){
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
	// reset to default values first
	uint8_t data[2];
	data[0] = OV7670_reg[0][0];
 8004fe8:	2312      	movs	r3, #18
 8004fea:	743b      	strb	r3, [r7, #16]
	data[1] = OV7670_reg[0][1];
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(p_hi2c1, DevAddress<<1, &data, 2, 1000);
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	; (800505c <OV7670_init+0x7c>)
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	f107 0210 	add.w	r2, r7, #16
 8004ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2302      	movs	r3, #2
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7fe f82b 	bl	8003060 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800500a:	2002      	movs	r0, #2
 800500c:	f7fb fb42 	bl	8000694 <HAL_Delay>

	// write all the settings to OV7670
	for (int i = 1; i < OV7670_REG_NUM; i++){
 8005010:	2301      	movs	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e01a      	b.n	800504c <OV7670_init+0x6c>
		uint8_t data[2];
		data[0] = OV7670_reg[i][0];
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <OV7670_init+0x80>)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800501e:	733b      	strb	r3, [r7, #12]
		data[1] = OV7670_reg[i][1];
 8005020:	4a0f      	ldr	r2, [pc, #60]	; (8005060 <OV7670_init+0x80>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	4413      	add	r3, r2
 8005028:	785b      	ldrb	r3, [r3, #1]
 800502a:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(p_hi2c1, DevAddress<<1, &data, 2, 1000);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <OV7670_init+0x7c>)
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	b299      	uxth	r1, r3
 8005034:	f107 020c 	add.w	r2, r7, #12
 8005038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2302      	movs	r3, #2
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fe f80d 	bl	8003060 <HAL_I2C_Master_Transmit>
	for (int i = 1; i < OV7670_REG_NUM; i++){
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	3301      	adds	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b7a      	cmp	r3, #122	; 0x7a
 8005050:	dde1      	ble.n	8005016 <OV7670_init+0x36>
	}
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000006 	.word	0x20000006
 8005060:	080068d8 	.word	0x080068d8

08005064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
 800506e:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <HAL_MspInit+0x4c>)
 8005070:	4b0f      	ldr	r3, [pc, #60]	; (80050b0 <HAL_MspInit+0x4c>)
 8005072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005078:	6453      	str	r3, [r2, #68]	; 0x44
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <HAL_MspInit+0x4c>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <HAL_MspInit+0x4c>)
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_MspInit+0x4c>)
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6413      	str	r3, [r2, #64]	; 0x40
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_MspInit+0x4c>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800

080050b4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	; 0x38
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	60da      	str	r2, [r3, #12]
 80050ca:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a72      	ldr	r2, [pc, #456]	; (800529c <HAL_DCMI_MspInit+0x1e8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	f040 80de 	bne.w	8005294 <HAL_DCMI_MspInit+0x1e0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	4a70      	ldr	r2, [pc, #448]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 80050de:	4b70      	ldr	r3, [pc, #448]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	6353      	str	r3, [r2, #52]	; 0x34
 80050e8:	4b6d      	ldr	r3, [pc, #436]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 80050ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050f4:	2300      	movs	r3, #0
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	4a69      	ldr	r2, [pc, #420]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 80050fa:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	f043 0310 	orr.w	r3, r3, #16
 8005102:	6313      	str	r3, [r2, #48]	; 0x30
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	4a62      	ldr	r2, [pc, #392]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005116:	4b62      	ldr	r3, [pc, #392]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	6313      	str	r3, [r2, #48]	; 0x30
 8005120:	4b5f      	ldr	r3, [pc, #380]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	4a5b      	ldr	r2, [pc, #364]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005132:	4b5b      	ldr	r3, [pc, #364]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	6313      	str	r3, [r2, #48]	; 0x30
 800513c:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	4a54      	ldr	r2, [pc, #336]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 800514e:	4b54      	ldr	r3, [pc, #336]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f043 0308 	orr.w	r3, r3, #8
 8005156:	6313      	str	r3, [r2, #48]	; 0x30
 8005158:	4b51      	ldr	r3, [pc, #324]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	4a4d      	ldr	r2, [pc, #308]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 800516a:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005172:	6313      	str	r3, [r2, #48]	; 0x30
 8005174:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <HAL_DCMI_MspInit+0x1ec>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005180:	2370      	movs	r3, #112	; 0x70
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005184:	2302      	movs	r3, #2
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518c:	2300      	movs	r3, #0
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005190:	230d      	movs	r3, #13
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005198:	4619      	mov	r1, r3
 800519a:	4842      	ldr	r0, [pc, #264]	; (80052a4 <HAL_DCMI_MspInit+0x1f0>)
 800519c:	f7fd fcd6 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80051a0:	2350      	movs	r3, #80	; 0x50
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a4:	2302      	movs	r3, #2
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ac:	2300      	movs	r3, #0
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80051b0:	230d      	movs	r3, #13
 80051b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051b8:	4619      	mov	r1, r3
 80051ba:	483b      	ldr	r0, [pc, #236]	; (80052a8 <HAL_DCMI_MspInit+0x1f4>)
 80051bc:	f7fd fcc6 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80051c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c6:	2302      	movs	r3, #2
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ce:	2300      	movs	r3, #0
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80051d2:	230d      	movs	r3, #13
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051da:	4619      	mov	r1, r3
 80051dc:	4833      	ldr	r0, [pc, #204]	; (80052ac <HAL_DCMI_MspInit+0x1f8>)
 80051de:	f7fd fcb5 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80051e2:	2308      	movs	r3, #8
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e6:	2302      	movs	r3, #2
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ee:	2300      	movs	r3, #0
 80051f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80051f2:	230d      	movs	r3, #13
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051fa:	4619      	mov	r1, r3
 80051fc:	482c      	ldr	r0, [pc, #176]	; (80052b0 <HAL_DCMI_MspInit+0x1fc>)
 80051fe:	f7fd fca5 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005208:	2302      	movs	r3, #2
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005210:	2300      	movs	r3, #0
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8005214:	230d      	movs	r3, #13
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800521c:	4619      	mov	r1, r3
 800521e:	4825      	ldr	r0, [pc, #148]	; (80052b4 <HAL_DCMI_MspInit+0x200>)
 8005220:	f7fd fc94 	bl	8002b4c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005226:	4a25      	ldr	r2, [pc, #148]	; (80052bc <HAL_DCMI_MspInit+0x208>)
 8005228:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800522a:	4b23      	ldr	r3, [pc, #140]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 800522c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005230:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8005238:	4b1f      	ldr	r3, [pc, #124]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 800523a:	2200      	movs	r2, #0
 800523c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005244:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005246:	4b1c      	ldr	r3, [pc, #112]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800524c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005250:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005254:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005258:	2200      	movs	r2, #0
 800525a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800525c:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 800525e:	2200      	movs	r2, #0
 8005260:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005264:	2200      	movs	r2, #0
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8005268:	4813      	ldr	r0, [pc, #76]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 800526a:	f7fb fdeb 	bl	8000e44 <HAL_DMA_Init>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_DCMI_MspInit+0x1c4>
    {
      Error_Handler();
 8005274:	f7ff feac 	bl	8004fd0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <HAL_DCMI_MspInit+0x204>)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8005284:	2200      	movs	r2, #0
 8005286:	2100      	movs	r1, #0
 8005288:	204e      	movs	r0, #78	; 0x4e
 800528a:	f7fb fafa 	bl	8000882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800528e:	204e      	movs	r0, #78	; 0x4e
 8005290:	f7fb fb13 	bl	80008ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8005294:	bf00      	nop
 8005296:	3738      	adds	r7, #56	; 0x38
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	50050000 	.word	0x50050000
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40020000 	.word	0x40020000
 80052ac:	40020800 	.word	0x40020800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021800 	.word	0x40021800
 80052b8:	200000f8 	.word	0x200000f8
 80052bc:	40026428 	.word	0x40026428

080052c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	; 0x28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	605a      	str	r2, [r3, #4]
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	60da      	str	r2, [r3, #12]
 80052d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a19      	ldr	r2, [pc, #100]	; (8005344 <HAL_I2C_MspInit+0x84>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d12c      	bne.n	800533c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	4a18      	ldr	r2, [pc, #96]	; (8005348 <HAL_I2C_MspInit+0x88>)
 80052e8:	4b17      	ldr	r3, [pc, #92]	; (8005348 <HAL_I2C_MspInit+0x88>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f043 0302 	orr.w	r3, r3, #2
 80052f0:	6313      	str	r3, [r2, #48]	; 0x30
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <HAL_I2C_MspInit+0x88>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80052fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005304:	2312      	movs	r3, #18
 8005306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005308:	2301      	movs	r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530c:	2303      	movs	r3, #3
 800530e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005310:	2304      	movs	r3, #4
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	4619      	mov	r1, r3
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <HAL_I2C_MspInit+0x8c>)
 800531c:	f7fd fc16 	bl	8002b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	4a08      	ldr	r2, [pc, #32]	; (8005348 <HAL_I2C_MspInit+0x88>)
 8005326:	4b08      	ldr	r3, [pc, #32]	; (8005348 <HAL_I2C_MspInit+0x88>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800532e:	6413      	str	r3, [r2, #64]	; 0x40
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_I2C_MspInit+0x88>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800533c:	bf00      	nop
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40005400 	.word	0x40005400
 8005348:	40023800 	.word	0x40023800
 800534c:	40020400 	.word	0x40020400

08005350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 0314 	add.w	r3, r7, #20
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a28      	ldr	r2, [pc, #160]	; (8005410 <HAL_SPI_MspInit+0xc0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d149      	bne.n	8005406 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	4a27      	ldr	r2, [pc, #156]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005380:	6453      	str	r3, [r2, #68]	; 0x44
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	4a20      	ldr	r2, [pc, #128]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 8005394:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	6313      	str	r3, [r2, #48]	; 0x30
 800539e:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	4a19      	ldr	r2, [pc, #100]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 80053b0:	4b18      	ldr	r3, [pc, #96]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	f043 0302 	orr.w	r3, r3, #2
 80053b8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <HAL_SPI_MspInit+0xc4>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80053c6:	23a0      	movs	r3, #160	; 0xa0
 80053c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ca:	2302      	movs	r3, #2
 80053cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053d2:	2303      	movs	r3, #3
 80053d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053d6:	2305      	movs	r3, #5
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	4619      	mov	r1, r3
 80053e0:	480d      	ldr	r0, [pc, #52]	; (8005418 <HAL_SPI_MspInit+0xc8>)
 80053e2:	f7fd fbb3 	bl	8002b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80053e6:	2310      	movs	r3, #16
 80053e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	2302      	movs	r3, #2
 80053ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f2:	2303      	movs	r3, #3
 80053f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053f6:	2305      	movs	r3, #5
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053fa:	f107 0314 	add.w	r3, r7, #20
 80053fe:	4619      	mov	r1, r3
 8005400:	4806      	ldr	r0, [pc, #24]	; (800541c <HAL_SPI_MspInit+0xcc>)
 8005402:	f7fd fba3 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005406:	bf00      	nop
 8005408:	3728      	adds	r7, #40	; 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	40013000 	.word	0x40013000
 8005414:	40023800 	.word	0x40023800
 8005418:	40020000 	.word	0x40020000
 800541c:	40020400 	.word	0x40020400

08005420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	; 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	60da      	str	r2, [r3, #12]
 8005436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a19      	ldr	r2, [pc, #100]	; (80054a4 <HAL_UART_MspInit+0x84>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d12c      	bne.n	800549c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005442:	2300      	movs	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <HAL_UART_MspInit+0x88>)
 8005448:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <HAL_UART_MspInit+0x88>)
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	f043 0310 	orr.w	r3, r3, #16
 8005450:	6453      	str	r3, [r2, #68]	; 0x44
 8005452:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <HAL_UART_MspInit+0x88>)
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <HAL_UART_MspInit+0x88>)
 8005464:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <HAL_UART_MspInit+0x88>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6313      	str	r3, [r2, #48]	; 0x30
 800546e:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <HAL_UART_MspInit+0x88>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800547a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800547e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005480:	2302      	movs	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005484:	2301      	movs	r3, #1
 8005486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005488:	2303      	movs	r3, #3
 800548a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800548c:	2307      	movs	r3, #7
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	4619      	mov	r1, r3
 8005496:	4805      	ldr	r0, [pc, #20]	; (80054ac <HAL_UART_MspInit+0x8c>)
 8005498:	f7fd fb58 	bl	8002b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800549c:	bf00      	nop
 800549e:	3728      	adds	r7, #40	; 0x28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40011000 	.word	0x40011000
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40020000 	.word	0x40020000

080054b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80054b6:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <HAL_FMC_MspInit+0xf8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d16f      	bne.n	800559e <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80054be:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <HAL_FMC_MspInit+0xf8>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4a38      	ldr	r2, [pc, #224]	; (80055ac <HAL_FMC_MspInit+0xfc>)
 80054ca:	4b38      	ldr	r3, [pc, #224]	; (80055ac <HAL_FMC_MspInit+0xfc>)
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6393      	str	r3, [r2, #56]	; 0x38
 80054d4:	4b35      	ldr	r3, [pc, #212]	; (80055ac <HAL_FMC_MspInit+0xfc>)
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80054e0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80054e4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e6:	2302      	movs	r3, #2
 80054e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ee:	2303      	movs	r3, #3
 80054f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054f2:	230c      	movs	r3, #12
 80054f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	482d      	ldr	r0, [pc, #180]	; (80055b0 <HAL_FMC_MspInit+0x100>)
 80054fc:	f7fd fb26 	bl	8002b4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005500:	2301      	movs	r3, #1
 8005502:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800550c:	2303      	movs	r3, #3
 800550e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005510:	230c      	movs	r3, #12
 8005512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005514:	1d3b      	adds	r3, r7, #4
 8005516:	4619      	mov	r1, r3
 8005518:	4826      	ldr	r0, [pc, #152]	; (80055b4 <HAL_FMC_MspInit+0x104>)
 800551a:	f7fd fb17 	bl	8002b4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800551e:	f248 1333 	movw	r3, #33075	; 0x8133
 8005522:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005524:	2302      	movs	r3, #2
 8005526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552c:	2303      	movs	r3, #3
 800552e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005530:	230c      	movs	r3, #12
 8005532:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	4619      	mov	r1, r3
 8005538:	481f      	ldr	r0, [pc, #124]	; (80055b8 <HAL_FMC_MspInit+0x108>)
 800553a:	f7fd fb07 	bl	8002b4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800553e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005542:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	2302      	movs	r3, #2
 8005546:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554c:	2303      	movs	r3, #3
 800554e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005550:	230c      	movs	r3, #12
 8005552:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005554:	1d3b      	adds	r3, r7, #4
 8005556:	4619      	mov	r1, r3
 8005558:	4818      	ldr	r0, [pc, #96]	; (80055bc <HAL_FMC_MspInit+0x10c>)
 800555a:	f7fd faf7 	bl	8002b4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800555e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005562:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005564:	2302      	movs	r3, #2
 8005566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800556c:	2303      	movs	r3, #3
 800556e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005570:	230c      	movs	r3, #12
 8005572:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	4619      	mov	r1, r3
 8005578:	4811      	ldr	r0, [pc, #68]	; (80055c0 <HAL_FMC_MspInit+0x110>)
 800557a:	f7fd fae7 	bl	8002b4c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800557e:	2360      	movs	r3, #96	; 0x60
 8005580:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005582:	2302      	movs	r3, #2
 8005584:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800558a:	2303      	movs	r3, #3
 800558c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800558e:	230c      	movs	r3, #12
 8005590:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	4619      	mov	r1, r3
 8005596:	480b      	ldr	r0, [pc, #44]	; (80055c4 <HAL_FMC_MspInit+0x114>)
 8005598:	f7fd fad8 	bl	8002b4c <HAL_GPIO_Init>
 800559c:	e000      	b.n	80055a0 <HAL_FMC_MspInit+0xf0>
    return;
 800559e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000090 	.word	0x20000090
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40021400 	.word	0x40021400
 80055b4:	40020800 	.word	0x40020800
 80055b8:	40021800 	.word	0x40021800
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40020c00 	.word	0x40020c00
 80055c4:	40020400 	.word	0x40020400

080055c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80055d0:	f7ff ff6e 	bl	80054b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055ee:	e7fe      	b.n	80055ee <HardFault_Handler+0x4>

080055f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055f4:	e7fe      	b.n	80055f4 <MemManage_Handler+0x4>

080055f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055f6:	b480      	push	{r7}
 80055f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055fa:	e7fe      	b.n	80055fa <BusFault_Handler+0x4>

080055fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005600:	e7fe      	b.n	8005600 <UsageFault_Handler+0x4>

08005602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005602:	b480      	push	{r7}
 8005604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005630:	f7fb f810 	bl	8000654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005634:	bf00      	nop
 8005636:	bd80      	pop	{r7, pc}

08005638 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800563c:	4802      	ldr	r0, [pc, #8]	; (8005648 <DMA2_Stream1_IRQHandler+0x10>)
 800563e:	f7fb fda1 	bl	8001184 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200000f8 	.word	0x200000f8

0800564c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8005650:	4802      	ldr	r0, [pc, #8]	; (800565c <DCMI_IRQHandler+0x10>)
 8005652:	f7fb fa49 	bl	8000ae8 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000158 	.word	0x20000158

08005660 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005668:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800566c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d013      	beq.n	80056a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800567c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005680:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005688:	e000      	b.n	800568c <ITM_SendChar+0x2c>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800568a:	bf00      	nop
 800568c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f9      	beq.n	800568a <ITM_SendChar+0x2a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005696:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80056a0:	687b      	ldr	r3, [r7, #4]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80056ae:	b590      	push	{r4, r7, lr}
 80056b0:	b087      	sub	sp, #28
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	e00a      	b.n	80056d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056c0:	68bc      	ldr	r4, [r7, #8]
 80056c2:	1c63      	adds	r3, r4, #1
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	f3af 8000 	nop.w
 80056ca:	4603      	mov	r3, r0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	3301      	adds	r3, #1
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	dbf0      	blt.n	80056c0 <_read+0x12>
	}

return len;
 80056de:	687b      	ldr	r3, [r7, #4]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd90      	pop	{r4, r7, pc}

080056e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e009      	b.n	800570e <_write+0x26>
	{
		ITM_SendChar(ptr[DataIdx]);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	4413      	add	r3, r2
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff ffac 	bl	8005660 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	3301      	adds	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	429a      	cmp	r2, r3
 8005714:	dbf1      	blt.n	80056fa <_write+0x12>
	}
	return len;
 8005716:	687b      	ldr	r3, [r7, #4]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005728:	4b11      	ldr	r3, [pc, #68]	; (8005770 <_sbrk+0x50>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <_sbrk+0x16>
		heap_end = &end;
 8005730:	4b0f      	ldr	r3, [pc, #60]	; (8005770 <_sbrk+0x50>)
 8005732:	4a10      	ldr	r2, [pc, #64]	; (8005774 <_sbrk+0x54>)
 8005734:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <_sbrk+0x50>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800573c:	4b0c      	ldr	r3, [pc, #48]	; (8005770 <_sbrk+0x50>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4413      	add	r3, r2
 8005744:	466a      	mov	r2, sp
 8005746:	4293      	cmp	r3, r2
 8005748:	d907      	bls.n	800575a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800574a:	f000 f8a9 	bl	80058a0 <__errno>
 800574e:	4602      	mov	r2, r0
 8005750:	230c      	movs	r3, #12
 8005752:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	e006      	b.n	8005768 <_sbrk+0x48>
	}

	heap_end += incr;
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <_sbrk+0x50>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4413      	add	r3, r2
 8005762:	4a03      	ldr	r2, [pc, #12]	; (8005770 <_sbrk+0x50>)
 8005764:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005766:	68fb      	ldr	r3, [r7, #12]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000094 	.word	0x20000094
 8005774:	2000c868 	.word	0x2000c868

08005778 <_close>:

int _close(int file)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	return -1;
 8005780:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057a0:	605a      	str	r2, [r3, #4]
	return 0;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_isatty>:

int _isatty(int file)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	return 1;
 80057b8:	2301      	movs	r3, #1
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
	return 0;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80057e4:	4a16      	ldr	r2, [pc, #88]	; (8005840 <SystemInit+0x60>)
 80057e6:	4b16      	ldr	r3, [pc, #88]	; (8005840 <SystemInit+0x60>)
 80057e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80057f4:	4a13      	ldr	r2, [pc, #76]	; (8005844 <SystemInit+0x64>)
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <SystemInit+0x64>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005800:	4b10      	ldr	r3, [pc, #64]	; (8005844 <SystemInit+0x64>)
 8005802:	2200      	movs	r2, #0
 8005804:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005806:	4a0f      	ldr	r2, [pc, #60]	; (8005844 <SystemInit+0x64>)
 8005808:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <SystemInit+0x64>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005814:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <SystemInit+0x64>)
 8005818:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <SystemInit+0x68>)
 800581a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800581c:	4a09      	ldr	r2, [pc, #36]	; (8005844 <SystemInit+0x64>)
 800581e:	4b09      	ldr	r3, [pc, #36]	; (8005844 <SystemInit+0x64>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <SystemInit+0x64>)
 800582a:	2200      	movs	r2, #0
 800582c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800582e:	4b04      	ldr	r3, [pc, #16]	; (8005840 <SystemInit+0x60>)
 8005830:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005834:	609a      	str	r2, [r3, #8]
#endif
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000ed00 	.word	0xe000ed00
 8005844:	40023800 	.word	0x40023800
 8005848:	24003010 	.word	0x24003010

0800584c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800584c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005884 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005852:	e003      	b.n	800585c <LoopCopyDataInit>

08005854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800585a:	3104      	adds	r1, #4

0800585c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800585c:	480b      	ldr	r0, [pc, #44]	; (800588c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800585e:	4b0c      	ldr	r3, [pc, #48]	; (8005890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005864:	d3f6      	bcc.n	8005854 <CopyDataInit>
  ldr  r2, =_sbss
 8005866:	4a0b      	ldr	r2, [pc, #44]	; (8005894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005868:	e002      	b.n	8005870 <LoopFillZerobss>

0800586a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800586a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800586c:	f842 3b04 	str.w	r3, [r2], #4

08005870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005874:	d3f9      	bcc.n	800586a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005876:	f7ff ffb3 	bl	80057e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800587a:	f000 f817 	bl	80058ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800587e:	f7ff f905 	bl	8004a8c <main>
  bx  lr    
 8005882:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005884:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005888:	08006a90 	.word	0x08006a90
  ldr  r0, =_sdata
 800588c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005890:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8005894:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8005898:	2000c868 	.word	0x2000c868

0800589c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800589c:	e7fe      	b.n	800589c <ADC_IRQHandler>
	...

080058a0 <__errno>:
 80058a0:	4b01      	ldr	r3, [pc, #4]	; (80058a8 <__errno+0x8>)
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	2000000c 	.word	0x2000000c

080058ac <__libc_init_array>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	4e0d      	ldr	r6, [pc, #52]	; (80058e4 <__libc_init_array+0x38>)
 80058b0:	4c0d      	ldr	r4, [pc, #52]	; (80058e8 <__libc_init_array+0x3c>)
 80058b2:	1ba4      	subs	r4, r4, r6
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	2500      	movs	r5, #0
 80058b8:	42a5      	cmp	r5, r4
 80058ba:	d109      	bne.n	80058d0 <__libc_init_array+0x24>
 80058bc:	4e0b      	ldr	r6, [pc, #44]	; (80058ec <__libc_init_array+0x40>)
 80058be:	4c0c      	ldr	r4, [pc, #48]	; (80058f0 <__libc_init_array+0x44>)
 80058c0:	f000 ffee 	bl	80068a0 <_init>
 80058c4:	1ba4      	subs	r4, r4, r6
 80058c6:	10a4      	asrs	r4, r4, #2
 80058c8:	2500      	movs	r5, #0
 80058ca:	42a5      	cmp	r5, r4
 80058cc:	d105      	bne.n	80058da <__libc_init_array+0x2e>
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058d4:	4798      	blx	r3
 80058d6:	3501      	adds	r5, #1
 80058d8:	e7ee      	b.n	80058b8 <__libc_init_array+0xc>
 80058da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058de:	4798      	blx	r3
 80058e0:	3501      	adds	r5, #1
 80058e2:	e7f2      	b.n	80058ca <__libc_init_array+0x1e>
 80058e4:	08006a88 	.word	0x08006a88
 80058e8:	08006a88 	.word	0x08006a88
 80058ec:	08006a88 	.word	0x08006a88
 80058f0:	08006a8c 	.word	0x08006a8c

080058f4 <memset>:
 80058f4:	4402      	add	r2, r0
 80058f6:	4603      	mov	r3, r0
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d100      	bne.n	80058fe <memset+0xa>
 80058fc:	4770      	bx	lr
 80058fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005902:	e7f9      	b.n	80058f8 <memset+0x4>

08005904 <_puts_r>:
 8005904:	b570      	push	{r4, r5, r6, lr}
 8005906:	460e      	mov	r6, r1
 8005908:	4605      	mov	r5, r0
 800590a:	b118      	cbz	r0, 8005914 <_puts_r+0x10>
 800590c:	6983      	ldr	r3, [r0, #24]
 800590e:	b90b      	cbnz	r3, 8005914 <_puts_r+0x10>
 8005910:	f000 fa32 	bl	8005d78 <__sinit>
 8005914:	69ab      	ldr	r3, [r5, #24]
 8005916:	68ac      	ldr	r4, [r5, #8]
 8005918:	b913      	cbnz	r3, 8005920 <_puts_r+0x1c>
 800591a:	4628      	mov	r0, r5
 800591c:	f000 fa2c 	bl	8005d78 <__sinit>
 8005920:	4b23      	ldr	r3, [pc, #140]	; (80059b0 <_puts_r+0xac>)
 8005922:	429c      	cmp	r4, r3
 8005924:	d117      	bne.n	8005956 <_puts_r+0x52>
 8005926:	686c      	ldr	r4, [r5, #4]
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	071b      	lsls	r3, r3, #28
 800592c:	d51d      	bpl.n	800596a <_puts_r+0x66>
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	b1db      	cbz	r3, 800596a <_puts_r+0x66>
 8005932:	3e01      	subs	r6, #1
 8005934:	68a3      	ldr	r3, [r4, #8]
 8005936:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800593a:	3b01      	subs	r3, #1
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	b9e9      	cbnz	r1, 800597c <_puts_r+0x78>
 8005940:	2b00      	cmp	r3, #0
 8005942:	da2e      	bge.n	80059a2 <_puts_r+0x9e>
 8005944:	4622      	mov	r2, r4
 8005946:	210a      	movs	r1, #10
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f863 	bl	8005a14 <__swbuf_r>
 800594e:	3001      	adds	r0, #1
 8005950:	d011      	beq.n	8005976 <_puts_r+0x72>
 8005952:	200a      	movs	r0, #10
 8005954:	bd70      	pop	{r4, r5, r6, pc}
 8005956:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <_puts_r+0xb0>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d101      	bne.n	8005960 <_puts_r+0x5c>
 800595c:	68ac      	ldr	r4, [r5, #8]
 800595e:	e7e3      	b.n	8005928 <_puts_r+0x24>
 8005960:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <_puts_r+0xb4>)
 8005962:	429c      	cmp	r4, r3
 8005964:	bf08      	it	eq
 8005966:	68ec      	ldreq	r4, [r5, #12]
 8005968:	e7de      	b.n	8005928 <_puts_r+0x24>
 800596a:	4621      	mov	r1, r4
 800596c:	4628      	mov	r0, r5
 800596e:	f000 f8a3 	bl	8005ab8 <__swsetup_r>
 8005972:	2800      	cmp	r0, #0
 8005974:	d0dd      	beq.n	8005932 <_puts_r+0x2e>
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	2b00      	cmp	r3, #0
 800597e:	da04      	bge.n	800598a <_puts_r+0x86>
 8005980:	69a2      	ldr	r2, [r4, #24]
 8005982:	4293      	cmp	r3, r2
 8005984:	db06      	blt.n	8005994 <_puts_r+0x90>
 8005986:	290a      	cmp	r1, #10
 8005988:	d004      	beq.n	8005994 <_puts_r+0x90>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	7019      	strb	r1, [r3, #0]
 8005992:	e7cf      	b.n	8005934 <_puts_r+0x30>
 8005994:	4622      	mov	r2, r4
 8005996:	4628      	mov	r0, r5
 8005998:	f000 f83c 	bl	8005a14 <__swbuf_r>
 800599c:	3001      	adds	r0, #1
 800599e:	d1c9      	bne.n	8005934 <_puts_r+0x30>
 80059a0:	e7e9      	b.n	8005976 <_puts_r+0x72>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	200a      	movs	r0, #10
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	7018      	strb	r0, [r3, #0]
 80059ac:	bd70      	pop	{r4, r5, r6, pc}
 80059ae:	bf00      	nop
 80059b0:	08006a0c 	.word	0x08006a0c
 80059b4:	08006a2c 	.word	0x08006a2c
 80059b8:	080069ec 	.word	0x080069ec

080059bc <puts>:
 80059bc:	4b02      	ldr	r3, [pc, #8]	; (80059c8 <puts+0xc>)
 80059be:	4601      	mov	r1, r0
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f7ff bf9f 	b.w	8005904 <_puts_r>
 80059c6:	bf00      	nop
 80059c8:	2000000c 	.word	0x2000000c

080059cc <siprintf>:
 80059cc:	b40e      	push	{r1, r2, r3}
 80059ce:	b500      	push	{lr}
 80059d0:	b09c      	sub	sp, #112	; 0x70
 80059d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80059d6:	ab1d      	add	r3, sp, #116	; 0x74
 80059d8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80059dc:	9002      	str	r0, [sp, #8]
 80059de:	9006      	str	r0, [sp, #24]
 80059e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059e4:	480a      	ldr	r0, [pc, #40]	; (8005a10 <siprintf+0x44>)
 80059e6:	9104      	str	r1, [sp, #16]
 80059e8:	9107      	str	r1, [sp, #28]
 80059ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80059ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f2:	f8ad 1016 	strh.w	r1, [sp, #22]
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	a902      	add	r1, sp, #8
 80059fc:	f000 fbb2 	bl	8006164 <_svfiprintf_r>
 8005a00:	9b02      	ldr	r3, [sp, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	b01c      	add	sp, #112	; 0x70
 8005a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <__swbuf_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	460e      	mov	r6, r1
 8005a18:	4614      	mov	r4, r2
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b118      	cbz	r0, 8005a26 <__swbuf_r+0x12>
 8005a1e:	6983      	ldr	r3, [r0, #24]
 8005a20:	b90b      	cbnz	r3, 8005a26 <__swbuf_r+0x12>
 8005a22:	f000 f9a9 	bl	8005d78 <__sinit>
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <__swbuf_r+0x98>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	d12a      	bne.n	8005a82 <__swbuf_r+0x6e>
 8005a2c:	686c      	ldr	r4, [r5, #4]
 8005a2e:	69a3      	ldr	r3, [r4, #24]
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	071a      	lsls	r2, r3, #28
 8005a36:	d52e      	bpl.n	8005a96 <__swbuf_r+0x82>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	b363      	cbz	r3, 8005a96 <__swbuf_r+0x82>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	1ac0      	subs	r0, r0, r3
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	b2f6      	uxtb	r6, r6
 8005a46:	4298      	cmp	r0, r3
 8005a48:	4637      	mov	r7, r6
 8005a4a:	db04      	blt.n	8005a56 <__swbuf_r+0x42>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f928 	bl	8005ca4 <_fflush_r>
 8005a54:	bb28      	cbnz	r0, 8005aa2 <__swbuf_r+0x8e>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	701e      	strb	r6, [r3, #0]
 8005a64:	6963      	ldr	r3, [r4, #20]
 8005a66:	3001      	adds	r0, #1
 8005a68:	4298      	cmp	r0, r3
 8005a6a:	d004      	beq.n	8005a76 <__swbuf_r+0x62>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	07db      	lsls	r3, r3, #31
 8005a70:	d519      	bpl.n	8005aa6 <__swbuf_r+0x92>
 8005a72:	2e0a      	cmp	r6, #10
 8005a74:	d117      	bne.n	8005aa6 <__swbuf_r+0x92>
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f913 	bl	8005ca4 <_fflush_r>
 8005a7e:	b190      	cbz	r0, 8005aa6 <__swbuf_r+0x92>
 8005a80:	e00f      	b.n	8005aa2 <__swbuf_r+0x8e>
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <__swbuf_r+0x9c>)
 8005a84:	429c      	cmp	r4, r3
 8005a86:	d101      	bne.n	8005a8c <__swbuf_r+0x78>
 8005a88:	68ac      	ldr	r4, [r5, #8]
 8005a8a:	e7d0      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <__swbuf_r+0xa0>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	bf08      	it	eq
 8005a92:	68ec      	ldreq	r4, [r5, #12]
 8005a94:	e7cb      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f80d 	bl	8005ab8 <__swsetup_r>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0cc      	beq.n	8005a3c <__swbuf_r+0x28>
 8005aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	08006a0c 	.word	0x08006a0c
 8005ab0:	08006a2c 	.word	0x08006a2c
 8005ab4:	080069ec 	.word	0x080069ec

08005ab8 <__swsetup_r>:
 8005ab8:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <__swsetup_r+0xcc>)
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	681d      	ldr	r5, [r3, #0]
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	b125      	cbz	r5, 8005ace <__swsetup_r+0x16>
 8005ac4:	69ab      	ldr	r3, [r5, #24]
 8005ac6:	b913      	cbnz	r3, 8005ace <__swsetup_r+0x16>
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 f955 	bl	8005d78 <__sinit>
 8005ace:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <__swsetup_r+0xd0>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	d10f      	bne.n	8005af4 <__swsetup_r+0x3c>
 8005ad4:	686c      	ldr	r4, [r5, #4]
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	0715      	lsls	r5, r2, #28
 8005ade:	d42c      	bmi.n	8005b3a <__swsetup_r+0x82>
 8005ae0:	06d0      	lsls	r0, r2, #27
 8005ae2:	d411      	bmi.n	8005b08 <__swsetup_r+0x50>
 8005ae4:	2209      	movs	r2, #9
 8005ae6:	6032      	str	r2, [r6, #0]
 8005ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aec:	81a3      	strh	r3, [r4, #12]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	4b25      	ldr	r3, [pc, #148]	; (8005b8c <__swsetup_r+0xd4>)
 8005af6:	429c      	cmp	r4, r3
 8005af8:	d101      	bne.n	8005afe <__swsetup_r+0x46>
 8005afa:	68ac      	ldr	r4, [r5, #8]
 8005afc:	e7eb      	b.n	8005ad6 <__swsetup_r+0x1e>
 8005afe:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <__swsetup_r+0xd8>)
 8005b00:	429c      	cmp	r4, r3
 8005b02:	bf08      	it	eq
 8005b04:	68ec      	ldreq	r4, [r5, #12]
 8005b06:	e7e6      	b.n	8005ad6 <__swsetup_r+0x1e>
 8005b08:	0751      	lsls	r1, r2, #29
 8005b0a:	d512      	bpl.n	8005b32 <__swsetup_r+0x7a>
 8005b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0e:	b141      	cbz	r1, 8005b22 <__swsetup_r+0x6a>
 8005b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b14:	4299      	cmp	r1, r3
 8005b16:	d002      	beq.n	8005b1e <__swsetup_r+0x66>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f000 fa1b 	bl	8005f54 <_free_r>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6363      	str	r3, [r4, #52]	; 0x34
 8005b22:	89a3      	ldrh	r3, [r4, #12]
 8005b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	6063      	str	r3, [r4, #4]
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f043 0308 	orr.w	r3, r3, #8
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	b94b      	cbnz	r3, 8005b52 <__swsetup_r+0x9a>
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b48:	d003      	beq.n	8005b52 <__swsetup_r+0x9a>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f9c1 	bl	8005ed4 <__smakebuf_r>
 8005b52:	89a2      	ldrh	r2, [r4, #12]
 8005b54:	f012 0301 	ands.w	r3, r2, #1
 8005b58:	d00c      	beq.n	8005b74 <__swsetup_r+0xbc>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60a3      	str	r3, [r4, #8]
 8005b5e:	6963      	ldr	r3, [r4, #20]
 8005b60:	425b      	negs	r3, r3
 8005b62:	61a3      	str	r3, [r4, #24]
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	b953      	cbnz	r3, 8005b7e <__swsetup_r+0xc6>
 8005b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b70:	d1ba      	bne.n	8005ae8 <__swsetup_r+0x30>
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	0792      	lsls	r2, r2, #30
 8005b76:	bf58      	it	pl
 8005b78:	6963      	ldrpl	r3, [r4, #20]
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	e7f2      	b.n	8005b64 <__swsetup_r+0xac>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e7f7      	b.n	8005b72 <__swsetup_r+0xba>
 8005b82:	bf00      	nop
 8005b84:	2000000c 	.word	0x2000000c
 8005b88:	08006a0c 	.word	0x08006a0c
 8005b8c:	08006a2c 	.word	0x08006a2c
 8005b90:	080069ec 	.word	0x080069ec

08005b94 <__sflush_r>:
 8005b94:	898a      	ldrh	r2, [r1, #12]
 8005b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	0710      	lsls	r0, r2, #28
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	d45a      	bmi.n	8005c58 <__sflush_r+0xc4>
 8005ba2:	684b      	ldr	r3, [r1, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dc05      	bgt.n	8005bb4 <__sflush_r+0x20>
 8005ba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dc02      	bgt.n	8005bb4 <__sflush_r+0x20>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	d0f9      	beq.n	8005bae <__sflush_r+0x1a>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bc0:	682f      	ldr	r7, [r5, #0]
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	d033      	beq.n	8005c2e <__sflush_r+0x9a>
 8005bc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	075a      	lsls	r2, r3, #29
 8005bcc:	d505      	bpl.n	8005bda <__sflush_r+0x46>
 8005bce:	6863      	ldr	r3, [r4, #4]
 8005bd0:	1ac0      	subs	r0, r0, r3
 8005bd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bd4:	b10b      	cbz	r3, 8005bda <__sflush_r+0x46>
 8005bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bd8:	1ac0      	subs	r0, r0, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b0      	blx	r6
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	d106      	bne.n	8005bfa <__sflush_r+0x66>
 8005bec:	6829      	ldr	r1, [r5, #0]
 8005bee:	291d      	cmp	r1, #29
 8005bf0:	d84b      	bhi.n	8005c8a <__sflush_r+0xf6>
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <__sflush_r+0x10c>)
 8005bf4:	40ca      	lsrs	r2, r1
 8005bf6:	07d6      	lsls	r6, r2, #31
 8005bf8:	d547      	bpl.n	8005c8a <__sflush_r+0xf6>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6062      	str	r2, [r4, #4]
 8005bfe:	04d9      	lsls	r1, r3, #19
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	d504      	bpl.n	8005c10 <__sflush_r+0x7c>
 8005c06:	1c42      	adds	r2, r0, #1
 8005c08:	d101      	bne.n	8005c0e <__sflush_r+0x7a>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b903      	cbnz	r3, 8005c10 <__sflush_r+0x7c>
 8005c0e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c12:	602f      	str	r7, [r5, #0]
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d0ca      	beq.n	8005bae <__sflush_r+0x1a>
 8005c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <__sflush_r+0x92>
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f997 	bl	8005f54 <_free_r>
 8005c26:	2000      	movs	r0, #0
 8005c28:	6360      	str	r0, [r4, #52]	; 0x34
 8005c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c2e:	6a21      	ldr	r1, [r4, #32]
 8005c30:	2301      	movs	r3, #1
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b0      	blx	r6
 8005c36:	1c41      	adds	r1, r0, #1
 8005c38:	d1c6      	bne.n	8005bc8 <__sflush_r+0x34>
 8005c3a:	682b      	ldr	r3, [r5, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0c3      	beq.n	8005bc8 <__sflush_r+0x34>
 8005c40:	2b1d      	cmp	r3, #29
 8005c42:	d001      	beq.n	8005c48 <__sflush_r+0xb4>
 8005c44:	2b16      	cmp	r3, #22
 8005c46:	d101      	bne.n	8005c4c <__sflush_r+0xb8>
 8005c48:	602f      	str	r7, [r5, #0]
 8005c4a:	e7b0      	b.n	8005bae <__sflush_r+0x1a>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	690f      	ldr	r7, [r1, #16]
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d0a7      	beq.n	8005bae <__sflush_r+0x1a>
 8005c5e:	0793      	lsls	r3, r2, #30
 8005c60:	680e      	ldr	r6, [r1, #0]
 8005c62:	bf08      	it	eq
 8005c64:	694b      	ldreq	r3, [r1, #20]
 8005c66:	600f      	str	r7, [r1, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	eba6 0807 	sub.w	r8, r6, r7
 8005c70:	608b      	str	r3, [r1, #8]
 8005c72:	f1b8 0f00 	cmp.w	r8, #0
 8005c76:	dd9a      	ble.n	8005bae <__sflush_r+0x1a>
 8005c78:	4643      	mov	r3, r8
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	6a21      	ldr	r1, [r4, #32]
 8005c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c80:	4628      	mov	r0, r5
 8005c82:	47b0      	blx	r6
 8005c84:	2800      	cmp	r0, #0
 8005c86:	dc07      	bgt.n	8005c98 <__sflush_r+0x104>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c98:	4407      	add	r7, r0
 8005c9a:	eba8 0800 	sub.w	r8, r8, r0
 8005c9e:	e7e8      	b.n	8005c72 <__sflush_r+0xde>
 8005ca0:	20400001 	.word	0x20400001

08005ca4 <_fflush_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	4605      	mov	r5, r0
 8005caa:	460c      	mov	r4, r1
 8005cac:	b1db      	cbz	r3, 8005ce6 <_fflush_r+0x42>
 8005cae:	b118      	cbz	r0, 8005cb8 <_fflush_r+0x14>
 8005cb0:	6983      	ldr	r3, [r0, #24]
 8005cb2:	b90b      	cbnz	r3, 8005cb8 <_fflush_r+0x14>
 8005cb4:	f000 f860 	bl	8005d78 <__sinit>
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <_fflush_r+0x48>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	d109      	bne.n	8005cd2 <_fflush_r+0x2e>
 8005cbe:	686c      	ldr	r4, [r5, #4]
 8005cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc4:	b17b      	cbz	r3, 8005ce6 <_fflush_r+0x42>
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cce:	f7ff bf61 	b.w	8005b94 <__sflush_r>
 8005cd2:	4b07      	ldr	r3, [pc, #28]	; (8005cf0 <_fflush_r+0x4c>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d101      	bne.n	8005cdc <_fflush_r+0x38>
 8005cd8:	68ac      	ldr	r4, [r5, #8]
 8005cda:	e7f1      	b.n	8005cc0 <_fflush_r+0x1c>
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <_fflush_r+0x50>)
 8005cde:	429c      	cmp	r4, r3
 8005ce0:	bf08      	it	eq
 8005ce2:	68ec      	ldreq	r4, [r5, #12]
 8005ce4:	e7ec      	b.n	8005cc0 <_fflush_r+0x1c>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	bd38      	pop	{r3, r4, r5, pc}
 8005cea:	bf00      	nop
 8005cec:	08006a0c 	.word	0x08006a0c
 8005cf0:	08006a2c 	.word	0x08006a2c
 8005cf4:	080069ec 	.word	0x080069ec

08005cf8 <_cleanup_r>:
 8005cf8:	4901      	ldr	r1, [pc, #4]	; (8005d00 <_cleanup_r+0x8>)
 8005cfa:	f000 b8a9 	b.w	8005e50 <_fwalk_reent>
 8005cfe:	bf00      	nop
 8005d00:	08005ca5 	.word	0x08005ca5

08005d04 <std.isra.0>:
 8005d04:	2300      	movs	r3, #0
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	6003      	str	r3, [r0, #0]
 8005d0c:	6043      	str	r3, [r0, #4]
 8005d0e:	6083      	str	r3, [r0, #8]
 8005d10:	8181      	strh	r1, [r0, #12]
 8005d12:	6643      	str	r3, [r0, #100]	; 0x64
 8005d14:	81c2      	strh	r2, [r0, #14]
 8005d16:	6103      	str	r3, [r0, #16]
 8005d18:	6143      	str	r3, [r0, #20]
 8005d1a:	6183      	str	r3, [r0, #24]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2208      	movs	r2, #8
 8005d20:	305c      	adds	r0, #92	; 0x5c
 8005d22:	f7ff fde7 	bl	80058f4 <memset>
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <std.isra.0+0x38>)
 8005d28:	6263      	str	r3, [r4, #36]	; 0x24
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <std.isra.0+0x3c>)
 8005d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std.isra.0+0x40>)
 8005d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std.isra.0+0x44>)
 8005d34:	6224      	str	r4, [r4, #32]
 8005d36:	6323      	str	r3, [r4, #48]	; 0x30
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	bf00      	nop
 8005d3c:	08006699 	.word	0x08006699
 8005d40:	080066bb 	.word	0x080066bb
 8005d44:	080066f3 	.word	0x080066f3
 8005d48:	08006717 	.word	0x08006717

08005d4c <__sfmoreglue>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	1e4a      	subs	r2, r1, #1
 8005d50:	2568      	movs	r5, #104	; 0x68
 8005d52:	4355      	muls	r5, r2
 8005d54:	460e      	mov	r6, r1
 8005d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d5a:	f000 f949 	bl	8005ff0 <_malloc_r>
 8005d5e:	4604      	mov	r4, r0
 8005d60:	b140      	cbz	r0, 8005d74 <__sfmoreglue+0x28>
 8005d62:	2100      	movs	r1, #0
 8005d64:	e880 0042 	stmia.w	r0, {r1, r6}
 8005d68:	300c      	adds	r0, #12
 8005d6a:	60a0      	str	r0, [r4, #8]
 8005d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d70:	f7ff fdc0 	bl	80058f4 <memset>
 8005d74:	4620      	mov	r0, r4
 8005d76:	bd70      	pop	{r4, r5, r6, pc}

08005d78 <__sinit>:
 8005d78:	6983      	ldr	r3, [r0, #24]
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	bb33      	cbnz	r3, 8005dce <__sinit+0x56>
 8005d80:	6483      	str	r3, [r0, #72]	; 0x48
 8005d82:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005d84:	6503      	str	r3, [r0, #80]	; 0x50
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <__sinit+0x58>)
 8005d88:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <__sinit+0x5c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6282      	str	r2, [r0, #40]	; 0x28
 8005d8e:	4298      	cmp	r0, r3
 8005d90:	bf04      	itt	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	6183      	streq	r3, [r0, #24]
 8005d96:	f000 f81f 	bl	8005dd8 <__sfp>
 8005d9a:	6060      	str	r0, [r4, #4]
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 f81b 	bl	8005dd8 <__sfp>
 8005da2:	60a0      	str	r0, [r4, #8]
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 f817 	bl	8005dd8 <__sfp>
 8005daa:	2200      	movs	r2, #0
 8005dac:	60e0      	str	r0, [r4, #12]
 8005dae:	2104      	movs	r1, #4
 8005db0:	6860      	ldr	r0, [r4, #4]
 8005db2:	f7ff ffa7 	bl	8005d04 <std.isra.0>
 8005db6:	2201      	movs	r2, #1
 8005db8:	2109      	movs	r1, #9
 8005dba:	68a0      	ldr	r0, [r4, #8]
 8005dbc:	f7ff ffa2 	bl	8005d04 <std.isra.0>
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	2112      	movs	r1, #18
 8005dc4:	68e0      	ldr	r0, [r4, #12]
 8005dc6:	f7ff ff9d 	bl	8005d04 <std.isra.0>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	61a3      	str	r3, [r4, #24]
 8005dce:	bd10      	pop	{r4, pc}
 8005dd0:	080069e8 	.word	0x080069e8
 8005dd4:	08005cf9 	.word	0x08005cf9

08005dd8 <__sfp>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <__sfp+0x74>)
 8005ddc:	681e      	ldr	r6, [r3, #0]
 8005dde:	69b3      	ldr	r3, [r6, #24]
 8005de0:	4607      	mov	r7, r0
 8005de2:	b913      	cbnz	r3, 8005dea <__sfp+0x12>
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7ff ffc7 	bl	8005d78 <__sinit>
 8005dea:	3648      	adds	r6, #72	; 0x48
 8005dec:	68b4      	ldr	r4, [r6, #8]
 8005dee:	6873      	ldr	r3, [r6, #4]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	d503      	bpl.n	8005dfc <__sfp+0x24>
 8005df4:	6833      	ldr	r3, [r6, #0]
 8005df6:	b133      	cbz	r3, 8005e06 <__sfp+0x2e>
 8005df8:	6836      	ldr	r6, [r6, #0]
 8005dfa:	e7f7      	b.n	8005dec <__sfp+0x14>
 8005dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e00:	b16d      	cbz	r5, 8005e1e <__sfp+0x46>
 8005e02:	3468      	adds	r4, #104	; 0x68
 8005e04:	e7f4      	b.n	8005df0 <__sfp+0x18>
 8005e06:	2104      	movs	r1, #4
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f7ff ff9f 	bl	8005d4c <__sfmoreglue>
 8005e0e:	6030      	str	r0, [r6, #0]
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d1f1      	bne.n	8005df8 <__sfp+0x20>
 8005e14:	230c      	movs	r3, #12
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4604      	mov	r4, r0
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e22:	81e3      	strh	r3, [r4, #14]
 8005e24:	2301      	movs	r3, #1
 8005e26:	81a3      	strh	r3, [r4, #12]
 8005e28:	6665      	str	r5, [r4, #100]	; 0x64
 8005e2a:	6025      	str	r5, [r4, #0]
 8005e2c:	60a5      	str	r5, [r4, #8]
 8005e2e:	6065      	str	r5, [r4, #4]
 8005e30:	6125      	str	r5, [r4, #16]
 8005e32:	6165      	str	r5, [r4, #20]
 8005e34:	61a5      	str	r5, [r4, #24]
 8005e36:	2208      	movs	r2, #8
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e3e:	f7ff fd59 	bl	80058f4 <memset>
 8005e42:	6365      	str	r5, [r4, #52]	; 0x34
 8005e44:	63a5      	str	r5, [r4, #56]	; 0x38
 8005e46:	64a5      	str	r5, [r4, #72]	; 0x48
 8005e48:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005e4a:	e7e6      	b.n	8005e1a <__sfp+0x42>
 8005e4c:	080069e8 	.word	0x080069e8

08005e50 <_fwalk_reent>:
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4680      	mov	r8, r0
 8005e56:	4689      	mov	r9, r1
 8005e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e5c:	2600      	movs	r6, #0
 8005e5e:	b914      	cbnz	r4, 8005e66 <_fwalk_reent+0x16>
 8005e60:	4630      	mov	r0, r6
 8005e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e66:	68a5      	ldr	r5, [r4, #8]
 8005e68:	6867      	ldr	r7, [r4, #4]
 8005e6a:	3f01      	subs	r7, #1
 8005e6c:	d501      	bpl.n	8005e72 <_fwalk_reent+0x22>
 8005e6e:	6824      	ldr	r4, [r4, #0]
 8005e70:	e7f5      	b.n	8005e5e <_fwalk_reent+0xe>
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d907      	bls.n	8005e88 <_fwalk_reent+0x38>
 8005e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	d003      	beq.n	8005e88 <_fwalk_reent+0x38>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4640      	mov	r0, r8
 8005e84:	47c8      	blx	r9
 8005e86:	4306      	orrs	r6, r0
 8005e88:	3568      	adds	r5, #104	; 0x68
 8005e8a:	e7ee      	b.n	8005e6a <_fwalk_reent+0x1a>

08005e8c <__swhatbuf_r>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	460e      	mov	r6, r1
 8005e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e94:	2900      	cmp	r1, #0
 8005e96:	b090      	sub	sp, #64	; 0x40
 8005e98:	4614      	mov	r4, r2
 8005e9a:	461d      	mov	r5, r3
 8005e9c:	da07      	bge.n	8005eae <__swhatbuf_r+0x22>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	89b3      	ldrh	r3, [r6, #12]
 8005ea4:	061a      	lsls	r2, r3, #24
 8005ea6:	d410      	bmi.n	8005eca <__swhatbuf_r+0x3e>
 8005ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eac:	e00e      	b.n	8005ecc <__swhatbuf_r+0x40>
 8005eae:	aa01      	add	r2, sp, #4
 8005eb0:	f000 fc58 	bl	8006764 <_fstat_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	dbf2      	blt.n	8005e9e <__swhatbuf_r+0x12>
 8005eb8:	9a02      	ldr	r2, [sp, #8]
 8005eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ec2:	425a      	negs	r2, r3
 8005ec4:	415a      	adcs	r2, r3
 8005ec6:	602a      	str	r2, [r5, #0]
 8005ec8:	e7ee      	b.n	8005ea8 <__swhatbuf_r+0x1c>
 8005eca:	2340      	movs	r3, #64	; 0x40
 8005ecc:	2000      	movs	r0, #0
 8005ece:	6023      	str	r3, [r4, #0]
 8005ed0:	b010      	add	sp, #64	; 0x40
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}

08005ed4 <__smakebuf_r>:
 8005ed4:	898b      	ldrh	r3, [r1, #12]
 8005ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ed8:	079d      	lsls	r5, r3, #30
 8005eda:	4606      	mov	r6, r0
 8005edc:	460c      	mov	r4, r1
 8005ede:	d507      	bpl.n	8005ef0 <__smakebuf_r+0x1c>
 8005ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	6123      	str	r3, [r4, #16]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	6163      	str	r3, [r4, #20]
 8005eec:	b002      	add	sp, #8
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	ab01      	add	r3, sp, #4
 8005ef2:	466a      	mov	r2, sp
 8005ef4:	f7ff ffca 	bl	8005e8c <__swhatbuf_r>
 8005ef8:	9900      	ldr	r1, [sp, #0]
 8005efa:	4605      	mov	r5, r0
 8005efc:	4630      	mov	r0, r6
 8005efe:	f000 f877 	bl	8005ff0 <_malloc_r>
 8005f02:	b948      	cbnz	r0, 8005f18 <__smakebuf_r+0x44>
 8005f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f08:	059a      	lsls	r2, r3, #22
 8005f0a:	d4ef      	bmi.n	8005eec <__smakebuf_r+0x18>
 8005f0c:	f023 0303 	bic.w	r3, r3, #3
 8005f10:	f043 0302 	orr.w	r3, r3, #2
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	e7e3      	b.n	8005ee0 <__smakebuf_r+0xc>
 8005f18:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <__smakebuf_r+0x7c>)
 8005f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	6020      	str	r0, [r4, #0]
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	6163      	str	r3, [r4, #20]
 8005f2a:	9b01      	ldr	r3, [sp, #4]
 8005f2c:	6120      	str	r0, [r4, #16]
 8005f2e:	b15b      	cbz	r3, 8005f48 <__smakebuf_r+0x74>
 8005f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f34:	4630      	mov	r0, r6
 8005f36:	f000 fc27 	bl	8006788 <_isatty_r>
 8005f3a:	b128      	cbz	r0, 8005f48 <__smakebuf_r+0x74>
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f023 0303 	bic.w	r3, r3, #3
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	81a3      	strh	r3, [r4, #12]
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	431d      	orrs	r5, r3
 8005f4c:	81a5      	strh	r5, [r4, #12]
 8005f4e:	e7cd      	b.n	8005eec <__smakebuf_r+0x18>
 8005f50:	08005cf9 	.word	0x08005cf9

08005f54 <_free_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4605      	mov	r5, r0
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	d045      	beq.n	8005fe8 <_free_r+0x94>
 8005f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f60:	1f0c      	subs	r4, r1, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfb8      	it	lt
 8005f66:	18e4      	addlt	r4, r4, r3
 8005f68:	f000 fc55 	bl	8006816 <__malloc_lock>
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <_free_r+0x98>)
 8005f6e:	6813      	ldr	r3, [r2, #0]
 8005f70:	4610      	mov	r0, r2
 8005f72:	b933      	cbnz	r3, 8005f82 <_free_r+0x2e>
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	6014      	str	r4, [r2, #0]
 8005f78:	4628      	mov	r0, r5
 8005f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f7e:	f000 bc4b 	b.w	8006818 <__malloc_unlock>
 8005f82:	42a3      	cmp	r3, r4
 8005f84:	d90c      	bls.n	8005fa0 <_free_r+0x4c>
 8005f86:	6821      	ldr	r1, [r4, #0]
 8005f88:	1862      	adds	r2, r4, r1
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	bf04      	itt	eq
 8005f8e:	681a      	ldreq	r2, [r3, #0]
 8005f90:	685b      	ldreq	r3, [r3, #4]
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	bf04      	itt	eq
 8005f96:	1852      	addeq	r2, r2, r1
 8005f98:	6022      	streq	r2, [r4, #0]
 8005f9a:	6004      	str	r4, [r0, #0]
 8005f9c:	e7ec      	b.n	8005f78 <_free_r+0x24>
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	b10a      	cbz	r2, 8005fa8 <_free_r+0x54>
 8005fa4:	42a2      	cmp	r2, r4
 8005fa6:	d9fa      	bls.n	8005f9e <_free_r+0x4a>
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	1858      	adds	r0, r3, r1
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d10b      	bne.n	8005fc8 <_free_r+0x74>
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	4401      	add	r1, r0
 8005fb4:	1858      	adds	r0, r3, r1
 8005fb6:	4282      	cmp	r2, r0
 8005fb8:	6019      	str	r1, [r3, #0]
 8005fba:	d1dd      	bne.n	8005f78 <_free_r+0x24>
 8005fbc:	6810      	ldr	r0, [r2, #0]
 8005fbe:	6852      	ldr	r2, [r2, #4]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	4401      	add	r1, r0
 8005fc4:	6019      	str	r1, [r3, #0]
 8005fc6:	e7d7      	b.n	8005f78 <_free_r+0x24>
 8005fc8:	d902      	bls.n	8005fd0 <_free_r+0x7c>
 8005fca:	230c      	movs	r3, #12
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	e7d3      	b.n	8005f78 <_free_r+0x24>
 8005fd0:	6820      	ldr	r0, [r4, #0]
 8005fd2:	1821      	adds	r1, r4, r0
 8005fd4:	428a      	cmp	r2, r1
 8005fd6:	bf04      	itt	eq
 8005fd8:	6811      	ldreq	r1, [r2, #0]
 8005fda:	6852      	ldreq	r2, [r2, #4]
 8005fdc:	6062      	str	r2, [r4, #4]
 8005fde:	bf04      	itt	eq
 8005fe0:	1809      	addeq	r1, r1, r0
 8005fe2:	6021      	streq	r1, [r4, #0]
 8005fe4:	605c      	str	r4, [r3, #4]
 8005fe6:	e7c7      	b.n	8005f78 <_free_r+0x24>
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	20000098 	.word	0x20000098

08005ff0 <_malloc_r>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	1ccd      	adds	r5, r1, #3
 8005ff4:	f025 0503 	bic.w	r5, r5, #3
 8005ff8:	3508      	adds	r5, #8
 8005ffa:	2d0c      	cmp	r5, #12
 8005ffc:	bf38      	it	cc
 8005ffe:	250c      	movcc	r5, #12
 8006000:	2d00      	cmp	r5, #0
 8006002:	4606      	mov	r6, r0
 8006004:	db01      	blt.n	800600a <_malloc_r+0x1a>
 8006006:	42a9      	cmp	r1, r5
 8006008:	d903      	bls.n	8006012 <_malloc_r+0x22>
 800600a:	230c      	movs	r3, #12
 800600c:	6033      	str	r3, [r6, #0]
 800600e:	2000      	movs	r0, #0
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	f000 fc00 	bl	8006816 <__malloc_lock>
 8006016:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <_malloc_r+0xb4>)
 8006018:	6814      	ldr	r4, [r2, #0]
 800601a:	4621      	mov	r1, r4
 800601c:	b991      	cbnz	r1, 8006044 <_malloc_r+0x54>
 800601e:	4c22      	ldr	r4, [pc, #136]	; (80060a8 <_malloc_r+0xb8>)
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	b91b      	cbnz	r3, 800602c <_malloc_r+0x3c>
 8006024:	4630      	mov	r0, r6
 8006026:	f000 fb27 	bl	8006678 <_sbrk_r>
 800602a:	6020      	str	r0, [r4, #0]
 800602c:	4629      	mov	r1, r5
 800602e:	4630      	mov	r0, r6
 8006030:	f000 fb22 	bl	8006678 <_sbrk_r>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d126      	bne.n	8006086 <_malloc_r+0x96>
 8006038:	230c      	movs	r3, #12
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	4630      	mov	r0, r6
 800603e:	f000 fbeb 	bl	8006818 <__malloc_unlock>
 8006042:	e7e4      	b.n	800600e <_malloc_r+0x1e>
 8006044:	680b      	ldr	r3, [r1, #0]
 8006046:	1b5b      	subs	r3, r3, r5
 8006048:	d41a      	bmi.n	8006080 <_malloc_r+0x90>
 800604a:	2b0b      	cmp	r3, #11
 800604c:	d90f      	bls.n	800606e <_malloc_r+0x7e>
 800604e:	600b      	str	r3, [r1, #0]
 8006050:	50cd      	str	r5, [r1, r3]
 8006052:	18cc      	adds	r4, r1, r3
 8006054:	4630      	mov	r0, r6
 8006056:	f000 fbdf 	bl	8006818 <__malloc_unlock>
 800605a:	f104 000b 	add.w	r0, r4, #11
 800605e:	1d23      	adds	r3, r4, #4
 8006060:	f020 0007 	bic.w	r0, r0, #7
 8006064:	1ac3      	subs	r3, r0, r3
 8006066:	d01b      	beq.n	80060a0 <_malloc_r+0xb0>
 8006068:	425a      	negs	r2, r3
 800606a:	50e2      	str	r2, [r4, r3]
 800606c:	bd70      	pop	{r4, r5, r6, pc}
 800606e:	428c      	cmp	r4, r1
 8006070:	bf0d      	iteet	eq
 8006072:	6863      	ldreq	r3, [r4, #4]
 8006074:	684b      	ldrne	r3, [r1, #4]
 8006076:	6063      	strne	r3, [r4, #4]
 8006078:	6013      	streq	r3, [r2, #0]
 800607a:	bf18      	it	ne
 800607c:	460c      	movne	r4, r1
 800607e:	e7e9      	b.n	8006054 <_malloc_r+0x64>
 8006080:	460c      	mov	r4, r1
 8006082:	6849      	ldr	r1, [r1, #4]
 8006084:	e7ca      	b.n	800601c <_malloc_r+0x2c>
 8006086:	1cc4      	adds	r4, r0, #3
 8006088:	f024 0403 	bic.w	r4, r4, #3
 800608c:	42a0      	cmp	r0, r4
 800608e:	d005      	beq.n	800609c <_malloc_r+0xac>
 8006090:	1a21      	subs	r1, r4, r0
 8006092:	4630      	mov	r0, r6
 8006094:	f000 faf0 	bl	8006678 <_sbrk_r>
 8006098:	3001      	adds	r0, #1
 800609a:	d0cd      	beq.n	8006038 <_malloc_r+0x48>
 800609c:	6025      	str	r5, [r4, #0]
 800609e:	e7d9      	b.n	8006054 <_malloc_r+0x64>
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	bf00      	nop
 80060a4:	20000098 	.word	0x20000098
 80060a8:	2000009c 	.word	0x2000009c

080060ac <__ssputs_r>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	688e      	ldr	r6, [r1, #8]
 80060b2:	429e      	cmp	r6, r3
 80060b4:	4682      	mov	sl, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4691      	mov	r9, r2
 80060ba:	4698      	mov	r8, r3
 80060bc:	d835      	bhi.n	800612a <__ssputs_r+0x7e>
 80060be:	898a      	ldrh	r2, [r1, #12]
 80060c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060c4:	d031      	beq.n	800612a <__ssputs_r+0x7e>
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	6909      	ldr	r1, [r1, #16]
 80060ca:	1a6f      	subs	r7, r5, r1
 80060cc:	6965      	ldr	r5, [r4, #20]
 80060ce:	2302      	movs	r3, #2
 80060d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80060d8:	f108 0301 	add.w	r3, r8, #1
 80060dc:	443b      	add	r3, r7
 80060de:	429d      	cmp	r5, r3
 80060e0:	bf38      	it	cc
 80060e2:	461d      	movcc	r5, r3
 80060e4:	0553      	lsls	r3, r2, #21
 80060e6:	d531      	bpl.n	800614c <__ssputs_r+0xa0>
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7ff ff81 	bl	8005ff0 <_malloc_r>
 80060ee:	4606      	mov	r6, r0
 80060f0:	b950      	cbnz	r0, 8006108 <__ssputs_r+0x5c>
 80060f2:	230c      	movs	r3, #12
 80060f4:	f8ca 3000 	str.w	r3, [sl]
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	f04f 30ff 	mov.w	r0, #4294967295
 8006104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006108:	463a      	mov	r2, r7
 800610a:	6921      	ldr	r1, [r4, #16]
 800610c:	f000 fb5e 	bl	80067cc <memcpy>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	6126      	str	r6, [r4, #16]
 800611e:	6165      	str	r5, [r4, #20]
 8006120:	443e      	add	r6, r7
 8006122:	1bed      	subs	r5, r5, r7
 8006124:	6026      	str	r6, [r4, #0]
 8006126:	60a5      	str	r5, [r4, #8]
 8006128:	4646      	mov	r6, r8
 800612a:	4546      	cmp	r6, r8
 800612c:	bf28      	it	cs
 800612e:	4646      	movcs	r6, r8
 8006130:	4632      	mov	r2, r6
 8006132:	4649      	mov	r1, r9
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	f000 fb54 	bl	80067e2 <memmove>
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	1b9b      	subs	r3, r3, r6
 800613e:	60a3      	str	r3, [r4, #8]
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	441e      	add	r6, r3
 8006144:	6026      	str	r6, [r4, #0]
 8006146:	2000      	movs	r0, #0
 8006148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614c:	462a      	mov	r2, r5
 800614e:	f000 fb64 	bl	800681a <_realloc_r>
 8006152:	4606      	mov	r6, r0
 8006154:	2800      	cmp	r0, #0
 8006156:	d1e1      	bne.n	800611c <__ssputs_r+0x70>
 8006158:	6921      	ldr	r1, [r4, #16]
 800615a:	4650      	mov	r0, sl
 800615c:	f7ff fefa 	bl	8005f54 <_free_r>
 8006160:	e7c7      	b.n	80060f2 <__ssputs_r+0x46>
	...

08006164 <_svfiprintf_r>:
 8006164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	b09d      	sub	sp, #116	; 0x74
 800616a:	4680      	mov	r8, r0
 800616c:	9303      	str	r3, [sp, #12]
 800616e:	898b      	ldrh	r3, [r1, #12]
 8006170:	061c      	lsls	r4, r3, #24
 8006172:	460d      	mov	r5, r1
 8006174:	4616      	mov	r6, r2
 8006176:	d50f      	bpl.n	8006198 <_svfiprintf_r+0x34>
 8006178:	690b      	ldr	r3, [r1, #16]
 800617a:	b96b      	cbnz	r3, 8006198 <_svfiprintf_r+0x34>
 800617c:	2140      	movs	r1, #64	; 0x40
 800617e:	f7ff ff37 	bl	8005ff0 <_malloc_r>
 8006182:	6028      	str	r0, [r5, #0]
 8006184:	6128      	str	r0, [r5, #16]
 8006186:	b928      	cbnz	r0, 8006194 <_svfiprintf_r+0x30>
 8006188:	230c      	movs	r3, #12
 800618a:	f8c8 3000 	str.w	r3, [r8]
 800618e:	f04f 30ff 	mov.w	r0, #4294967295
 8006192:	e0c5      	b.n	8006320 <_svfiprintf_r+0x1bc>
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	616b      	str	r3, [r5, #20]
 8006198:	2300      	movs	r3, #0
 800619a:	9309      	str	r3, [sp, #36]	; 0x24
 800619c:	2320      	movs	r3, #32
 800619e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a2:	2330      	movs	r3, #48	; 0x30
 80061a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a8:	f04f 0b01 	mov.w	fp, #1
 80061ac:	4637      	mov	r7, r6
 80061ae:	463c      	mov	r4, r7
 80061b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d13c      	bne.n	8006232 <_svfiprintf_r+0xce>
 80061b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80061bc:	d00b      	beq.n	80061d6 <_svfiprintf_r+0x72>
 80061be:	4653      	mov	r3, sl
 80061c0:	4632      	mov	r2, r6
 80061c2:	4629      	mov	r1, r5
 80061c4:	4640      	mov	r0, r8
 80061c6:	f7ff ff71 	bl	80060ac <__ssputs_r>
 80061ca:	3001      	adds	r0, #1
 80061cc:	f000 80a3 	beq.w	8006316 <_svfiprintf_r+0x1b2>
 80061d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d2:	4453      	add	r3, sl
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
 80061d6:	783b      	ldrb	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 809c 	beq.w	8006316 <_svfiprintf_r+0x1b2>
 80061de:	2300      	movs	r3, #0
 80061e0:	f04f 32ff 	mov.w	r2, #4294967295
 80061e4:	9304      	str	r3, [sp, #16]
 80061e6:	9307      	str	r3, [sp, #28]
 80061e8:	9205      	str	r2, [sp, #20]
 80061ea:	9306      	str	r3, [sp, #24]
 80061ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061f0:	931a      	str	r3, [sp, #104]	; 0x68
 80061f2:	2205      	movs	r2, #5
 80061f4:	7821      	ldrb	r1, [r4, #0]
 80061f6:	4850      	ldr	r0, [pc, #320]	; (8006338 <_svfiprintf_r+0x1d4>)
 80061f8:	f7fa f802 	bl	8000200 <memchr>
 80061fc:	1c67      	adds	r7, r4, #1
 80061fe:	9b04      	ldr	r3, [sp, #16]
 8006200:	b9d8      	cbnz	r0, 800623a <_svfiprintf_r+0xd6>
 8006202:	06d9      	lsls	r1, r3, #27
 8006204:	bf44      	itt	mi
 8006206:	2220      	movmi	r2, #32
 8006208:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800620c:	071a      	lsls	r2, r3, #28
 800620e:	bf44      	itt	mi
 8006210:	222b      	movmi	r2, #43	; 0x2b
 8006212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006216:	7822      	ldrb	r2, [r4, #0]
 8006218:	2a2a      	cmp	r2, #42	; 0x2a
 800621a:	d016      	beq.n	800624a <_svfiprintf_r+0xe6>
 800621c:	9a07      	ldr	r2, [sp, #28]
 800621e:	2100      	movs	r1, #0
 8006220:	200a      	movs	r0, #10
 8006222:	4627      	mov	r7, r4
 8006224:	3401      	adds	r4, #1
 8006226:	783b      	ldrb	r3, [r7, #0]
 8006228:	3b30      	subs	r3, #48	; 0x30
 800622a:	2b09      	cmp	r3, #9
 800622c:	d951      	bls.n	80062d2 <_svfiprintf_r+0x16e>
 800622e:	b1c9      	cbz	r1, 8006264 <_svfiprintf_r+0x100>
 8006230:	e011      	b.n	8006256 <_svfiprintf_r+0xf2>
 8006232:	2b25      	cmp	r3, #37	; 0x25
 8006234:	d0c0      	beq.n	80061b8 <_svfiprintf_r+0x54>
 8006236:	4627      	mov	r7, r4
 8006238:	e7b9      	b.n	80061ae <_svfiprintf_r+0x4a>
 800623a:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <_svfiprintf_r+0x1d4>)
 800623c:	1a80      	subs	r0, r0, r2
 800623e:	fa0b f000 	lsl.w	r0, fp, r0
 8006242:	4318      	orrs	r0, r3
 8006244:	9004      	str	r0, [sp, #16]
 8006246:	463c      	mov	r4, r7
 8006248:	e7d3      	b.n	80061f2 <_svfiprintf_r+0x8e>
 800624a:	9a03      	ldr	r2, [sp, #12]
 800624c:	1d11      	adds	r1, r2, #4
 800624e:	6812      	ldr	r2, [r2, #0]
 8006250:	9103      	str	r1, [sp, #12]
 8006252:	2a00      	cmp	r2, #0
 8006254:	db01      	blt.n	800625a <_svfiprintf_r+0xf6>
 8006256:	9207      	str	r2, [sp, #28]
 8006258:	e004      	b.n	8006264 <_svfiprintf_r+0x100>
 800625a:	4252      	negs	r2, r2
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	9207      	str	r2, [sp, #28]
 8006262:	9304      	str	r3, [sp, #16]
 8006264:	783b      	ldrb	r3, [r7, #0]
 8006266:	2b2e      	cmp	r3, #46	; 0x2e
 8006268:	d10e      	bne.n	8006288 <_svfiprintf_r+0x124>
 800626a:	787b      	ldrb	r3, [r7, #1]
 800626c:	2b2a      	cmp	r3, #42	; 0x2a
 800626e:	f107 0101 	add.w	r1, r7, #1
 8006272:	d132      	bne.n	80062da <_svfiprintf_r+0x176>
 8006274:	9b03      	ldr	r3, [sp, #12]
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	9203      	str	r2, [sp, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	bfb8      	it	lt
 8006280:	f04f 33ff 	movlt.w	r3, #4294967295
 8006284:	3702      	adds	r7, #2
 8006286:	9305      	str	r3, [sp, #20]
 8006288:	4c2c      	ldr	r4, [pc, #176]	; (800633c <_svfiprintf_r+0x1d8>)
 800628a:	7839      	ldrb	r1, [r7, #0]
 800628c:	2203      	movs	r2, #3
 800628e:	4620      	mov	r0, r4
 8006290:	f7f9 ffb6 	bl	8000200 <memchr>
 8006294:	b138      	cbz	r0, 80062a6 <_svfiprintf_r+0x142>
 8006296:	2340      	movs	r3, #64	; 0x40
 8006298:	1b00      	subs	r0, r0, r4
 800629a:	fa03 f000 	lsl.w	r0, r3, r0
 800629e:	9b04      	ldr	r3, [sp, #16]
 80062a0:	4303      	orrs	r3, r0
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	3701      	adds	r7, #1
 80062a6:	7839      	ldrb	r1, [r7, #0]
 80062a8:	4825      	ldr	r0, [pc, #148]	; (8006340 <_svfiprintf_r+0x1dc>)
 80062aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062ae:	2206      	movs	r2, #6
 80062b0:	1c7e      	adds	r6, r7, #1
 80062b2:	f7f9 ffa5 	bl	8000200 <memchr>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d035      	beq.n	8006326 <_svfiprintf_r+0x1c2>
 80062ba:	4b22      	ldr	r3, [pc, #136]	; (8006344 <_svfiprintf_r+0x1e0>)
 80062bc:	b9fb      	cbnz	r3, 80062fe <_svfiprintf_r+0x19a>
 80062be:	9b03      	ldr	r3, [sp, #12]
 80062c0:	3307      	adds	r3, #7
 80062c2:	f023 0307 	bic.w	r3, r3, #7
 80062c6:	3308      	adds	r3, #8
 80062c8:	9303      	str	r3, [sp, #12]
 80062ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062cc:	444b      	add	r3, r9
 80062ce:	9309      	str	r3, [sp, #36]	; 0x24
 80062d0:	e76c      	b.n	80061ac <_svfiprintf_r+0x48>
 80062d2:	fb00 3202 	mla	r2, r0, r2, r3
 80062d6:	2101      	movs	r1, #1
 80062d8:	e7a3      	b.n	8006222 <_svfiprintf_r+0xbe>
 80062da:	2300      	movs	r3, #0
 80062dc:	9305      	str	r3, [sp, #20]
 80062de:	4618      	mov	r0, r3
 80062e0:	240a      	movs	r4, #10
 80062e2:	460f      	mov	r7, r1
 80062e4:	3101      	adds	r1, #1
 80062e6:	783a      	ldrb	r2, [r7, #0]
 80062e8:	3a30      	subs	r2, #48	; 0x30
 80062ea:	2a09      	cmp	r2, #9
 80062ec:	d903      	bls.n	80062f6 <_svfiprintf_r+0x192>
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ca      	beq.n	8006288 <_svfiprintf_r+0x124>
 80062f2:	9005      	str	r0, [sp, #20]
 80062f4:	e7c8      	b.n	8006288 <_svfiprintf_r+0x124>
 80062f6:	fb04 2000 	mla	r0, r4, r0, r2
 80062fa:	2301      	movs	r3, #1
 80062fc:	e7f1      	b.n	80062e2 <_svfiprintf_r+0x17e>
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	462a      	mov	r2, r5
 8006304:	4b10      	ldr	r3, [pc, #64]	; (8006348 <_svfiprintf_r+0x1e4>)
 8006306:	a904      	add	r1, sp, #16
 8006308:	4640      	mov	r0, r8
 800630a:	f3af 8000 	nop.w
 800630e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006312:	4681      	mov	r9, r0
 8006314:	d1d9      	bne.n	80062ca <_svfiprintf_r+0x166>
 8006316:	89ab      	ldrh	r3, [r5, #12]
 8006318:	065b      	lsls	r3, r3, #25
 800631a:	f53f af38 	bmi.w	800618e <_svfiprintf_r+0x2a>
 800631e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006320:	b01d      	add	sp, #116	; 0x74
 8006322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <_svfiprintf_r+0x1e4>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4640      	mov	r0, r8
 8006332:	f000 f881 	bl	8006438 <_printf_i>
 8006336:	e7ea      	b.n	800630e <_svfiprintf_r+0x1aa>
 8006338:	08006a4c 	.word	0x08006a4c
 800633c:	08006a52 	.word	0x08006a52
 8006340:	08006a56 	.word	0x08006a56
 8006344:	00000000 	.word	0x00000000
 8006348:	080060ad 	.word	0x080060ad

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4691      	mov	r9, r2
 8006352:	461f      	mov	r7, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800635c:	4293      	cmp	r3, r2
 800635e:	bfb8      	it	lt
 8006360:	4613      	movlt	r3, r2
 8006362:	f8c9 3000 	str.w	r3, [r9]
 8006366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800636a:	4606      	mov	r6, r0
 800636c:	460c      	mov	r4, r1
 800636e:	b112      	cbz	r2, 8006376 <_printf_common+0x2a>
 8006370:	3301      	adds	r3, #1
 8006372:	f8c9 3000 	str.w	r3, [r9]
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	0699      	lsls	r1, r3, #26
 800637a:	bf42      	ittt	mi
 800637c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006380:	3302      	addmi	r3, #2
 8006382:	f8c9 3000 	strmi.w	r3, [r9]
 8006386:	6825      	ldr	r5, [r4, #0]
 8006388:	f015 0506 	ands.w	r5, r5, #6
 800638c:	d107      	bne.n	800639e <_printf_common+0x52>
 800638e:	f104 0a19 	add.w	sl, r4, #25
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	f8d9 2000 	ldr.w	r2, [r9]
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	429d      	cmp	r5, r3
 800639c:	db29      	blt.n	80063f2 <_printf_common+0xa6>
 800639e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80063a2:	6822      	ldr	r2, [r4, #0]
 80063a4:	3300      	adds	r3, #0
 80063a6:	bf18      	it	ne
 80063a8:	2301      	movne	r3, #1
 80063aa:	0692      	lsls	r2, r2, #26
 80063ac:	d42e      	bmi.n	800640c <_printf_common+0xc0>
 80063ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063b2:	4639      	mov	r1, r7
 80063b4:	4630      	mov	r0, r6
 80063b6:	47c0      	blx	r8
 80063b8:	3001      	adds	r0, #1
 80063ba:	d021      	beq.n	8006400 <_printf_common+0xb4>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	68e5      	ldr	r5, [r4, #12]
 80063c0:	f8d9 2000 	ldr.w	r2, [r9]
 80063c4:	f003 0306 	and.w	r3, r3, #6
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	bf08      	it	eq
 80063cc:	1aad      	subeq	r5, r5, r2
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	6922      	ldr	r2, [r4, #16]
 80063d2:	bf0c      	ite	eq
 80063d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d8:	2500      	movne	r5, #0
 80063da:	4293      	cmp	r3, r2
 80063dc:	bfc4      	itt	gt
 80063de:	1a9b      	subgt	r3, r3, r2
 80063e0:	18ed      	addgt	r5, r5, r3
 80063e2:	f04f 0900 	mov.w	r9, #0
 80063e6:	341a      	adds	r4, #26
 80063e8:	454d      	cmp	r5, r9
 80063ea:	d11b      	bne.n	8006424 <_printf_common+0xd8>
 80063ec:	2000      	movs	r0, #0
 80063ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f2:	2301      	movs	r3, #1
 80063f4:	4652      	mov	r2, sl
 80063f6:	4639      	mov	r1, r7
 80063f8:	4630      	mov	r0, r6
 80063fa:	47c0      	blx	r8
 80063fc:	3001      	adds	r0, #1
 80063fe:	d103      	bne.n	8006408 <_printf_common+0xbc>
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006408:	3501      	adds	r5, #1
 800640a:	e7c2      	b.n	8006392 <_printf_common+0x46>
 800640c:	18e1      	adds	r1, r4, r3
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	2030      	movs	r0, #48	; 0x30
 8006412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006416:	4422      	add	r2, r4
 8006418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800641c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006420:	3302      	adds	r3, #2
 8006422:	e7c4      	b.n	80063ae <_printf_common+0x62>
 8006424:	2301      	movs	r3, #1
 8006426:	4622      	mov	r2, r4
 8006428:	4639      	mov	r1, r7
 800642a:	4630      	mov	r0, r6
 800642c:	47c0      	blx	r8
 800642e:	3001      	adds	r0, #1
 8006430:	d0e6      	beq.n	8006400 <_printf_common+0xb4>
 8006432:	f109 0901 	add.w	r9, r9, #1
 8006436:	e7d7      	b.n	80063e8 <_printf_common+0x9c>

08006438 <_printf_i>:
 8006438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800643c:	4617      	mov	r7, r2
 800643e:	7e0a      	ldrb	r2, [r1, #24]
 8006440:	b085      	sub	sp, #20
 8006442:	2a6e      	cmp	r2, #110	; 0x6e
 8006444:	4698      	mov	r8, r3
 8006446:	4606      	mov	r6, r0
 8006448:	460c      	mov	r4, r1
 800644a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800644c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006450:	f000 80bc 	beq.w	80065cc <_printf_i+0x194>
 8006454:	d81a      	bhi.n	800648c <_printf_i+0x54>
 8006456:	2a63      	cmp	r2, #99	; 0x63
 8006458:	d02e      	beq.n	80064b8 <_printf_i+0x80>
 800645a:	d80a      	bhi.n	8006472 <_printf_i+0x3a>
 800645c:	2a00      	cmp	r2, #0
 800645e:	f000 80c8 	beq.w	80065f2 <_printf_i+0x1ba>
 8006462:	2a58      	cmp	r2, #88	; 0x58
 8006464:	f000 808a 	beq.w	800657c <_printf_i+0x144>
 8006468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800646c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006470:	e02a      	b.n	80064c8 <_printf_i+0x90>
 8006472:	2a64      	cmp	r2, #100	; 0x64
 8006474:	d001      	beq.n	800647a <_printf_i+0x42>
 8006476:	2a69      	cmp	r2, #105	; 0x69
 8006478:	d1f6      	bne.n	8006468 <_printf_i+0x30>
 800647a:	6821      	ldr	r1, [r4, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006482:	d023      	beq.n	80064cc <_printf_i+0x94>
 8006484:	1d11      	adds	r1, r2, #4
 8006486:	6019      	str	r1, [r3, #0]
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	e027      	b.n	80064dc <_printf_i+0xa4>
 800648c:	2a73      	cmp	r2, #115	; 0x73
 800648e:	f000 80b4 	beq.w	80065fa <_printf_i+0x1c2>
 8006492:	d808      	bhi.n	80064a6 <_printf_i+0x6e>
 8006494:	2a6f      	cmp	r2, #111	; 0x6f
 8006496:	d02a      	beq.n	80064ee <_printf_i+0xb6>
 8006498:	2a70      	cmp	r2, #112	; 0x70
 800649a:	d1e5      	bne.n	8006468 <_printf_i+0x30>
 800649c:	680a      	ldr	r2, [r1, #0]
 800649e:	f042 0220 	orr.w	r2, r2, #32
 80064a2:	600a      	str	r2, [r1, #0]
 80064a4:	e003      	b.n	80064ae <_printf_i+0x76>
 80064a6:	2a75      	cmp	r2, #117	; 0x75
 80064a8:	d021      	beq.n	80064ee <_printf_i+0xb6>
 80064aa:	2a78      	cmp	r2, #120	; 0x78
 80064ac:	d1dc      	bne.n	8006468 <_printf_i+0x30>
 80064ae:	2278      	movs	r2, #120	; 0x78
 80064b0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80064b4:	496e      	ldr	r1, [pc, #440]	; (8006670 <_printf_i+0x238>)
 80064b6:	e064      	b.n	8006582 <_printf_i+0x14a>
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80064be:	1d11      	adds	r1, r2, #4
 80064c0:	6019      	str	r1, [r3, #0]
 80064c2:	6813      	ldr	r3, [r2, #0]
 80064c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0a3      	b.n	8006614 <_printf_i+0x1dc>
 80064cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80064d0:	f102 0104 	add.w	r1, r2, #4
 80064d4:	6019      	str	r1, [r3, #0]
 80064d6:	d0d7      	beq.n	8006488 <_printf_i+0x50>
 80064d8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da03      	bge.n	80064e8 <_printf_i+0xb0>
 80064e0:	222d      	movs	r2, #45	; 0x2d
 80064e2:	425b      	negs	r3, r3
 80064e4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80064e8:	4962      	ldr	r1, [pc, #392]	; (8006674 <_printf_i+0x23c>)
 80064ea:	220a      	movs	r2, #10
 80064ec:	e017      	b.n	800651e <_printf_i+0xe6>
 80064ee:	6820      	ldr	r0, [r4, #0]
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80064f6:	d003      	beq.n	8006500 <_printf_i+0xc8>
 80064f8:	1d08      	adds	r0, r1, #4
 80064fa:	6018      	str	r0, [r3, #0]
 80064fc:	680b      	ldr	r3, [r1, #0]
 80064fe:	e006      	b.n	800650e <_printf_i+0xd6>
 8006500:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006504:	f101 0004 	add.w	r0, r1, #4
 8006508:	6018      	str	r0, [r3, #0]
 800650a:	d0f7      	beq.n	80064fc <_printf_i+0xc4>
 800650c:	880b      	ldrh	r3, [r1, #0]
 800650e:	4959      	ldr	r1, [pc, #356]	; (8006674 <_printf_i+0x23c>)
 8006510:	2a6f      	cmp	r2, #111	; 0x6f
 8006512:	bf14      	ite	ne
 8006514:	220a      	movne	r2, #10
 8006516:	2208      	moveq	r2, #8
 8006518:	2000      	movs	r0, #0
 800651a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800651e:	6865      	ldr	r5, [r4, #4]
 8006520:	60a5      	str	r5, [r4, #8]
 8006522:	2d00      	cmp	r5, #0
 8006524:	f2c0 809c 	blt.w	8006660 <_printf_i+0x228>
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	f020 0004 	bic.w	r0, r0, #4
 800652e:	6020      	str	r0, [r4, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d13f      	bne.n	80065b4 <_printf_i+0x17c>
 8006534:	2d00      	cmp	r5, #0
 8006536:	f040 8095 	bne.w	8006664 <_printf_i+0x22c>
 800653a:	4675      	mov	r5, lr
 800653c:	2a08      	cmp	r2, #8
 800653e:	d10b      	bne.n	8006558 <_printf_i+0x120>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	07da      	lsls	r2, r3, #31
 8006544:	d508      	bpl.n	8006558 <_printf_i+0x120>
 8006546:	6923      	ldr	r3, [r4, #16]
 8006548:	6862      	ldr	r2, [r4, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	bfde      	ittt	le
 800654e:	2330      	movle	r3, #48	; 0x30
 8006550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006558:	ebae 0305 	sub.w	r3, lr, r5
 800655c:	6123      	str	r3, [r4, #16]
 800655e:	f8cd 8000 	str.w	r8, [sp]
 8006562:	463b      	mov	r3, r7
 8006564:	aa03      	add	r2, sp, #12
 8006566:	4621      	mov	r1, r4
 8006568:	4630      	mov	r0, r6
 800656a:	f7ff feef 	bl	800634c <_printf_common>
 800656e:	3001      	adds	r0, #1
 8006570:	d155      	bne.n	800661e <_printf_i+0x1e6>
 8006572:	f04f 30ff 	mov.w	r0, #4294967295
 8006576:	b005      	add	sp, #20
 8006578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800657c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006580:	493c      	ldr	r1, [pc, #240]	; (8006674 <_printf_i+0x23c>)
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	f012 0f80 	tst.w	r2, #128	; 0x80
 800658a:	f100 0504 	add.w	r5, r0, #4
 800658e:	601d      	str	r5, [r3, #0]
 8006590:	d001      	beq.n	8006596 <_printf_i+0x15e>
 8006592:	6803      	ldr	r3, [r0, #0]
 8006594:	e002      	b.n	800659c <_printf_i+0x164>
 8006596:	0655      	lsls	r5, r2, #25
 8006598:	d5fb      	bpl.n	8006592 <_printf_i+0x15a>
 800659a:	8803      	ldrh	r3, [r0, #0]
 800659c:	07d0      	lsls	r0, r2, #31
 800659e:	bf44      	itt	mi
 80065a0:	f042 0220 	orrmi.w	r2, r2, #32
 80065a4:	6022      	strmi	r2, [r4, #0]
 80065a6:	b91b      	cbnz	r3, 80065b0 <_printf_i+0x178>
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	f022 0220 	bic.w	r2, r2, #32
 80065ae:	6022      	str	r2, [r4, #0]
 80065b0:	2210      	movs	r2, #16
 80065b2:	e7b1      	b.n	8006518 <_printf_i+0xe0>
 80065b4:	4675      	mov	r5, lr
 80065b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ba:	fb02 3310 	mls	r3, r2, r0, r3
 80065be:	5ccb      	ldrb	r3, [r1, r3]
 80065c0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065c4:	4603      	mov	r3, r0
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d1f5      	bne.n	80065b6 <_printf_i+0x17e>
 80065ca:	e7b7      	b.n	800653c <_printf_i+0x104>
 80065cc:	6808      	ldr	r0, [r1, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	6949      	ldr	r1, [r1, #20]
 80065d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80065d6:	d004      	beq.n	80065e2 <_printf_i+0x1aa>
 80065d8:	1d10      	adds	r0, r2, #4
 80065da:	6018      	str	r0, [r3, #0]
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	6019      	str	r1, [r3, #0]
 80065e0:	e007      	b.n	80065f2 <_printf_i+0x1ba>
 80065e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e6:	f102 0004 	add.w	r0, r2, #4
 80065ea:	6018      	str	r0, [r3, #0]
 80065ec:	6813      	ldr	r3, [r2, #0]
 80065ee:	d0f6      	beq.n	80065de <_printf_i+0x1a6>
 80065f0:	8019      	strh	r1, [r3, #0]
 80065f2:	2300      	movs	r3, #0
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	4675      	mov	r5, lr
 80065f8:	e7b1      	b.n	800655e <_printf_i+0x126>
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	1d11      	adds	r1, r2, #4
 80065fe:	6019      	str	r1, [r3, #0]
 8006600:	6815      	ldr	r5, [r2, #0]
 8006602:	6862      	ldr	r2, [r4, #4]
 8006604:	2100      	movs	r1, #0
 8006606:	4628      	mov	r0, r5
 8006608:	f7f9 fdfa 	bl	8000200 <memchr>
 800660c:	b108      	cbz	r0, 8006612 <_printf_i+0x1da>
 800660e:	1b40      	subs	r0, r0, r5
 8006610:	6060      	str	r0, [r4, #4]
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	2300      	movs	r3, #0
 8006618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800661c:	e79f      	b.n	800655e <_printf_i+0x126>
 800661e:	6923      	ldr	r3, [r4, #16]
 8006620:	462a      	mov	r2, r5
 8006622:	4639      	mov	r1, r7
 8006624:	4630      	mov	r0, r6
 8006626:	47c0      	blx	r8
 8006628:	3001      	adds	r0, #1
 800662a:	d0a2      	beq.n	8006572 <_printf_i+0x13a>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	079b      	lsls	r3, r3, #30
 8006630:	d507      	bpl.n	8006642 <_printf_i+0x20a>
 8006632:	2500      	movs	r5, #0
 8006634:	f104 0919 	add.w	r9, r4, #25
 8006638:	68e3      	ldr	r3, [r4, #12]
 800663a:	9a03      	ldr	r2, [sp, #12]
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	429d      	cmp	r5, r3
 8006640:	db05      	blt.n	800664e <_printf_i+0x216>
 8006642:	68e0      	ldr	r0, [r4, #12]
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	4298      	cmp	r0, r3
 8006648:	bfb8      	it	lt
 800664a:	4618      	movlt	r0, r3
 800664c:	e793      	b.n	8006576 <_printf_i+0x13e>
 800664e:	2301      	movs	r3, #1
 8006650:	464a      	mov	r2, r9
 8006652:	4639      	mov	r1, r7
 8006654:	4630      	mov	r0, r6
 8006656:	47c0      	blx	r8
 8006658:	3001      	adds	r0, #1
 800665a:	d08a      	beq.n	8006572 <_printf_i+0x13a>
 800665c:	3501      	adds	r5, #1
 800665e:	e7eb      	b.n	8006638 <_printf_i+0x200>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1a7      	bne.n	80065b4 <_printf_i+0x17c>
 8006664:	780b      	ldrb	r3, [r1, #0]
 8006666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800666a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800666e:	e765      	b.n	800653c <_printf_i+0x104>
 8006670:	08006a6e 	.word	0x08006a6e
 8006674:	08006a5d 	.word	0x08006a5d

08006678 <_sbrk_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4c06      	ldr	r4, [pc, #24]	; (8006694 <_sbrk_r+0x1c>)
 800667c:	2300      	movs	r3, #0
 800667e:	4605      	mov	r5, r0
 8006680:	4608      	mov	r0, r1
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	f7ff f84c 	bl	8005720 <_sbrk>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d102      	bne.n	8006692 <_sbrk_r+0x1a>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	b103      	cbz	r3, 8006692 <_sbrk_r+0x1a>
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	2000c864 	.word	0x2000c864

08006698 <__sread>:
 8006698:	b510      	push	{r4, lr}
 800669a:	460c      	mov	r4, r1
 800669c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a0:	f000 f8e2 	bl	8006868 <_read_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	bfab      	itete	ge
 80066a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066aa:	89a3      	ldrhlt	r3, [r4, #12]
 80066ac:	181b      	addge	r3, r3, r0
 80066ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066b2:	bfac      	ite	ge
 80066b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066b6:	81a3      	strhlt	r3, [r4, #12]
 80066b8:	bd10      	pop	{r4, pc}

080066ba <__swrite>:
 80066ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066be:	461f      	mov	r7, r3
 80066c0:	898b      	ldrh	r3, [r1, #12]
 80066c2:	05db      	lsls	r3, r3, #23
 80066c4:	4605      	mov	r5, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	4616      	mov	r6, r2
 80066ca:	d505      	bpl.n	80066d8 <__swrite+0x1e>
 80066cc:	2302      	movs	r3, #2
 80066ce:	2200      	movs	r2, #0
 80066d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d4:	f000 f868 	bl	80067a8 <_lseek_r>
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066e2:	81a3      	strh	r3, [r4, #12]
 80066e4:	4632      	mov	r2, r6
 80066e6:	463b      	mov	r3, r7
 80066e8:	4628      	mov	r0, r5
 80066ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	f000 b817 	b.w	8006720 <_write_r>

080066f2 <__sseek>:
 80066f2:	b510      	push	{r4, lr}
 80066f4:	460c      	mov	r4, r1
 80066f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066fa:	f000 f855 	bl	80067a8 <_lseek_r>
 80066fe:	1c43      	adds	r3, r0, #1
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	bf15      	itete	ne
 8006704:	6560      	strne	r0, [r4, #84]	; 0x54
 8006706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800670a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800670e:	81a3      	strheq	r3, [r4, #12]
 8006710:	bf18      	it	ne
 8006712:	81a3      	strhne	r3, [r4, #12]
 8006714:	bd10      	pop	{r4, pc}

08006716 <__sclose>:
 8006716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671a:	f000 b813 	b.w	8006744 <_close_r>
	...

08006720 <_write_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4c07      	ldr	r4, [pc, #28]	; (8006740 <_write_r+0x20>)
 8006724:	4605      	mov	r5, r0
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	2200      	movs	r2, #0
 800672c:	6022      	str	r2, [r4, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f7fe ffda 	bl	80056e8 <_write>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_write_r+0x1e>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	b103      	cbz	r3, 800673e <_write_r+0x1e>
 800673c:	602b      	str	r3, [r5, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	2000c864 	.word	0x2000c864

08006744 <_close_r>:
 8006744:	b538      	push	{r3, r4, r5, lr}
 8006746:	4c06      	ldr	r4, [pc, #24]	; (8006760 <_close_r+0x1c>)
 8006748:	2300      	movs	r3, #0
 800674a:	4605      	mov	r5, r0
 800674c:	4608      	mov	r0, r1
 800674e:	6023      	str	r3, [r4, #0]
 8006750:	f7ff f812 	bl	8005778 <_close>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d102      	bne.n	800675e <_close_r+0x1a>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	b103      	cbz	r3, 800675e <_close_r+0x1a>
 800675c:	602b      	str	r3, [r5, #0]
 800675e:	bd38      	pop	{r3, r4, r5, pc}
 8006760:	2000c864 	.word	0x2000c864

08006764 <_fstat_r>:
 8006764:	b538      	push	{r3, r4, r5, lr}
 8006766:	4c07      	ldr	r4, [pc, #28]	; (8006784 <_fstat_r+0x20>)
 8006768:	2300      	movs	r3, #0
 800676a:	4605      	mov	r5, r0
 800676c:	4608      	mov	r0, r1
 800676e:	4611      	mov	r1, r2
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	f7ff f80d 	bl	8005790 <_fstat>
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	d102      	bne.n	8006780 <_fstat_r+0x1c>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	b103      	cbz	r3, 8006780 <_fstat_r+0x1c>
 800677e:	602b      	str	r3, [r5, #0]
 8006780:	bd38      	pop	{r3, r4, r5, pc}
 8006782:	bf00      	nop
 8006784:	2000c864 	.word	0x2000c864

08006788 <_isatty_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4c06      	ldr	r4, [pc, #24]	; (80067a4 <_isatty_r+0x1c>)
 800678c:	2300      	movs	r3, #0
 800678e:	4605      	mov	r5, r0
 8006790:	4608      	mov	r0, r1
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	f7ff f80c 	bl	80057b0 <_isatty>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d102      	bne.n	80067a2 <_isatty_r+0x1a>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	b103      	cbz	r3, 80067a2 <_isatty_r+0x1a>
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	bd38      	pop	{r3, r4, r5, pc}
 80067a4:	2000c864 	.word	0x2000c864

080067a8 <_lseek_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4c07      	ldr	r4, [pc, #28]	; (80067c8 <_lseek_r+0x20>)
 80067ac:	4605      	mov	r5, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7ff f805 	bl	80057c6 <_lseek>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_lseek_r+0x1e>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_lseek_r+0x1e>
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	2000c864 	.word	0x2000c864

080067cc <memcpy>:
 80067cc:	b510      	push	{r4, lr}
 80067ce:	1e43      	subs	r3, r0, #1
 80067d0:	440a      	add	r2, r1
 80067d2:	4291      	cmp	r1, r2
 80067d4:	d100      	bne.n	80067d8 <memcpy+0xc>
 80067d6:	bd10      	pop	{r4, pc}
 80067d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067e0:	e7f7      	b.n	80067d2 <memcpy+0x6>

080067e2 <memmove>:
 80067e2:	4288      	cmp	r0, r1
 80067e4:	b510      	push	{r4, lr}
 80067e6:	eb01 0302 	add.w	r3, r1, r2
 80067ea:	d803      	bhi.n	80067f4 <memmove+0x12>
 80067ec:	1e42      	subs	r2, r0, #1
 80067ee:	4299      	cmp	r1, r3
 80067f0:	d10c      	bne.n	800680c <memmove+0x2a>
 80067f2:	bd10      	pop	{r4, pc}
 80067f4:	4298      	cmp	r0, r3
 80067f6:	d2f9      	bcs.n	80067ec <memmove+0xa>
 80067f8:	1881      	adds	r1, r0, r2
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	42d3      	cmn	r3, r2
 80067fe:	d100      	bne.n	8006802 <memmove+0x20>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006806:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800680a:	e7f7      	b.n	80067fc <memmove+0x1a>
 800680c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006810:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006814:	e7eb      	b.n	80067ee <memmove+0xc>

08006816 <__malloc_lock>:
 8006816:	4770      	bx	lr

08006818 <__malloc_unlock>:
 8006818:	4770      	bx	lr

0800681a <_realloc_r>:
 800681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681c:	4607      	mov	r7, r0
 800681e:	4614      	mov	r4, r2
 8006820:	460e      	mov	r6, r1
 8006822:	b921      	cbnz	r1, 800682e <_realloc_r+0x14>
 8006824:	4611      	mov	r1, r2
 8006826:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800682a:	f7ff bbe1 	b.w	8005ff0 <_malloc_r>
 800682e:	b922      	cbnz	r2, 800683a <_realloc_r+0x20>
 8006830:	f7ff fb90 	bl	8005f54 <_free_r>
 8006834:	4625      	mov	r5, r4
 8006836:	4628      	mov	r0, r5
 8006838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683a:	f000 f827 	bl	800688c <_malloc_usable_size_r>
 800683e:	4284      	cmp	r4, r0
 8006840:	d90f      	bls.n	8006862 <_realloc_r+0x48>
 8006842:	4621      	mov	r1, r4
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff fbd3 	bl	8005ff0 <_malloc_r>
 800684a:	4605      	mov	r5, r0
 800684c:	2800      	cmp	r0, #0
 800684e:	d0f2      	beq.n	8006836 <_realloc_r+0x1c>
 8006850:	4631      	mov	r1, r6
 8006852:	4622      	mov	r2, r4
 8006854:	f7ff ffba 	bl	80067cc <memcpy>
 8006858:	4631      	mov	r1, r6
 800685a:	4638      	mov	r0, r7
 800685c:	f7ff fb7a 	bl	8005f54 <_free_r>
 8006860:	e7e9      	b.n	8006836 <_realloc_r+0x1c>
 8006862:	4635      	mov	r5, r6
 8006864:	e7e7      	b.n	8006836 <_realloc_r+0x1c>
	...

08006868 <_read_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4c07      	ldr	r4, [pc, #28]	; (8006888 <_read_r+0x20>)
 800686c:	4605      	mov	r5, r0
 800686e:	4608      	mov	r0, r1
 8006870:	4611      	mov	r1, r2
 8006872:	2200      	movs	r2, #0
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	f7fe ff19 	bl	80056ae <_read>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_read_r+0x1e>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	b103      	cbz	r3, 8006886 <_read_r+0x1e>
 8006884:	602b      	str	r3, [r5, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	2000c864 	.word	0x2000c864

0800688c <_malloc_usable_size_r>:
 800688c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006890:	2800      	cmp	r0, #0
 8006892:	f1a0 0004 	sub.w	r0, r0, #4
 8006896:	bfbc      	itt	lt
 8006898:	580b      	ldrlt	r3, [r1, r0]
 800689a:	18c0      	addlt	r0, r0, r3
 800689c:	4770      	bx	lr
	...

080068a0 <_init>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr

080068ac <_fini>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr
