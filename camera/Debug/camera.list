
camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800956c  0800956c  0001956c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096f8  080096f8  000196f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009700  08009700  00019700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000822c  20000000  08009708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002822c  2**0
                  CONTENTS
  8 .bss          00018088  2000822c  2000822c  0002822c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200202b4  200202b4  0002822c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002822c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000283b3  00000000  00000000  0002825c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004b27  00000000  00000000  0005060f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010c0  00000000  00000000  00055138  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ec8  00000000  00000000  000561f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ac65  00000000  00000000  000570c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000058a6  00000000  00000000  00061d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000675cb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004808  00000000  00000000  00067648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000822c 	.word	0x2000822c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009554 	.word	0x08009554

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20008230 	.word	0x20008230
 80001e8:	08009554 	.word	0x08009554

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <arm_q7_to_float>:

void arm_q7_to_float(
  q7_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  q7_t *pIn = pSrc;                              /* Src pointer */
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	617b      	str	r3, [r7, #20]
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	089b      	lsrs	r3, r3, #2
 8000510:	613b      	str	r3, [r7, #16]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8000512:	e04a      	b.n	80005aa <arm_q7_to_float+0xae>
  {
    /* C = (float32_t) A / 128 */
    /* convert from q7 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 128.0f);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1d1a      	adds	r2, r3, #4
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	1c51      	adds	r1, r2, #1
 800051e:	6179      	str	r1, [r7, #20]
 8000520:	f992 2000 	ldrsb.w	r2, [r2]
 8000524:	ee07 2a90 	vmov	s15, r2
 8000528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800052c:	eddf 6a32 	vldr	s13, [pc, #200]	; 80005f8 <arm_q7_to_float+0xfc>
 8000530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000534:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) * pIn++ / 128.0f);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1d1a      	adds	r2, r3, #4
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	697a      	ldr	r2, [r7, #20]
 8000540:	1c51      	adds	r1, r2, #1
 8000542:	6179      	str	r1, [r7, #20]
 8000544:	f992 2000 	ldrsb.w	r2, [r2]
 8000548:	ee07 2a90 	vmov	s15, r2
 800054c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000550:	eddf 6a29 	vldr	s13, [pc, #164]	; 80005f8 <arm_q7_to_float+0xfc>
 8000554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000558:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) * pIn++ / 128.0f);
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	1d1a      	adds	r2, r3, #4
 8000560:	60ba      	str	r2, [r7, #8]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	1c51      	adds	r1, r2, #1
 8000566:	6179      	str	r1, [r7, #20]
 8000568:	f992 2000 	ldrsb.w	r2, [r2]
 800056c:	ee07 2a90 	vmov	s15, r2
 8000570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000574:	eddf 6a20 	vldr	s13, [pc, #128]	; 80005f8 <arm_q7_to_float+0xfc>
 8000578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800057c:	edc3 7a00 	vstr	s15, [r3]
    *pDst++ = ((float32_t) * pIn++ / 128.0f);
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	1d1a      	adds	r2, r3, #4
 8000584:	60ba      	str	r2, [r7, #8]
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	1c51      	adds	r1, r2, #1
 800058a:	6179      	str	r1, [r7, #20]
 800058c:	f992 2000 	ldrsb.w	r2, [r2]
 8000590:	ee07 2a90 	vmov	s15, r2
 8000594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000598:	eddf 6a17 	vldr	s13, [pc, #92]	; 80005f8 <arm_q7_to_float+0xfc>
 800059c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005a0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80005aa:	693b      	ldr	r3, [r7, #16]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1b1      	bne.n	8000514 <arm_q7_to_float+0x18>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	613b      	str	r3, [r7, #16]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80005b8:	e014      	b.n	80005e4 <arm_q7_to_float+0xe8>
  {
    /* C = (float32_t) A / 128 */
    /* convert from q7 to float and then store the results in the destination buffer */
    *pDst++ = ((float32_t) * pIn++ / 128.0f);
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	1d1a      	adds	r2, r3, #4
 80005be:	60ba      	str	r2, [r7, #8]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	1c51      	adds	r1, r2, #1
 80005c4:	6179      	str	r1, [r7, #20]
 80005c6:	f992 2000 	ldrsb.w	r2, [r2]
 80005ca:	ee07 2a90 	vmov	s15, r2
 80005ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d2:	eddf 6a09 	vldr	s13, [pc, #36]	; 80005f8 <arm_q7_to_float+0xfc>
 80005d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005da:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  while (blkCnt > 0U)
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e7      	bne.n	80005ba <arm_q7_to_float+0xbe>
  }
}
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	43000000 	.word	0x43000000

080005fc <arm_relu_q7>:
   * Optimized relu with QSUB instructions.
   *
   */

void arm_relu_q7(q7_t * data, uint16_t size)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b08f      	sub	sp, #60	; 0x3c
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	807b      	strh	r3, [r7, #2]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    uint16_t  i = size >> 2;
 8000608:	887b      	ldrh	r3, [r7, #2]
 800060a:	089b      	lsrs	r3, r3, #2
 800060c:	86fb      	strh	r3, [r7, #54]	; 0x36
    q7_t     *pIn = data;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	613b      	str	r3, [r7, #16]
    q7_t     *pOut = data;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]
    q31_t     in;
    q31_t     buf;
    q31_t     mask;

    while (i)
 8000616:	e032      	b.n	800067e <arm_relu_q7+0x82>
    {
        in = *__SIMD32(pIn)++;
 8000618:	f107 0210 	add.w	r2, r7, #16
 800061c:	6813      	ldr	r3, [r2, #0]
 800061e:	1d19      	adds	r1, r3, #4
 8000620:	6011      	str	r1, [r2, #0]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	633b      	str	r3, [r7, #48]	; 0x30

        /* extract the first bit */
        buf = __ROR(in & 0x80808080, 7);
 8000626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000628:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	2307      	movs	r3, #7
 8000630:	617b      	str	r3, [r7, #20]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	f003 031f 	and.w	r3, r3, #31
 8000638:	617b      	str	r3, [r7, #20]
  if (op2 == 0U)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <arm_relu_q7+0x48>
  {
    return op1;
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	e003      	b.n	800064c <arm_relu_q7+0x50>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 8000644:	69ba      	ldr	r2, [r7, #24]
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	fa62 f303 	ror.w	r3, r2, r3
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* if MSB=1, mask will be 0xFF, 0x0 otherwise */
        mask = __QSUB8(0x00000000, buf);
 800064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000650:	2200      	movs	r2, #0
 8000652:	627a      	str	r2, [r7, #36]	; 0x24
 8000654:	623b      	str	r3, [r7, #32]

__STATIC_FORCEINLINE uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	6a3a      	ldr	r2, [r7, #32]
 800065a:	fac3 f312 	qsub8	r3, r3, r2
 800065e:	61fb      	str	r3, [r7, #28]
  return(result);
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28

        *__SIMD32(pOut)++ = in & (~mask);
 8000664:	f107 020c 	add.w	r2, r7, #12
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	1d19      	adds	r1, r3, #4
 800066c:	6011      	str	r1, [r2, #0]
 800066e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000670:	43d1      	mvns	r1, r2
 8000672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000674:	400a      	ands	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
        i--;
 8000678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800067a:	3b01      	subs	r3, #1
 800067c:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800067e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1c9      	bne.n	8000618 <arm_relu_q7+0x1c>
    }

    i = size & 0x3;
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	f003 0303 	and.w	r3, r3, #3
 800068a:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 800068c:	e00d      	b.n	80006aa <arm_relu_q7+0xae>
    {
        if (*pIn < 0)
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	f993 3000 	ldrsb.w	r3, [r3]
 8000694:	2b00      	cmp	r3, #0
 8000696:	da02      	bge.n	800069e <arm_relu_q7+0xa2>
        {
            *pIn = 0;
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
        }
        pIn++;
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	3301      	adds	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
        i--;
 80006a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80006a6:	3b01      	subs	r3, #1
 80006a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    while (i)
 80006aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1ee      	bne.n	800068e <arm_relu_q7+0x92>
            data[i] = 0;
    }

#endif                          /* ARM_MATH_DSP */

}
 80006b0:	bf00      	nop
 80006b2:	373c      	adds	r7, #60	; 0x3c
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <arm_convolve_HWC_q7_RGB>:
                        const uint16_t stride,
                        const q7_t * bias,
                        const uint16_t bias_shift,
                        const uint16_t out_shift,
                        q7_t * Im_out, const uint16_t dim_im_out, q15_t * bufferA, q7_t * bufferB)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0b6      	sub	sp, #216	; 0xd8
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	817b      	strh	r3, [r7, #10]
 80006ca:	4613      	mov	r3, r2
 80006cc:	813b      	strh	r3, [r7, #8]

    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */
    q15_t    *pBuffer = bufferA;
 80006ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    q7_t     *pOut = Im_out;
 80006d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80006d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    // check if number of input channels is 3
    if (ch_im_in != 3)
 80006dc:	893b      	ldrh	r3, [r7, #8]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d002      	beq.n	80006e8 <arm_convolve_HWC_q7_RGB+0x2c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 80006e2:	f06f 0302 	mvn.w	r3, #2
 80006e6:	e225      	b.n	8000b34 <arm_convolve_HWC_q7_RGB+0x478>
    }
    // This part implements the im2col function
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80006ee:	e111      	b.n	8000914 <arm_convolve_HWC_q7_RGB+0x258>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80006f6:	e0ff      	b.n	80008f8 <arm_convolve_HWC_q7_RGB+0x23c>
        {
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 80006f8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80006fc:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 8000700:	fb12 f303 	smulbb	r3, r2, r3
 8000704:	b29a      	uxth	r2, r3
 8000706:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	b29b      	uxth	r3, r3
 800070e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8000712:	e0a3      	b.n	800085c <arm_convolve_HWC_q7_RGB+0x1a0>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000714:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8000718:	f8b7 20dc 	ldrh.w	r2, [r7, #220]	; 0xdc
 800071c:	fb12 f303 	smulbb	r3, r2, r3
 8000720:	b29a      	uxth	r2, r3
 8000722:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
 800072a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800072e:	e07d      	b.n	800082c <arm_convolve_HWC_q7_RGB+0x170>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000730:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db0d      	blt.n	8000754 <arm_convolve_HWC_q7_RGB+0x98>
 8000738:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 800073c:	897b      	ldrh	r3, [r7, #10]
 800073e:	429a      	cmp	r2, r3
 8000740:	da08      	bge.n	8000754 <arm_convolve_HWC_q7_RGB+0x98>
 8000742:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000746:	2b00      	cmp	r3, #0
 8000748:	db04      	blt.n	8000754 <arm_convolve_HWC_q7_RGB+0x98>
 800074a:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 800074e:	897b      	ldrh	r3, [r7, #10]
 8000750:	429a      	cmp	r2, r3
 8000752:	db0c      	blt.n	800076e <arm_convolve_HWC_q7_RGB+0xb2>
                    {
                        /* Equivalent to arm_fill_q15(0, pBuffer, ch_im_in) with assumption: ch_im_in = 3 */
                        *__SIMD32(pBuffer) = 0x0;
 8000754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
                        *(pBuffer + 2) = 0;
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	3304      	adds	r3, #4
 8000762:	2200      	movs	r2, #0
 8000764:	801a      	strh	r2, [r3, #0]
                        pBuffer += 3;
 8000766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000768:	3306      	adds	r3, #6
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800076c:	e057      	b.n	800081e <arm_convolve_HWC_q7_RGB+0x162>
                        /* 
                         * Equivalent to:
                         *  arm_q7_to_q15_no_shift( (q7_t*)Im_in+(i_ker_y*dim_im_in+i_ker_x)*3, pBuffer, 3);
                         */

                        const q7_t *pPixel = Im_in + (i_ker_y * dim_im_in + i_ker_x) * 3;
 800076e:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000772:	897a      	ldrh	r2, [r7, #10]
 8000774:	fb02 f203 	mul.w	r2, r2, r3
 8000778:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 800077c:	441a      	add	r2, r3
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	461a      	mov	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
                        q31_t     buf = *__SIMD32(pPixel);
 800078c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

                        union arm_nnword top;
                        union arm_nnword bottom;

                        top.word = __SXTB16(buf);
 8000798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800079c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80007a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007a4:	fa2f f383 	sxtb16	r3, r3
 80007a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 80007aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
                        bottom.word = __SXTB16(__ROR(buf, 8));
 80007ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80007b6:	2308      	movs	r3, #8
 80007b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  op2 %= 32U;
 80007bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007c0:	f003 031f 	and.w	r3, r3, #31
 80007c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (op2 == 0U)
 80007c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <arm_convolve_HWC_q7_RGB+0x11a>
    return op1;
 80007d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007d4:	e005      	b.n	80007e2 <arm_convolve_HWC_q7_RGB+0x126>
  return (op1 >> op2) | (op1 << (32U - op2));
 80007d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80007da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80007de:	fa62 f303 	ror.w	r3, r2, r3
 80007e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80007e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007ea:	fa2f f383 	sxtb16	r3, r3
 80007ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 80007f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007f6:	623b      	str	r3, [r7, #32]
                         * *__SIMD32(pBuffer) = top.word;
                         * *(pBuffer+2) = bottom.half_words[0];
                         *
                         *  version 2, no weight shuffling required
                         */
                        *pBuffer++ = top.half_words[0];
 80007f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fa:	1c9a      	adds	r2, r3, #2
 80007fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80007fe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8000802:	801a      	strh	r2, [r3, #0]
                        *__SIMD32(pBuffer) = __PKHBT(bottom.word, top.word, 0);
 8000804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	b299      	uxth	r1, r3
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	041b      	lsls	r3, r3, #16
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]
                         *  version 2, no weight shuffling required
                         */
                        *pBuffer++ = bottom.half_words[0];
                        *__SIMD32(pBuffer) = __PKHTB(top.word, bottom.word, 0);
#endif
                        pBuffer += 2;
 8000818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081a:	3304      	adds	r3, #4
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 800081e:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000822:	b29b      	uxth	r3, r3
 8000824:	3301      	adds	r3, #1
 8000826:	b29b      	uxth	r3, r3
 8000828:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800082c:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 8000830:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8000834:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8000838:	fb01 f103 	mul.w	r1, r1, r3
 800083c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8000840:	1ac9      	subs	r1, r1, r3
 8000842:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000846:	440b      	add	r3, r1
 8000848:	429a      	cmp	r2, r3
 800084a:	f6ff af71 	blt.w	8000730 <arm_convolve_HWC_q7_RGB+0x74>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800084e:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000852:	b29b      	uxth	r3, r3
 8000854:	3301      	adds	r3, #1
 8000856:	b29b      	uxth	r3, r3
 8000858:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800085c:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8000860:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000864:	f8b7 10dc 	ldrh.w	r1, [r7, #220]	; 0xdc
 8000868:	fb01 f103 	mul.w	r1, r1, r3
 800086c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8000870:	1ac9      	subs	r1, r1, r3
 8000872:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000876:	440b      	add	r3, r1
 8000878:	429a      	cmp	r2, r3
 800087a:	f6ff af4b 	blt.w	8000714 <arm_convolve_HWC_q7_RGB+0x58>
                    }
                }
            }

            if (pBuffer == bufferA + 2 * 3 * dim_kernel * dim_kernel)
 800087e:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	461a      	mov	r2, r3
 800088c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000890:	fb03 f302 	mul.w	r3, r3, r2
 8000894:	461a      	mov	r2, r3
 8000896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800089a:	441a      	add	r2, r3
 800089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800089e:	429a      	cmp	r2, r3
 80008a0:	d123      	bne.n	80008ea <arm_convolve_HWC_q7_RGB+0x22e>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15(wt, bufferA,
 80008a2:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80008a6:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 80008aa:	fb12 f303 	smulbb	r3, r2, r3
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	b299      	uxth	r1, r3
                pOut =
 80008b8:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 80008bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80008c0:	9303      	str	r3, [sp, #12]
 80008c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	460b      	mov	r3, r1
 80008d6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 fe1c 	bl	8001518 <arm_nn_mat_mult_kernel_q7_q15>
 80008e0:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
                                                  ch_im_out,
                                                  3 * dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);

                /* counter reset */
                pBuffer = bufferA;
 80008e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80008ea:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	3301      	adds	r3, #1
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80008f8:	f9b7 20c4 	ldrsh.w	r2, [r7, #196]	; 0xc4
 80008fc:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 8000900:	429a      	cmp	r2, r3
 8000902:	f6ff aef9 	blt.w	80006f8 <arm_convolve_HWC_q7_RGB+0x3c>
    for (i_out_y = 0; i_out_y < dim_im_out; i_out_y++)
 8000906:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 800090a:	b29b      	uxth	r3, r3
 800090c:	3301      	adds	r3, #1
 800090e:	b29b      	uxth	r3, r3
 8000910:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8000914:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 8000918:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	; 0xf0
 800091c:	429a      	cmp	r2, r3
 800091e:	f6ff aee7 	blt.w	80006f0 <arm_convolve_HWC_q7_RGB+0x34>
            }
        }
    }

    /* left-over because odd number of output pixels */
    if (pBuffer != bufferA)
 8000922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000928:	429a      	cmp	r2, r3
 800092a:	f000 8102 	beq.w	8000b32 <arm_convolve_HWC_q7_RGB+0x476>
    {
        const q7_t *pA = wt;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800093a:	e0f3      	b.n	8000b24 <arm_convolve_HWC_q7_RGB+0x468>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 800093c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000940:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000944:	4413      	add	r3, r2
 8000946:	f993 3000 	ldrsb.w	r3, [r3]
 800094a:	461a      	mov	r2, r3
 800094c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8000950:	409a      	lsls	r2, r3
 8000952:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 8000956:	3b01      	subs	r3, #1
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	4413      	add	r3, r2
 8000960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            q15_t    *pB = bufferA;
 8000964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000968:	61fb      	str	r3, [r7, #28]
            /* basically each time it process 4 entries */
            uint16_t  colCnt = 3 * dim_kernel * dim_kernel >> 2;
 800096a:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 800096e:	4613      	mov	r3, r2
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	4413      	add	r3, r2
 8000974:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	109b      	asrs	r3, r3, #2
 800097e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

            while (colCnt)
 8000982:	e07c      	b.n	8000a7e <arm_convolve_HWC_q7_RGB+0x3c2>
 8000984:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	f107 0318 	add.w	r3, r7, #24
 800098e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	657b      	str	r3, [r7, #84]	; 0x54
 * @brief read and expand one Q7 word into two Q15 words
 */

__STATIC_FORCEINLINE void *read_and_pad(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 8000996:	f107 0210 	add.w	r2, r7, #16
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	1d19      	adds	r1, r3, #4
 800099e:	6011      	str	r1, [r2, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	653b      	str	r3, [r7, #80]	; 0x50
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 80009a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009a8:	2308      	movs	r3, #8
 80009aa:	64bb      	str	r3, [r7, #72]	; 0x48
  op2 %= 32U;
 80009ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009ae:	f003 031f 	and.w	r3, r3, #31
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (op2 == 0U)
 80009b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <arm_convolve_HWC_q7_RGB+0x302>
    return op1;
 80009ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009bc:	e003      	b.n	80009c6 <arm_convolve_HWC_q7_RGB+0x30a>
  return (op1 >> op2) | (op1 << (32U - op2));
 80009be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80009c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009c2:	fa62 f303 	ror.w	r3, r2, r3
 80009c6:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80009c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009ca:	fa2f f383 	sxtb16	r3, r3
 80009ce:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80009d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        q31_t     inAbuf2 = __SXTB16(inA);
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80009d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009da:	fa2f f383 	sxtb16	r3, r3
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80009e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 80009e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009e6:	0c1b      	lsrs	r3, r3, #16
 80009e8:	041b      	lsls	r3, r3, #16
 80009ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009ec:	0c12      	lsrs	r2, r2, #16
 80009ee:	4313      	orrs	r3, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009f4:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 80009f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009fc:	041b      	lsls	r3, r3, #16
 80009fe:	4313      	orrs	r3, r2
 8000a00:	461a      	mov	r2, r3
 8000a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a04:	601a      	str	r2, [r3, #0]
#else
        *out1 = __PKHTB(inAbuf1, inAbuf2, 16);
        *out2 = __PKHBT(inAbuf2, inAbuf1, 16);
#endif

        return source;
 8000a06:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad((void *)pA, &inA1, &inA2);
 8000a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

                inB1 = *__SIMD32(pB)++;
 8000a0c:	f107 021c 	add.w	r2, r7, #28
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	1d19      	adds	r1, r3, #4
 8000a14:	6011      	str	r1, [r2, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                sum = __SMLAD(inA1, inB1, sum);
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a28:	66b9      	str	r1, [r7, #104]	; 0x68
 8000a2a:	667a      	str	r2, [r7, #100]	; 0x64
 8000a2c:	663b      	str	r3, [r7, #96]	; 0x60

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000a32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a34:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8000a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                inB2 = *__SIMD32(pB)++;
 8000a40:	f107 021c 	add.w	r2, r7, #28
 8000a44:	6813      	ldr	r3, [r2, #0]
 8000a46:	1d19      	adds	r1, r3, #4
 8000a48:	6011      	str	r1, [r2, #0]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                sum = __SMLAD(inA2, inB2, sum);
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	4619      	mov	r1, r3
 8000a54:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000a58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a5c:	67b9      	str	r1, [r7, #120]	; 0x78
 8000a5e:	677a      	str	r2, [r7, #116]	; 0x74
 8000a60:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a66:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a68:	fb23 1302 	smlad	r3, r3, r2, r1
 8000a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8000a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                colCnt--;
 8000a74:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8000a7e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f47f af7e 	bne.w	8000984 <arm_convolve_HWC_q7_RGB+0x2c8>
            }
            colCnt = 3 * dim_kernel * dim_kernel & 0x3;
 8000a88:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 8000a8c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000a90:	fb12 f303 	smulbb	r3, r2, r3
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	0052      	lsls	r2, r2, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	f003 0303 	and.w	r3, r3, #3
 8000aa2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8000aa6:	e01d      	b.n	8000ae4 <arm_convolve_HWC_q7_RGB+0x428>
            {
                q7_t      inA1 = *pA++;
 8000aa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                q15_t     inB1 = *pB++;
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	1c9a      	adds	r2, r3, #2
 8000abc:	61fa      	str	r2, [r7, #28]
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                sum += inA1 * inB1;
 8000ac4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8000ac8:	f9b7 209c 	ldrsh.w	r2, [r7, #156]	; 0x9c
 8000acc:	fb02 f303 	mul.w	r3, r2, r3
 8000ad0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000ad4:	4413      	add	r3, r2
 8000ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                colCnt--;
 8000ada:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
            while (colCnt)
 8000ae4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1dd      	bne.n	8000aa8 <arm_convolve_HWC_q7_RGB+0x3ec>
            }
            *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8000aec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000af6:	f8b7 20e8 	ldrh.w	r2, [r7, #232]	; 0xe8
 8000afa:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000afe:	fa41 f202 	asr.w	r2, r1, r2
 8000b02:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8000b06:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000b0a:	f302 0207 	ssat	r2, #8, r2
 8000b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000b16:	b252      	sxtb	r2, r2
 8000b18:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < ch_im_out; i++)
 8000b1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000b24:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8000b28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	f73f af05 	bgt.w	800093c <arm_convolve_HWC_q7_RGB+0x280>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return (ARM_MATH_SUCCESS);
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	37c8      	adds	r7, #200	; 0xc8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <arm_convolve_HWC_q7_fast>:
                         const uint16_t out_shift,
                         q7_t * Im_out, 
                         const uint16_t dim_im_out, 
                         q15_t * bufferA, 
                         q7_t * bufferB)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0aa      	sub	sp, #168	; 0xa8
 8000b40:	af04      	add	r7, sp, #16
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	460b      	mov	r3, r1
 8000b48:	817b      	strh	r3, [r7, #10]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	813b      	strh	r3, [r7, #8]
    /*
     *  Here we use bufferA as q15_t internally as computation are done with q15_t level
     *  im2col are done to output in q15_t format from q7_t input
     */

    q15_t    *pBuffer = bufferA;
 8000b4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q7_t     *pOut = Im_out;
 8000b56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (ch_im_in % 4 != 0 || ch_im_out % 2 != 0)
 8000b5e:	893b      	ldrh	r3, [r7, #8]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <arm_convolve_HWC_q7_fast+0x3c>
 8000b6a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <arm_convolve_HWC_q7_fast+0x44>
    {
        /* check if the input dimension meets the constraints */
        return ARM_MATH_SIZE_MISMATCH;
 8000b78:	f06f 0302 	mvn.w	r3, #2
 8000b7c:	f000 bcc8 	b.w	8001510 <arm_convolve_HWC_q7_fast+0x9d4>
     * Middle: i_out_y from padding to dim_im_out-padding-1
     * Bottom: i_out_y from dim_im_out-padding to dim_im_out-1
     */

    /* top part */
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000b86:	e0cf      	b.n	8000d28 <arm_convolve_HWC_q7_fast+0x1ec>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000b8e:	e0bd      	b.n	8000d0c <arm_convolve_HWC_q7_fast+0x1d0>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000b90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000b94:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000b98:	fb12 f303 	smulbb	r3, r2, r3
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000baa:	e061      	b.n	8000c70 <arm_convolve_HWC_q7_fast+0x134>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000bac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000bb0:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000bb4:	fb12 f303 	smulbb	r3, r2, r3
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000bc6:	e03c      	b.n	8000c42 <arm_convolve_HWC_q7_fast+0x106>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000bc8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0d      	blt.n	8000bec <arm_convolve_HWC_q7_fast+0xb0>
 8000bd0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000bd4:	897b      	ldrh	r3, [r7, #10]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	da08      	bge.n	8000bec <arm_convolve_HWC_q7_fast+0xb0>
 8000bda:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db04      	blt.n	8000bec <arm_convolve_HWC_q7_fast+0xb0>
 8000be2:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000be6:	897b      	ldrh	r3, [r7, #10]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	db08      	blt.n	8000bfe <arm_convolve_HWC_q7_fast+0xc2>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000bec:	893b      	ldrh	r3, [r7, #8]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000bf8:	f008 f836 	bl	8008c68 <memset>
 8000bfc:	e013      	b.n	8000c26 <arm_convolve_HWC_q7_fast+0xea>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000bfe:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000c02:	897a      	ldrh	r2, [r7, #10]
 8000c04:	fb02 f203 	mul.w	r2, r2, r3
 8000c08:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000c0c:	4413      	add	r3, r2
 8000c0e:	893a      	ldrh	r2, [r7, #8]
 8000c10:	fb02 f303 	mul.w	r3, r2, r3
 8000c14:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	893a      	ldrh	r2, [r7, #8]
 8000c1c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fa19 	bl	8003058 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000c26:	893b      	ldrh	r3, [r7, #8]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000c2e:	4413      	add	r3, r2
 8000c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000c34:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000c42:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000c46:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000c4a:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000c4e:	fb01 f103 	mul.w	r1, r1, r3
 8000c52:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c56:	1ac9      	subs	r1, r1, r3
 8000c58:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000c5c:	440b      	add	r3, r1
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbb2      	blt.n	8000bc8 <arm_convolve_HWC_q7_fast+0x8c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000c62:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000c70:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000c74:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000c78:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000c7c:	fb01 f103 	mul.w	r1, r1, r3
 8000c80:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000c84:	1ac9      	subs	r1, r1, r3
 8000c86:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000c8a:	440b      	add	r3, r1
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	db8d      	blt.n	8000bac <arm_convolve_HWC_q7_fast+0x70>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000c90:	893b      	ldrh	r3, [r7, #8]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000caa:	441a      	add	r2, r3
 8000cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d124      	bne.n	8000cfe <arm_convolve_HWC_q7_fast+0x1c2>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000cb4:	893a      	ldrh	r2, [r7, #8]
 8000cb6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000cba:	fb12 f303 	smulbb	r3, r2, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000cc4:	fb12 f303 	smulbb	r3, r2, r3
 8000cc8:	b299      	uxth	r1, r3
                pOut =
 8000cca:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f001 f980 	bl	8001ff2 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000cf2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8000cfe:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	3301      	adds	r3, #1
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000d0c:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000d10:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f6ff af3b 	blt.w	8000b90 <arm_convolve_HWC_q7_fast+0x54>
    for (i_out_y = 0; i_out_y < padding; i_out_y++)
 8000d1a:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	3301      	adds	r3, #1
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8000d28:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8000d2c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f6ff af29 	blt.w	8000b88 <arm_convolve_HWC_q7_fast+0x4c>
            }
        }
    }

    /* middle part, here we also divide the x into left, mid and right */
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 8000d36:	e21b      	b.n	8001170 <arm_convolve_HWC_q7_fast+0x634>
    {

        /* left part */
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000d3e:	e0b4      	b.n	8000eaa <arm_convolve_HWC_q7_fast+0x36e>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000d40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000d44:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000d48:	fb12 f303 	smulbb	r3, r2, r3
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000d5a:	e058      	b.n	8000e0e <arm_convolve_HWC_q7_fast+0x2d2>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000d5c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8000d60:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000d64:	fb12 f303 	smulbb	r3, r2, r3
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000d76:	e033      	b.n	8000de0 <arm_convolve_HWC_q7_fast+0x2a4>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8000d78:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db04      	blt.n	8000d8a <arm_convolve_HWC_q7_fast+0x24e>
 8000d80:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000d84:	897b      	ldrh	r3, [r7, #10]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	db08      	blt.n	8000d9c <arm_convolve_HWC_q7_fast+0x260>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8000d8a:	893b      	ldrh	r3, [r7, #8]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d96:	f007 ff67 	bl	8008c68 <memset>
 8000d9a:	e013      	b.n	8000dc4 <arm_convolve_HWC_q7_fast+0x288>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8000d9c:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000da0:	897a      	ldrh	r2, [r7, #10]
 8000da2:	fb02 f203 	mul.w	r2, r2, r3
 8000da6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000daa:	4413      	add	r3, r2
 8000dac:	893a      	ldrh	r2, [r7, #8]
 8000dae:	fb02 f303 	mul.w	r3, r2, r3
 8000db2:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	893a      	ldrh	r2, [r7, #8]
 8000dba:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 f94a 	bl	8003058 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8000dc4:	893b      	ldrh	r3, [r7, #8]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000dcc:	4413      	add	r3, r2
 8000dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8000dd2:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000de0:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8000de4:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000de8:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000dec:	fb01 f103 	mul.w	r1, r1, r3
 8000df0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000df4:	1ac9      	subs	r1, r1, r3
 8000df6:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000dfa:	440b      	add	r3, r1
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	dbbb      	blt.n	8000d78 <arm_convolve_HWC_q7_fast+0x23c>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000e00:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000e0e:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000e12:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000e16:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000e1a:	fb01 f103 	mul.w	r1, r1, r3
 8000e1e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e28:	440b      	add	r3, r1
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	db96      	blt.n	8000d5c <arm_convolve_HWC_q7_fast+0x220>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000e2e:	893b      	ldrh	r3, [r7, #8]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e3e:	fb02 f303 	mul.w	r3, r2, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e48:	441a      	add	r2, r3
 8000e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d124      	bne.n	8000e9c <arm_convolve_HWC_q7_fast+0x360>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000e52:	893a      	ldrh	r2, [r7, #8]
 8000e54:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e58:	fb12 f303 	smulbb	r3, r2, r3
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000e62:	fb12 f303 	smulbb	r3, r2, r3
 8000e66:	b299      	uxth	r1, r3
                pOut =
 8000e68:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	460b      	mov	r3, r1
 8000e86:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f001 f8b1 	bl	8001ff2 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000e90:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < padding; i_out_x++)
 8000e9c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000eaa:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000eae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	f6ff af44 	blt.w	8000d40 <arm_convolve_HWC_q7_fast+0x204>
            }
        }

        /* mid part */
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8000eb8:	e08c      	b.n	8000fd4 <arm_convolve_HWC_q7_fast+0x498>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000eba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000ebe:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ec2:	fb12 f303 	smulbb	r3, r2, r3
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000ed4:	e030      	b.n	8000f38 <arm_convolve_HWC_q7_fast+0x3fc>
            {
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
                                                 +
                                                 (i_ker_y *
 8000ed6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000eda:	897a      	ldrh	r2, [r7, #10]
 8000edc:	fb02 f203 	mul.w	r2, r2, r3
                                                  dim_im_in +
                                                  i_out_x *
 8000ee0:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000ee4:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
                                                  dim_im_in +
 8000eec:	441a      	add	r2, r3
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8000eee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	893a      	ldrh	r2, [r7, #8]
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	461a      	mov	r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1898      	adds	r0, r3, r2
                                                  stride - padding) * ch_im_in, pBuffer, ch_im_in * dim_kernel);
 8000f00:	893b      	ldrh	r3, [r7, #8]
 8000f02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
                arm_q7_to_q15_reordered_no_shift((q7_t *) Im_in
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000f10:	f002 f8a2 	bl	8003058 <arm_q7_to_q15_reordered_no_shift>
                pBuffer += ch_im_in * dim_kernel;
 8000f14:	893b      	ldrh	r3, [r7, #8]
 8000f16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000f24:	4413      	add	r3, r2
 8000f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000f2a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8000f38:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8000f3c:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8000f40:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8000f44:	fb01 f103 	mul.w	r1, r1, r3
 8000f48:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000f4c:	1ac9      	subs	r1, r1, r3
 8000f4e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000f52:	440b      	add	r3, r1
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbbe      	blt.n	8000ed6 <arm_convolve_HWC_q7_fast+0x39a>
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 8000f58:	893b      	ldrh	r3, [r7, #8]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f60:	fb02 f303 	mul.w	r3, r2, r3
 8000f64:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000f72:	441a      	add	r2, r3
 8000f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d124      	bne.n	8000fc6 <arm_convolve_HWC_q7_fast+0x48a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 8000f7c:	893a      	ldrh	r2, [r7, #8]
 8000f7e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000f82:	fb12 f303 	smulbb	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8000f8c:	fb12 f303 	smulbb	r3, r2, r3
 8000f90:	b299      	uxth	r1, r3
                pOut =
 8000f92:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000f9a:	9303      	str	r3, [sp, #12]
 8000f9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000fa0:	9302      	str	r3, [sp, #8]
 8000fa2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f001 f81c 	bl	8001ff2 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8000fba:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 8000fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out - padding; i_out_x++)
 8000fc6:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8000fd4:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8000fd8:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8000fdc:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000fe0:	1acb      	subs	r3, r1, r3
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	f6ff af69 	blt.w	8000eba <arm_convolve_HWC_q7_fast+0x37e>
            }
        }

        /* right part */
        for (; i_out_x < dim_im_out; i_out_x++)
 8000fe8:	e0b4      	b.n	8001154 <arm_convolve_HWC_q7_fast+0x618>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8000fea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8000fee:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8000ff2:	fb12 f303 	smulbb	r3, r2, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8001004:	e058      	b.n	80010b8 <arm_convolve_HWC_q7_fast+0x57c>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8001006:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800100a:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800100e:	fb12 f303 	smulbb	r3, r2, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001020:	e033      	b.n	800108a <arm_convolve_HWC_q7_fast+0x54e>
                {
                    if (i_ker_x < 0 || i_ker_x >= dim_im_in)
 8001022:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001026:	2b00      	cmp	r3, #0
 8001028:	db04      	blt.n	8001034 <arm_convolve_HWC_q7_fast+0x4f8>
 800102a:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800102e:	897b      	ldrh	r3, [r7, #10]
 8001030:	429a      	cmp	r2, r3
 8001032:	db08      	blt.n	8001046 <arm_convolve_HWC_q7_fast+0x50a>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 8001034:	893b      	ldrh	r3, [r7, #8]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	461a      	mov	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001040:	f007 fe12 	bl	8008c68 <memset>
 8001044:	e013      	b.n	800106e <arm_convolve_HWC_q7_fast+0x532>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 8001046:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 800104a:	897a      	ldrh	r2, [r7, #10]
 800104c:	fb02 f203 	mul.w	r2, r2, r3
 8001050:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001054:	4413      	add	r3, r2
 8001056:	893a      	ldrh	r2, [r7, #8]
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4413      	add	r3, r2
 8001062:	893a      	ldrh	r2, [r7, #8]
 8001064:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fff5 	bl	8003058 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 800106e:	893b      	ldrh	r3, [r7, #8]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001076:	4413      	add	r3, r2
 8001078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 800107c:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001080:	b29b      	uxth	r3, r3
 8001082:	3301      	adds	r3, #1
 8001084:	b29b      	uxth	r3, r3
 8001086:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800108a:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 800108e:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001092:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8001096:	fb01 f103 	mul.w	r1, r1, r3
 800109a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80010a4:	440b      	add	r3, r1
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbbb      	blt.n	8001022 <arm_convolve_HWC_q7_fast+0x4e6>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 80010aa:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	3301      	adds	r3, #1
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80010b8:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80010bc:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 80010c0:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80010c4:	fb01 f103 	mul.w	r1, r1, r3
 80010c8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80010cc:	1ac9      	subs	r1, r1, r3
 80010ce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80010d2:	440b      	add	r3, r1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	db96      	blt.n	8001006 <arm_convolve_HWC_q7_fast+0x4ca>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 80010d8:	893b      	ldrh	r3, [r7, #8]
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80010f2:	441a      	add	r2, r3
 80010f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d124      	bne.n	8001146 <arm_convolve_HWC_q7_fast+0x60a>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 80010fc:	893a      	ldrh	r2, [r7, #8]
 80010fe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001102:	fb12 f303 	smulbb	r3, r2, r3
 8001106:	b29b      	uxth	r3, r3
 8001108:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800110c:	fb12 f303 	smulbb	r3, r2, r3
 8001110:	b299      	uxth	r1, r3
                pOut =
 8001112:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8001116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800111a:	9303      	str	r3, [sp, #12]
 800111c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	460b      	mov	r3, r1
 8001130:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 ff5c 	bl	8001ff2 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 800113a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 800113e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (; i_out_x < dim_im_out; i_out_x++)
 8001146:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 800114a:	b29b      	uxth	r3, r3
 800114c:	3301      	adds	r3, #1
 800114e:	b29b      	uxth	r3, r3
 8001150:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001154:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 8001158:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800115c:	429a      	cmp	r2, r3
 800115e:	f6ff af44 	blt.w	8000fea <arm_convolve_HWC_q7_fast+0x4ae>
    for (; i_out_y < dim_im_out - padding; i_out_y++)
 8001162:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001166:	b29b      	uxth	r3, r3
 8001168:	3301      	adds	r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001170:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 8001174:	f8b7 10c0 	ldrh.w	r1, [r7, #192]	; 0xc0
 8001178:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800117c:	1acb      	subs	r3, r1, r3
 800117e:	429a      	cmp	r2, r3
 8001180:	f6ff adda 	blt.w	8000d38 <arm_convolve_HWC_q7_fast+0x1fc>
            }
        }
    }

    for (; i_out_y < dim_im_out; i_out_y++)
 8001184:	e0cf      	b.n	8001326 <arm_convolve_HWC_q7_fast+0x7ea>
    {
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 8001186:	2300      	movs	r3, #0
 8001188:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800118c:	e0bd      	b.n	800130a <arm_convolve_HWC_q7_fast+0x7ce>
        {
            /* This part implements the im2col function */
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 800118e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001192:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 8001196:	fb12 f303 	smulbb	r3, r2, r3
 800119a:	b29a      	uxth	r2, r3
 800119c:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80011a8:	e061      	b.n	800126e <arm_convolve_HWC_q7_fast+0x732>
            {
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 80011aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80011ae:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 80011b2:	fb12 f303 	smulbb	r3, r2, r3
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80011c4:	e03c      	b.n	8001240 <arm_convolve_HWC_q7_fast+0x704>
                {
                    if (i_ker_y < 0 || i_ker_y >= dim_im_in || i_ker_x < 0 || i_ker_x >= dim_im_in)
 80011c6:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0d      	blt.n	80011ea <arm_convolve_HWC_q7_fast+0x6ae>
 80011ce:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 80011d2:	897b      	ldrh	r3, [r7, #10]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	da08      	bge.n	80011ea <arm_convolve_HWC_q7_fast+0x6ae>
 80011d8:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db04      	blt.n	80011ea <arm_convolve_HWC_q7_fast+0x6ae>
 80011e0:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	db08      	blt.n	80011fc <arm_convolve_HWC_q7_fast+0x6c0>
                    {
                        /* arm_fill_q15(0, pBuffer, ch_im_in); */
                        memset(pBuffer, 0, sizeof(q15_t)*ch_im_in);
 80011ea:	893b      	ldrh	r3, [r7, #8]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	461a      	mov	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80011f6:	f007 fd37 	bl	8008c68 <memset>
 80011fa:	e013      	b.n	8001224 <arm_convolve_HWC_q7_fast+0x6e8>
                    } else
                    {
                        arm_q7_to_q15_reordered_no_shift
                            ((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in);
 80011fc:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001200:	897a      	ldrh	r2, [r7, #10]
 8001202:	fb02 f203 	mul.w	r2, r2, r3
 8001206:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 800120a:	4413      	add	r3, r2
 800120c:	893a      	ldrh	r2, [r7, #8]
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	461a      	mov	r2, r3
                        arm_q7_to_q15_reordered_no_shift
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	893a      	ldrh	r2, [r7, #8]
 800121a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ff1a 	bl	8003058 <arm_q7_to_q15_reordered_no_shift>
                    }
                    pBuffer += ch_im_in;
 8001224:	893b      	ldrh	r3, [r7, #8]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800122c:	4413      	add	r3, r2
 800122e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                for (i_ker_x = i_out_x * stride - padding; i_ker_x < i_out_x * stride - padding + dim_kernel; i_ker_x++)
 8001232:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
 8001236:	b29b      	uxth	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8001240:	f9b7 2090 	ldrsh.w	r2, [r7, #144]	; 0x90
 8001244:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001248:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800124c:	fb01 f103 	mul.w	r1, r1, r3
 8001250:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001254:	1ac9      	subs	r1, r1, r3
 8001256:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800125a:	440b      	add	r3, r1
 800125c:	429a      	cmp	r2, r3
 800125e:	dbb2      	blt.n	80011c6 <arm_convolve_HWC_q7_fast+0x68a>
            for (i_ker_y = i_out_y * stride - padding; i_ker_y < i_out_y * stride - padding + dim_kernel; i_ker_y++)
 8001260:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
 8001264:	b29b      	uxth	r3, r3
 8001266:	3301      	adds	r3, #1
 8001268:	b29b      	uxth	r3, r3
 800126a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800126e:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
 8001272:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 8001276:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 800127a:	fb01 f103 	mul.w	r1, r1, r3
 800127e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8001282:	1ac9      	subs	r1, r1, r3
 8001284:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001288:	440b      	add	r3, r1
 800128a:	429a      	cmp	r2, r3
 800128c:	db8d      	blt.n	80011aa <arm_convolve_HWC_q7_fast+0x66e>
                }
            }

            if (pBuffer == bufferA + 2 * ch_im_in * dim_kernel * dim_kernel)
 800128e:	893b      	ldrh	r3, [r7, #8]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8001296:	fb02 f303 	mul.w	r3, r2, r3
 800129a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012a8:	441a      	add	r2, r3
 80012aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d124      	bne.n	80012fc <arm_convolve_HWC_q7_fast+0x7c0>
            {
                pOut =
                    arm_nn_mat_mult_kernel_q7_q15_reordered(wt,
 80012b2:	893a      	ldrh	r2, [r7, #8]
 80012b4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80012b8:	fb12 f303 	smulbb	r3, r2, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80012c2:	fb12 f303 	smulbb	r3, r2, r3
 80012c6:	b299      	uxth	r1, r3
                pOut =
 80012c8:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80012cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80012d0:	9303      	str	r3, [sp, #12]
 80012d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	460b      	mov	r3, r1
 80012e6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fe81 	bl	8001ff2 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80012f0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                                                            ch_im_out,
                                                            ch_im_in
                                                            *
                                                            dim_kernel * dim_kernel, bias_shift, out_shift, bias, pOut);
                /* counter reset */
                pBuffer = bufferA;
 80012f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80012f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        for (i_out_x = 0; i_out_x < dim_im_out; i_out_x++)
 80012fc:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	; 0x94
 8001300:	b29b      	uxth	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	b29b      	uxth	r3, r3
 8001306:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800130a:	f9b7 2094 	ldrsh.w	r2, [r7, #148]	; 0x94
 800130e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001312:	429a      	cmp	r2, r3
 8001314:	f6ff af3b 	blt.w	800118e <arm_convolve_HWC_q7_fast+0x652>
    for (; i_out_y < dim_im_out; i_out_y++)
 8001318:	f9b7 3096 	ldrsh.w	r3, [r7, #150]	; 0x96
 800131c:	b29b      	uxth	r3, r3
 800131e:	3301      	adds	r3, #1
 8001320:	b29b      	uxth	r3, r3
 8001322:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8001326:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	; 0x96
 800132a:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800132e:	429a      	cmp	r2, r3
 8001330:	f6ff af29 	blt.w	8001186 <arm_convolve_HWC_q7_fast+0x64a>
            }
        }
    }

    /* check if there is left-over for compute */
    if (pBuffer != bufferA)
 8001334:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800133c:	429a      	cmp	r2, r3
 800133e:	f000 80e6 	beq.w	800150e <arm_convolve_HWC_q7_fast+0x9d2>
    {
        const q7_t *pA = wt;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        int       i;

        for (i = 0; i < ch_im_out; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800134e:	e0d7      	b.n	8001500 <arm_convolve_HWC_q7_fast+0x9c4>
        {
            q31_t     sum = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8001350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001354:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001358:	4413      	add	r3, r2
 800135a:	f993 3000 	ldrsb.w	r3, [r3]
 800135e:	461a      	mov	r2, r3
 8001360:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001364:	409a      	lsls	r2, r3
 8001366:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800136a:	3b01      	subs	r3, #1
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	67fb      	str	r3, [r7, #124]	; 0x7c
            q15_t    *pB = bufferA;
 8001376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800137a:	61fb      	str	r3, [r7, #28]
            /* each time it process 4 entries */
            uint16_t  colCnt = ch_im_in * dim_kernel * dim_kernel >> 2;
 800137c:	893b      	ldrh	r3, [r7, #8]
 800137e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	109b      	asrs	r3, r3, #2
 8001390:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

            while (colCnt)
 8001394:	e067      	b.n	8001466 <arm_convolve_HWC_q7_fast+0x92a>
 8001396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	643b      	str	r3, [r7, #64]	; 0x40
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 * @brief read and expand one Q7 word into two Q15 words with reordering
 */

__STATIC_FORCEINLINE void *read_and_pad_reordered(void *source, q31_t * out1, q31_t * out2)
{
        q31_t     inA = *__SIMD32(source)++;
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	1d19      	adds	r1, r3, #4
 80013b0:	6011      	str	r1, [r2, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef ARM_MATH_BIG_ENDIAN
        *out2 = __SXTB16(__ROR(inA, 8));
 80013b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
 80013ba:	2308      	movs	r3, #8
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 80013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <arm_convolve_HWC_q7_fast+0x894>
    return op1;
 80013cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ce:	e003      	b.n	80013d8 <arm_convolve_HWC_q7_fast+0x89c>
  return (op1 >> op2) | (op1 << (32U - op2));
 80013d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d4:	fa62 f303 	ror.w	r3, r2, r3
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	fa2f f383 	sxtb16	r3, r3
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	461a      	mov	r2, r3
 80013e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013e8:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80013ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	fa2f f383 	sxtb16	r3, r3
 80013f4:	623b      	str	r3, [r7, #32]
  return(result);
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	461a      	mov	r2, r3
 80013fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013fc:	601a      	str	r2, [r3, #0]
#else
        *out1 = __SXTB16(__ROR(inA, 8));
        *out2 = __SXTB16(inA);
#endif

        return source;
 80013fe:	693b      	ldr	r3, [r7, #16]
            {

                q31_t     inA1, inA2;
                q31_t     inB1, inB2;

                pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA1, &inA2);
 8001400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                inB1 = *__SIMD32(pB)++;
 8001404:	f107 021c 	add.w	r2, r7, #28
 8001408:	6813      	ldr	r3, [r2, #0]
 800140a:	1d19      	adds	r1, r3, #4
 800140c:	6011      	str	r1, [r2, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	677b      	str	r3, [r7, #116]	; 0x74
                sum = __SMLAD(inA1, inB1, sum);
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4619      	mov	r1, r3
 8001416:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800141a:	6539      	str	r1, [r7, #80]	; 0x50
 800141c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001424:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001426:	fb23 1302 	smlad	r3, r3, r2, r1
 800142a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800142c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800142e:	67fb      	str	r3, [r7, #124]	; 0x7c
                inB2 = *__SIMD32(pB)++;
 8001430:	f107 021c 	add.w	r2, r7, #28
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	1d19      	adds	r1, r3, #4
 8001438:	6011      	str	r1, [r2, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	673b      	str	r3, [r7, #112]	; 0x70
                sum = __SMLAD(inA2, inB2, sum);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4619      	mov	r1, r3
 8001442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001446:	6639      	str	r1, [r7, #96]	; 0x60
 8001448:	65fa      	str	r2, [r7, #92]	; 0x5c
 800144a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800144c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800144e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001450:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001452:	fb23 1302 	smlad	r3, r3, r2, r1
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145a:	67fb      	str	r3, [r7, #124]	; 0x7c

                colCnt--;
 800145c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001460:	3b01      	subs	r3, #1
 8001462:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 8001466:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800146a:	2b00      	cmp	r3, #0
 800146c:	d193      	bne.n	8001396 <arm_convolve_HWC_q7_fast+0x85a>
            }
            colCnt = ch_im_in * dim_kernel * dim_kernel & 0x3;
 800146e:	893a      	ldrh	r2, [r7, #8]
 8001470:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001474:	fb12 f303 	smulbb	r3, r2, r3
 8001478:	b29b      	uxth	r3, r3
 800147a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800147e:	fb12 f303 	smulbb	r3, r2, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 800148c:	e01b      	b.n	80014c6 <arm_convolve_HWC_q7_fast+0x98a>
            {
                q7_t      inA1 = *pA++;
 800148e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                q15_t     inB1 = *pB++;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	1c9a      	adds	r2, r3, #2
 80014a2:	61fa      	str	r2, [r7, #28]
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
                sum += inA1 * inB1;
 80014aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80014ae:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80014b8:	4413      	add	r3, r2
 80014ba:	67fb      	str	r3, [r7, #124]	; 0x7c
                colCnt--;
 80014bc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80014c0:	3b01      	subs	r3, #1
 80014c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
            while (colCnt)
 80014c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1df      	bne.n	800148e <arm_convolve_HWC_q7_fast+0x952>
            }
            *pOut = (q7_t) __SSAT((sum >> out_shift), 8);
 80014ce:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80014d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80014d4:	fa42 f303 	asr.w	r3, r2, r3
 80014d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80014da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014dc:	f303 0307 	ssat	r3, #8, r3
 80014e0:	667b      	str	r3, [r7, #100]	; 0x64
 80014e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014ea:	701a      	strb	r2, [r3, #0]
            pOut++;
 80014ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014f0:	3301      	adds	r3, #1
 80014f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (i = 0; i < ch_im_out; i++)
 80014f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014fa:	3301      	adds	r3, #1
 80014fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001500:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8001504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001508:	429a      	cmp	r2, r3
 800150a:	f73f af21 	bgt.w	8001350 <arm_convolve_HWC_q7_fast+0x814>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3798      	adds	r7, #152	; 0x98
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <arm_nn_mat_mult_kernel_q7_q15>:
                                        const uint16_t numCol_A,
                                        const uint16_t bias_shift,
                                        const uint16_t out_shift, 
                                        const q7_t * bias, 
                                        q7_t * pOut)
{
 8001518:	b490      	push	{r4, r7}
 800151a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800151e:	af00      	add	r7, sp, #0
 8001520:	f107 040c 	add.w	r4, r7, #12
 8001524:	6020      	str	r0, [r4, #0]
 8001526:	f107 0008 	add.w	r0, r7, #8
 800152a:	6001      	str	r1, [r0, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	1dbb      	adds	r3, r7, #6
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	460a      	mov	r2, r1
 8001536:	801a      	strh	r2, [r3, #0]
#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8001538:	1dbb      	adds	r3, r7, #6
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001540:	4413      	add	r3, r2
 8001542:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    const q7_t *pBias = bias;
 8001546:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800154a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    uint16_t  rowCnt = ch_im_out >> 1;
 800154e:	1dbb      	adds	r3, r7, #6
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    /* this loop over rows in A */
    while (rowCnt)
 8001558:	e345      	b.n	8001be6 <arm_nn_mat_mult_kernel_q7_q15+0x6ce>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 800155a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155e:	f107 0208 	add.w	r2, r7, #8
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8001566:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	441a      	add	r2, r3
 8001574:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001578:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4413      	add	r3, r2
 8001586:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 800158a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800158e:	f993 3000 	ldrsb.w	r3, [r3]
 8001592:	461a      	mov	r2, r3
 8001594:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001598:	409a      	lsls	r2, r3
 800159a:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 800159e:	3b01      	subs	r3, #1
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80015ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 80015b6:	f993 3000 	ldrsb.w	r3, [r3]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80015c0:	409a      	lsls	r2, r3
 80015c2:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80015c6:	3b01      	subs	r3, #1
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
        q31_t     sum3 = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 80015d4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015d8:	f993 3000 	ldrsb.w	r3, [r3]
 80015dc:	461a      	mov	r2, r3
 80015de:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80015e2:	409a      	lsls	r2, r3
 80015e4:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 80015e8:	3b01      	subs	r3, #1
 80015ea:	2101      	movs	r1, #1
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80015f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8001600:	f993 3000 	ldrsb.w	r3, [r3]
 8001604:	461a      	mov	r2, r3
 8001606:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800160a:	409a      	lsls	r2, r3
 800160c:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001610:	3b01      	subs	r3, #1
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4413      	add	r3, r2
 800161a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        uint16_t  colCnt = numCol_A >> 2;
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	089b      	lsrs	r3, r3, #2
 8001624:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        /* accumulate over the vector */
        while (colCnt)
 8001628:	e20c      	b.n	8001a44 <arm_nn_mat_mult_kernel_q7_q15+0x52c>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 800162a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	1d19      	adds	r1, r3, #4
 8001632:	6011      	str	r1, [r2, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            q31_t     inB2 = *__SIMD32(pB2)++;
 800163a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	6011      	str	r1, [r2, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800164a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164e:	f107 020c 	add.w	r2, r7, #12
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800165a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001664:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001668:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 800166a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	1d19      	adds	r1, r3, #4
 8001672:	6011      	str	r1, [r2, #0]
 8001674:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 800167c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800168c:	2208      	movs	r2, #8
 800168e:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001690:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001694:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80016a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
    return op1;
 80016aa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	e007      	b.n	80016c2 <arm_nn_mat_mult_kernel_q7_q15+0x1aa>
  return (op1 >> op2) | (op1 << (32U - op2));
 80016b2:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80016b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa62 f303 	ror.w	r3, r2, r3
 80016c2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80016c6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa2f f283 	sxtb16	r2, r3
 80016d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016d6:	601a      	str	r2, [r3, #0]
  return(result);
 80016d8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016e2:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80016e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80016f0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa2f f283 	sxtb16	r2, r3
 80016fa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016fe:	601a      	str	r2, [r3, #0]
  return(result);
 8001700:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800170a:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 800170c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	0c1b      	lsrs	r3, r3, #16
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	0c12      	lsrs	r2, r2, #16
 800171e:	4313      	orrs	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 800172a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29a      	uxth	r2, r3
 8001732:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	4313      	orrs	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	601a      	str	r2, [r3, #0]
        return source;
 8001746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174a:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001760:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800176a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800176e:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8001770:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	1d19      	adds	r1, r3, #4
 8001778:	6011      	str	r1, [r2, #0]
 800177a:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8001782:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001792:	2208      	movs	r2, #8
 8001794:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001796:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800179a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f002 021f 	and.w	r2, r2, #31
 80017a4:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 80017a6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <arm_nn_mat_mult_kernel_q7_q15+0x2a0>
    return op1;
 80017b0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e007      	b.n	80017c8 <arm_nn_mat_mult_kernel_q7_q15+0x2b0>
  return (op1 >> op2) | (op1 << (32U - op2));
 80017b8:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80017bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa62 f303 	ror.w	r3, r2, r3
 80017c8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80017cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80017ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa2f f283 	sxtb16	r2, r3
 80017d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017dc:	601a      	str	r2, [r3, #0]
  return(result);
 80017de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017e8:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 80017ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80017f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa2f f283 	sxtb16	r2, r3
 8001800:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001804:	601a      	str	r2, [r3, #0]
  return(result);
 8001806:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001810:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8001812:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	0c12      	lsrs	r2, r2, #16
 8001824:	4313      	orrs	r3, r2
 8001826:	461a      	mov	r2, r3
 8001828:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8001830:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	041b      	lsls	r3, r3, #16
 8001840:	4313      	orrs	r3, r2
 8001842:	461a      	mov	r2, r3
 8001844:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	601a      	str	r2, [r3, #0]
        return source;
 800184c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001850:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad((void *)pA2, &inA21, &inA22);
 8001852:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            sum = __SMLAD(inA11, inB1, sum);
 8001856:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001862:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001866:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800186a:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800186e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001876:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800187a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800187e:	fb23 1202 	smlad	r2, r3, r2, r1
 8001882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001886:	601a      	str	r2, [r3, #0]
  return(result);
 8001888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA11, inB2, sum2);
 8001892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800189e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018a2:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 80018a6:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 80018aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018b2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80018b6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80018ba:	fb23 1302 	smlad	r3, r3, r2, r1
 80018be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 80018c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA21, inB1, sum3);
 80018ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80018da:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80018de:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 80018e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80018e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80018ee:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80018f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80018f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 80018fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA21, inB2, sum4);
 8001902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800190e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001912:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8001916:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800191a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800191e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001922:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001926:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800192a:	fb23 1302 	smlad	r3, r3, r2, r1
 800192e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001932:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001936:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            inB1 = *__SIMD32(pB)++;
 800193a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800193e:	6813      	ldr	r3, [r2, #0]
 8001940:	1d19      	adds	r1, r3, #4
 8001942:	6011      	str	r1, [r2, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
            inB2 = *__SIMD32(pB2)++;
 800194a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800194e:	6813      	ldr	r3, [r2, #0]
 8001950:	1d19      	adds	r1, r3, #4
 8001952:	6011      	str	r1, [r2, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

            sum = __SMLAD(inA12, inB1, sum);
 800195a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001966:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800196a:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 800196e:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8001972:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001976:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800197a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800197e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001982:	fb23 1302 	smlad	r3, r3, r2, r1
 8001986:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 800198a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800198e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 = __SMLAD(inA12, inB2, sum2);
 8001992:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800199e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80019a2:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 80019a6:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 80019aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80019b2:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80019b6:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 80019ba:	fb23 1302 	smlad	r3, r3, r2, r1
 80019be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  return(result);
 80019c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80019c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 = __SMLAD(inA22, inB1, sum3);
 80019ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80019da:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 80019de:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 80019e2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80019e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80019ea:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80019f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80019f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80019fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80019fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 = __SMLAD(inA22, inB2, sum4);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8001a0e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a12:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8001a16:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 8001a1a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001a1e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a22:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001a26:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8001a2a:	fb23 1302 	smlad	r3, r3, r2, r1
 8001a2e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  return(result);
 8001a32:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001a36:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

            colCnt--;
 8001a3a:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8001a44:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f47f adee 	bne.w	800162a <arm_nn_mat_mult_kernel_q7_q15+0x112>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8001a5a:	e056      	b.n	8001b0a <arm_nn_mat_mult_kernel_q7_q15+0x5f2>
        {
            q7_t      inA1 = *pA++;
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	1c59      	adds	r1, r3, #1
 8001a68:	6011      	str	r1, [r2, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
            q15_t     inB1 = *pB++;
 8001a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	1c99      	adds	r1, r3, #2
 8001a78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a7c:	6011      	str	r1, [r2, #0]
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
            q7_t      inA2 = *pA2++;
 8001a84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	f8c7 21f8 	str.w	r2, [r7, #504]	; 0x1f8
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
            q15_t     inB2 = *pB2++;
 8001a94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1c99      	adds	r1, r3, #2
 8001a9c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001aa0:	6011      	str	r1, [r2, #0]
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	f8a7 31c8 	strh.w	r3, [r7, #456]	; 0x1c8

            sum += inA1 * inB1;
 8001aa8:	f997 31cf 	ldrsb.w	r3, [r7, #463]	; 0x1cf
 8001aac:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8001ab8:	4413      	add	r3, r2
 8001aba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
            sum2 += inA1 * inB2;
 8001abe:	f997 31cf 	ldrsb.w	r3, [r7, #463]	; 0x1cf
 8001ac2:	f9b7 21c8 	ldrsh.w	r2, [r7, #456]	; 0x1c8
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001ace:	4413      	add	r3, r2
 8001ad0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
            sum3 += inA2 * inB1;
 8001ad4:	f997 31cb 	ldrsb.w	r3, [r7, #459]	; 0x1cb
 8001ad8:	f9b7 21cc 	ldrsh.w	r2, [r7, #460]	; 0x1cc
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            sum4 += inA2 * inB2;
 8001aea:	f997 31cb 	ldrsb.w	r3, [r7, #459]	; 0x1cb
 8001aee:	f9b7 21c8 	ldrsh.w	r2, [r7, #456]	; 0x1c8
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001afa:	4413      	add	r3, r2
 8001afc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
            colCnt--;
 8001b00:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001b04:	3b01      	subs	r3, #1
 8001b06:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
        while (colCnt)
 8001b0a:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1a4      	bne.n	8001a5c <arm_nn_mat_mult_kernel_q7_q15+0x544>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8001b12:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001b1c:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8001b20:	f8d7 11f4 	ldr.w	r1, [r7, #500]	; 0x1f4
 8001b24:	fa41 f202 	asr.w	r2, r1, r2
 8001b28:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8001b2c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8001b30:	f302 0207 	ssat	r2, #8, r2
 8001b34:	f8c7 21c0 	str.w	r2, [r7, #448]	; 0x1c0
 8001b38:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8001b3c:	b252      	sxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8001b40:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001b4a:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8001b4e:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8001b52:	fa41 f202 	asr.w	r2, r1, r2
 8001b56:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001b5a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001b5e:	f302 0207 	ssat	r2, #8, r2
 8001b62:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b66:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b6a:	b252      	sxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8001b6e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001b78:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8001b7c:	f8d7 11f0 	ldr.w	r1, [r7, #496]	; 0x1f0
 8001b80:	fa41 f202 	asr.w	r2, r1, r2
 8001b84:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8001b88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b8c:	f302 0207 	ssat	r2, #8, r2
 8001b90:	f8c7 21b0 	str.w	r2, [r7, #432]	; 0x1b0
 8001b94:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8001b98:	b252      	sxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 8001b9c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001ba6:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8001baa:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 8001bae:	fa41 f202 	asr.w	r2, r1, r2
 8001bb2:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8001bb6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001bba:	f302 0207 	ssat	r2, #8, r2
 8001bbe:	f8c7 21a8 	str.w	r2, [r7, #424]	; 0x1a8
 8001bc2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8001bc6:	b252      	sxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	f107 010c 	add.w	r1, r7, #12
 8001bd6:	6809      	ldr	r1, [r1, #0]
 8001bd8:	440a      	add	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
        rowCnt--;
 8001bdc:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001be0:	3b01      	subs	r3, #1
 8001be2:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
    while (rowCnt)
 8001be6:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f47f acb5 	bne.w	800155a <arm_nn_mat_mult_kernel_q7_q15+0x42>
    }                           /* for over ch_im_out */

    /* compute left-over row if any */
    if (ch_im_out & 0x1)
 8001bf0:	1dbb      	adds	r3, r7, #6
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 81eb 	beq.w	8001fd4 <arm_nn_mat_mult_kernel_q7_q15+0xabc>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	f107 0208 	add.w	r2, r7, #8
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8001c0a:	f107 0320 	add.w	r3, r7, #32
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	441a      	add	r2, r3
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t     sum = ((q31_t)(*pBias) << bias_shift) + NN_ROUND(out_shift);
 8001c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c22:	f993 3000 	ldrsb.w	r3, [r3]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c32:	3b01      	subs	r3, #1
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8001c40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	f8c7 2200 	str.w	r2, [r7, #512]	; 0x200
 8001c4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 8001c54:	409a      	lsls	r2, r3
 8001c56:	f8b7 3214 	ldrh.w	r3, [r7, #532]	; 0x214
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

        uint16_t  colCnt = numCol_A >> 2;
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001c72:	e138      	b.n	8001ee6 <arm_nn_mat_mult_kernel_q7_q15+0x9ce>
        {
            q31_t     inA11, inA12;
            q31_t     inB1 = *__SIMD32(pB)++;
 8001c74:	f107 0220 	add.w	r2, r7, #32
 8001c78:	6813      	ldr	r3, [r2, #0]
 8001c7a:	1d19      	adds	r1, r3, #4
 8001c7c:	6011      	str	r1, [r2, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            q31_t     inB2 = *__SIMD32(pB2)++;
 8001c84:	f107 021c 	add.w	r2, r7, #28
 8001c88:	6813      	ldr	r3, [r2, #0]
 8001c8a:	1d19      	adds	r1, r3, #4
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	f107 020c 	add.w	r2, r7, #12
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca4:	f107 0218 	add.w	r2, r7, #24
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cae:	f107 0214 	add.w	r2, r7, #20
 8001cb2:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8001cb4:	f107 0210 	add.w	r2, r7, #16
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	1d19      	adds	r1, r3, #4
 8001cbc:	6011      	str	r1, [r2, #0]
 8001cbe:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6013      	str	r3, [r2, #0]
        q31_t     inAbuf1 = __SXTB16(__ROR(inA, 8));
 8001cc6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8001cda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f002 021f 	and.w	r2, r2, #31
 8001ce8:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8001cea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <arm_nn_mat_mult_kernel_q7_q15+0x7e4>
    return op1;
 8001cf4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e007      	b.n	8001d0c <arm_nn_mat_mult_kernel_q7_q15+0x7f4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8001cfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	fa62 f303 	ror.w	r3, r2, r3
 8001d0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa2f f283 	sxtb16	r2, r3
 8001d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d20:	601a      	str	r2, [r3, #0]
  return(result);
 8001d22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d2c:	601a      	str	r2, [r3, #0]
        q31_t     inAbuf2 = __SXTB16(inA);
 8001d2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8001d3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa2f f283 	sxtb16	r2, r3
 8001d44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d48:	601a      	str	r2, [r3, #0]
  return(result);
 8001d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d54:	601a      	str	r2, [r3, #0]
        *out2 = __PKHTB(inAbuf1, inAbuf2, 16);
 8001d56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	0c12      	lsrs	r2, r2, #16
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	601a      	str	r2, [r3, #0]
        *out1 = __PKHBT(inAbuf2, inAbuf1, 16);
 8001d74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	4313      	orrs	r3, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	601a      	str	r2, [r3, #0]
        return source;
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad((void *)pA, &inA11, &inA12);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	601a      	str	r2, [r3, #0]

            sum = __SMLAD(inA11, inB1, sum);
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8001da8:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001dac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db0:	6018      	str	r0, [r3, #0]
 8001db2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001db6:	6019      	str	r1, [r3, #0]
 8001db8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001dbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001dbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001dce:	6809      	ldr	r1, [r1, #0]
 8001dd0:	fb23 1202 	smlad	r2, r3, r2, r1
 8001dd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dd8:	601a      	str	r2, [r3, #0]
  return(result);
 8001dda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA11, inB2, sum2);
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8001df0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001df4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001df8:	6018      	str	r0, [r3, #0]
 8001dfa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001dfe:	6019      	str	r1, [r3, #0]
 8001e00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001e04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	fb23 1202 	smlad	r2, r3, r2, r1
 8001e1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e20:	601a      	str	r2, [r3, #0]
  return(result);
 8001e22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            inB1 = *__SIMD32(pB)++;
 8001e2c:	f107 0220 	add.w	r2, r7, #32
 8001e30:	6813      	ldr	r3, [r2, #0]
 8001e32:	1d19      	adds	r1, r3, #4
 8001e34:	6011      	str	r1, [r2, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            inB2 = *__SIMD32(pB2)++;
 8001e3c:	f107 021c 	add.w	r2, r7, #28
 8001e40:	6813      	ldr	r3, [r2, #0]
 8001e42:	1d19      	adds	r1, r3, #4
 8001e44:	6011      	str	r1, [r2, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
            sum = __SMLAD(inA12, inB1, sum);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8001e58:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001e5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e60:	6018      	str	r0, [r3, #0]
 8001e62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e66:	6019      	str	r1, [r3, #0]
 8001e68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001e6e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8001e7e:	6809      	ldr	r1, [r1, #0]
 8001e80:	fb23 1202 	smlad	r2, r3, r2, r1
 8001e84:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e88:	601a      	str	r2, [r3, #0]
  return(result);
 8001e8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 = __SMLAD(inA12, inB2, sum2);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 8001ea0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001ea4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ea8:	6018      	str	r0, [r3, #0]
 8001eaa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001eae:	6019      	str	r1, [r3, #0]
 8001eb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001eb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8001eb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001ec6:	6809      	ldr	r1, [r1, #0]
 8001ec8:	fb23 1202 	smlad	r2, r3, r2, r1
 8001ecc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ed0:	601a      	str	r2, [r3, #0]
  return(result);
 8001ed2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

            colCnt--;
 8001edc:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001ee6:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f47f aec2 	bne.w	8001c74 <arm_nn_mat_mult_kernel_q7_q15+0x75c>
        }
        colCnt = numCol_A & 0x3;
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001efc:	e038      	b.n	8001f70 <arm_nn_mat_mult_kernel_q7_q15+0xa58>
        {
            q7_t      inA1 = *pA++;
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	1c59      	adds	r1, r3, #1
 8001f0a:	6011      	str	r1, [r2, #0]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
            q15_t     inB1 = *pB++;
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c99      	adds	r1, r3, #2
 8001f1a:	f107 0220 	add.w	r2, r7, #32
 8001f1e:	6011      	str	r1, [r2, #0]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
            q15_t     inB2 = *pB2++;
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1c99      	adds	r1, r3, #2
 8001f2e:	f107 021c 	add.w	r2, r7, #28
 8001f32:	6011      	str	r1, [r2, #0]
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

            sum += inA1 * inB1;
 8001f3a:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8001f3e:	f9b7 219c 	ldrsh.w	r2, [r7, #412]	; 0x19c
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
            sum2 += inA1 * inB2;
 8001f50:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8001f54:	f9b7 219a 	ldrsh.w	r2, [r7, #410]	; 0x19a
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001f60:	4413      	add	r3, r2
 8001f62:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            colCnt--;
 8001f66:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        while (colCnt)
 8001f70:	f8b7 31da 	ldrh.w	r3, [r7, #474]	; 0x1da
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1c2      	bne.n	8001efe <arm_nn_mat_mult_kernel_q7_q15+0x9e6>
        }

        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8001f78:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001f82:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8001f86:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8001f8a:	fa41 f202 	asr.w	r2, r1, r2
 8001f8e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8001f92:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f96:	f302 0207 	ssat	r2, #8, r2
 8001f9a:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
 8001f9e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8001fa2:	b252      	sxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 8001fa6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001fb0:	f8b7 2214 	ldrh.w	r2, [r7, #532]	; 0x214
 8001fb4:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 8001fb8:	fa41 f202 	asr.w	r2, r1, r2
 8001fbc:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8001fc0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8001fc4:	f302 0207 	ssat	r2, #8, r2
 8001fc8:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 8001fcc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8001fd0:	b252      	sxtb	r2, r2
 8001fd2:	701a      	strb	r2, [r3, #0]
    }

    pOut += ch_im_out;
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8001fdc:	4413      	add	r3, r2
 8001fde:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c

    /* return the new output pointer with offset */
    return pOut;
 8001fe2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */

}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc90      	pop	{r4, r7}
 8001ff0:	4770      	bx	lr

08001ff2 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
                                                  const uint16_t numCol_A,
                                                  const uint16_t bias_shift,
                                                  const uint16_t out_shift, 
                                                  const q7_t * bias, 
                                                  q7_t * pOut)
{
 8001ff2:	b490      	push	{r4, r7}
 8001ff4:	b0d2      	sub	sp, #328	; 0x148
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	f107 040c 	add.w	r4, r7, #12
 8001ffc:	6020      	str	r0, [r4, #0]
 8001ffe:	f107 0008 	add.w	r0, r7, #8
 8002002:	6001      	str	r1, [r0, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	1dbb      	adds	r3, r7, #6
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	460a      	mov	r2, r1
 800200e:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t     *pOut2 = pOut + ch_im_out;
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002018:	4413      	add	r3, r2
 800201a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    int       i;

    /* this loop over rows in A */
    for (i = 0; i < ch_im_out; i += 2)
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002024:	e2df      	b.n	80025e6 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x5f4>
    {
        /* setup pointers for B */
        const q15_t *pB = pInBuffer;
 8002026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800202a:	f107 0208 	add.w	r2, r7, #8
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	601a      	str	r2, [r3, #0]
        const q15_t *pB2 = pB + numCol_A;
 8002032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	441a      	add	r2, r3
 8002040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002044:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *pA2 = pA + numCol_A;
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        /* init the sum with bias */
        q31_t     sum =  ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8002056:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800205a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800205e:	4413      	add	r3, r2
 8002060:	f993 3000 	ldrsb.w	r3, [r3]
 8002064:	461a      	mov	r2, r3
 8002066:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 800206a:	409a      	lsls	r2, r3
 800206c:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002070:	3b01      	subs	r3, #1
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
        q31_t     sum2 = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 800207e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002082:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8002086:	4413      	add	r3, r2
 8002088:	f993 3000 	ldrsb.w	r3, [r3]
 800208c:	461a      	mov	r2, r3
 800208e:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 8002092:	409a      	lsls	r2, r3
 8002094:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 8002098:	3b01      	subs	r3, #1
 800209a:	2101      	movs	r1, #1
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        q31_t     sum3 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80020a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020aa:	3301      	adds	r3, #1
 80020ac:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80020b0:	4413      	add	r3, r2
 80020b2:	f993 3000 	ldrsb.w	r3, [r3]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80020bc:	409a      	lsls	r2, r3
 80020be:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80020c2:	3b01      	subs	r3, #1
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q31_t     sum4 = ((q31_t)(bias[i + 1]) << bias_shift) + NN_ROUND(out_shift);
 80020d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80020d4:	3301      	adds	r3, #1
 80020d6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80020da:	4413      	add	r3, r2
 80020dc:	f993 3000 	ldrsb.w	r3, [r3]
 80020e0:	461a      	mov	r2, r3
 80020e2:	f8b7 3150 	ldrh.w	r3, [r7, #336]	; 0x150
 80020e6:	409a      	lsls	r2, r3
 80020e8:	f8b7 3154 	ldrh.w	r3, [r7, #340]	; 0x154
 80020ec:	3b01      	subs	r3, #1
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        uint16_t  colCnt = numCol_A >> 2;
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        /* accumulate over the vector */
        while (colCnt)
 8002104:	e19e      	b.n	8002444 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x452>
        {
            q31_t     inA11, inA12, inA21, inA22;
            q31_t     inB1 = *__SIMD32(pB)++;
 8002106:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	1d19      	adds	r1, r3, #4
 800210e:	6011      	str	r1, [r2, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            q31_t     inB2 = *__SIMD32(pB2)++;
 8002116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	1d19      	adds	r1, r3, #4
 800211e:	6011      	str	r1, [r2, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	653b      	str	r3, [r7, #80]	; 0x50
 8002138:	f107 0320 	add.w	r3, r7, #32
 800213c:	64fb      	str	r3, [r7, #76]	; 0x4c
        q31_t     inA = *__SIMD32(source)++;
 800213e:	f107 0214 	add.w	r2, r7, #20
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	1d19      	adds	r1, r3, #4
 8002146:	6011      	str	r1, [r2, #0]
 8002148:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8002150:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002160:	2208      	movs	r2, #8
 8002162:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002164:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002168:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	f002 021f 	and.w	r2, r2, #31
 8002172:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002174:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x194>
    return op1;
 800217e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	e007      	b.n	8002196 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1a4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002186:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800218a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa62 f303 	ror.w	r3, r2, r3
 8002196:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800219a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800219c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa2f f283 	sxtb16	r2, r3
 80021a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021aa:	601a      	str	r2, [r3, #0]
  return(result);
 80021ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b6:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 80021b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80021c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa2f f283 	sxtb16	r2, r3
 80021ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d2:	601a      	str	r2, [r3, #0]
  return(result);
 80021d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	461a      	mov	r2, r3
 80021dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021de:	601a      	str	r2, [r3, #0]
        return source;
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	681a      	ldr	r2, [r3, #0]

            pA = (q7_t *) read_and_pad_reordered((void *)pA, &inA11, &inA12);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	677b      	str	r3, [r7, #116]	; 0x74
 80021fc:	f107 0318 	add.w	r3, r7, #24
 8002200:	673b      	str	r3, [r7, #112]	; 0x70
        q31_t     inA = *__SIMD32(source)++;
 8002202:	f107 0210 	add.w	r2, r7, #16
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	1d19      	adds	r1, r3, #4
 800220a:	6011      	str	r1, [r2, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	66fb      	str	r3, [r7, #108]	; 0x6c
        *out2 = __SXTB16(__ROR(inA, 8));
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	66bb      	str	r3, [r7, #104]	; 0x68
 8002214:	2308      	movs	r3, #8
 8002216:	667b      	str	r3, [r7, #100]	; 0x64
  op2 %= 32U;
 8002218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
  if (op2 == 0U)
 8002220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x238>
    return op1;
 8002226:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002228:	e003      	b.n	8002232 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x240>
  return (op1 >> op2) | (op1 << (32U - op2));
 800222a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800222c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800222e:	fa62 f303 	ror.w	r3, r2, r3
 8002232:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002236:	fa2f f383 	sxtb16	r3, r3
 800223a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800223c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800223e:	461a      	mov	r2, r3
 8002240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002242:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800224a:	fa2f f383 	sxtb16	r3, r3
 800224e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	461a      	mov	r2, r3
 8002254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002256:	601a      	str	r2, [r3, #0]
        return source;
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	681b      	ldr	r3, [r3, #0]
            pA2 = (q7_t *) read_and_pad_reordered((void *)pA2, &inA21, &inA22);
 800225e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

            sum = __SMLAD(inA11, inB1, sum);
 8002262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800226e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002272:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8002276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800227a:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800227c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002280:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002286:	fb23 1302 	smlad	r3, r3, r2, r1
 800228a:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 800228c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800228e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA11, inB2, sum2);
 8002292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800229e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022a2:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80022a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80022aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80022ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022b6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022ba:	fb23 1302 	smlad	r3, r3, r2, r1
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80022c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA21, inB1, sum3);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80022d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022da:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
 80022de:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80022e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80022e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022ea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80022ee:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80022f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80022f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 80022fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA21, inB2, sum4);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800230e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002312:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8002316:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800231a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800231e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002326:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800232a:	fb23 1302 	smlad	r3, r3, r2, r1
 800232e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8002332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002336:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            inB1 = *__SIMD32(pB)++;
 800233a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	1d19      	adds	r1, r3, #4
 8002342:	6011      	str	r1, [r2, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
            inB2 = *__SIMD32(pB2)++;
 800234a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	1d19      	adds	r1, r3, #4
 8002352:	6011      	str	r1, [r2, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

            sum = __SMLAD(inA12, inB1, sum);
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8002366:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800236a:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800236e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800237a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800237e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002382:	fb23 1302 	smlad	r3, r3, r2, r1
 8002386:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 800238a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800238e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 = __SMLAD(inA12, inB2, sum2);
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800239e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80023a2:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80023a6:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80023aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80023ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023b6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80023ba:	fb23 1302 	smlad	r3, r3, r2, r1
 80023be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80023c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 = __SMLAD(inA22, inB1, sum3);
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80023d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023da:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80023de:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80023e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80023ee:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80023f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80023f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 80023fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 = __SMLAD(inA22, inB2, sum4);
 8002402:	f107 0318 	add.w	r3, r7, #24
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800240e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002412:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8002416:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800241a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800241e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002422:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8002426:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800242a:	fb23 1302 	smlad	r3, r3, r2, r1
 800242e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8002432:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

            colCnt--;
 800243a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800243e:	3b01      	subs	r3, #1
 8002440:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 8002444:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f ae5c 	bne.w	8002106 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x114>
        }                       /* while over colCnt */
        colCnt = numCol_A & 0x3;
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 800245a:	e056      	b.n	800250a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x518>
        {
            q7_t      inA1 = *pA++;
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f107 020c 	add.w	r2, r7, #12
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	6011      	str	r1, [r2, #0]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            q15_t     inB1 = *pB++;
 8002470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1c99      	adds	r1, r3, #2
 8002478:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800247c:	6011      	str	r1, [r2, #0]
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
            q7_t      inA2 = *pA2++;
 8002484:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
            q15_t     inB2 = *pB2++;
 8002494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c99      	adds	r1, r3, #2
 800249c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118

            sum += inA1 * inB1;
 80024a8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80024ac:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	; 0x11c
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80024b8:	4413      	add	r3, r2
 80024ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
            sum2 += inA1 * inB2;
 80024be:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80024c2:	f9b7 2118 	ldrsh.w	r2, [r7, #280]	; 0x118
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80024ce:	4413      	add	r3, r2
 80024d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            sum3 += inA2 * inB1;
 80024d4:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 80024d8:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	; 0x11c
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80024e4:	4413      	add	r3, r2
 80024e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            sum4 += inA2 * inB2;
 80024ea:	f997 311b 	ldrsb.w	r3, [r7, #283]	; 0x11b
 80024ee:	f9b7 2118 	ldrsh.w	r2, [r7, #280]	; 0x118
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80024fa:	4413      	add	r3, r2
 80024fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            colCnt--;
 8002500:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8002504:	3b01      	subs	r3, #1
 8002506:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
        while (colCnt)
 800250a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1a4      	bne.n	800245c <arm_nn_mat_mult_kernel_q7_q15_reordered+0x46a>
        }                       /* while over colCnt */
        *pOut++ = (q7_t) __SSAT((sum >> out_shift), 8);
 8002512:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800251c:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8002520:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8002524:	fa41 f202 	asr.w	r2, r1, r2
 8002528:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800252c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002530:	f302 0207 	ssat	r2, #8, r2
 8002534:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8002538:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800253c:	b252      	sxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
        *pOut++ = (q7_t) __SSAT((sum3 >> out_shift), 8);
 8002540:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800254a:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800254e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8002552:	fa41 f202 	asr.w	r2, r1, r2
 8002556:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800255a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800255e:	f302 0207 	ssat	r2, #8, r2
 8002562:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8002566:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800256a:	b252      	sxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum2 >> out_shift), 8);
 800256e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8002578:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800257c:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8002580:	fa41 f202 	asr.w	r2, r1, r2
 8002584:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8002588:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800258c:	f302 0207 	ssat	r2, #8, r2
 8002590:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8002594:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8002598:	b252      	sxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
        *pOut2++ = (q7_t) __SSAT((sum4 >> out_shift), 8);
 800259c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80025a6:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80025aa:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80025ae:	fa41 f202 	asr.w	r2, r1, r2
 80025b2:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80025b6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80025ba:	f302 0207 	ssat	r2, #8, r2
 80025be:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80025c2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80025c6:	b252      	sxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

        /* skip the row computed with A2 */
        pA += numCol_A;
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	f107 010c 	add.w	r1, r7, #12
 80025d6:	6809      	ldr	r1, [r1, #0]
 80025d8:	440a      	add	r2, r1
 80025da:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ch_im_out; i += 2)
 80025dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80025e0:	3302      	adds	r3, #2
 80025e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80025ee:	429a      	cmp	r2, r3
 80025f0:	f73f ad19 	bgt.w	8002026 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x34>
    }                           /* for over ch_im_out */

    pOut += ch_im_out;
 80025f4:	1dbb      	adds	r3, r7, #6
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80025fc:	4413      	add	r3, r2
 80025fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* return the new output pointer with offset */
    return pOut;
 8002602:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
#else
    /* To be completed */
    return NULL;
#endif                          /* ARM_MATH_DSP */
}
 8002606:	4618      	mov	r0, r3
 8002608:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800260c:	46bd      	mov	sp, r7
 800260e:	bc90      	pop	{r4, r7}
 8002610:	4770      	bx	lr

08002612 <arm_fully_connected_q7_opt>:
                           const uint16_t bias_shift,
                           const uint16_t out_shift, 
                           const q7_t * bias, 
                           q7_t * pOut, 
                           q15_t * vec_buffer)
{
 8002612:	b590      	push	{r4, r7, lr}
 8002614:	b0f1      	sub	sp, #452	; 0x1c4
 8002616:	af00      	add	r7, sp, #0
 8002618:	f107 040c 	add.w	r4, r7, #12
 800261c:	6020      	str	r0, [r4, #0]
 800261e:	f107 0008 	add.w	r0, r7, #8
 8002622:	6001      	str	r1, [r0, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	460a      	mov	r2, r1
 800262e:	801a      	strh	r2, [r3, #0]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    const q7_t *pB = pM;
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	601a      	str	r2, [r3, #0]
    q7_t     *pO = pOut;
 800263c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002640:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const q7_t *pBias = bias;
 8002644:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8002648:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    q15_t    *pA;
    uint16_t  rowCnt = num_of_rows >> 2;
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    arm_q7_to_q15_reordered_no_shift(pV, vec_buffer, dim_vec);
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	f000 fcf8 	bl	8003058 <arm_q7_to_q15_reordered_no_shift>

    while (rowCnt)
 8002668:	e339      	b.n	8002cde <arm_fully_connected_q7_opt+0x6cc>
    {

        q31_t     sum =  ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 800266a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002674:	f993 3000 	ldrsb.w	r3, [r3]
 8002678:	461a      	mov	r2, r3
 800267a:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 800267e:	409a      	lsls	r2, r3
 8002680:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002684:	3b01      	subs	r3, #1
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        q31_t     sum2 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8002692:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800269c:	f993 3000 	ldrsb.w	r3, [r3]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80026a6:	409a      	lsls	r2, r3
 80026a8:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80026ac:	3b01      	subs	r3, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        q31_t     sum3 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80026ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80026c4:	f993 3000 	ldrsb.w	r3, [r3]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80026ce:	409a      	lsls	r2, r3
 80026d0:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80026d4:	3b01      	subs	r3, #1
 80026d6:	2101      	movs	r1, #1
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
        q31_t     sum4 = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 80026e2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80026ec:	f993 3000 	ldrsb.w	r3, [r3]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80026f6:	409a      	lsls	r2, r3
 80026f8:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 80026fc:	3b01      	subs	r3, #1
 80026fe:	2101      	movs	r1, #1
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

        uint16_t  colCnt = dim_vec >> 2;
 800270a:	1dbb      	adds	r3, r7, #6
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

        pA = vec_buffer;
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800271c:	601a      	str	r2, [r3, #0]

#ifdef USE_INTRINSIC

#ifndef ARM_MATH_BIG_ENDIAN
        while (colCnt)
 800271e:	e20a      	b.n	8002b36 <arm_fully_connected_q7_opt+0x524>
        {
            q31_t     inM11, inM12, inM13, inM14;
            q31_t     inV;

            inV = *__SIMD32(pA)++;
 8002720:	f107 021c 	add.w	r2, r7, #28
 8002724:	6813      	ldr	r3, [r2, #0]
 8002726:	1d19      	adds	r1, r3, #4
 8002728:	6011      	str	r1, [r2, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
            inM11 = *__SIMD32(pB)++;
 8002730:	f107 0220 	add.w	r2, r7, #32
 8002734:	6813      	ldr	r3, [r2, #0]
 8002736:	1d19      	adds	r1, r3, #4
 8002738:	6011      	str	r1, [r2, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            inM12 = __SXTB16(__ROR(inM11, 8));
 8002740:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8002744:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800274e:	2208      	movs	r2, #8
 8002750:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002752:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002756:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	f002 021f 	and.w	r2, r2, #31
 8002760:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <arm_fully_connected_q7_opt+0x162>
    return op1;
 800276c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e007      	b.n	8002784 <arm_fully_connected_q7_opt+0x172>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002774:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002778:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	fa62 f303 	ror.w	r3, r2, r3
 8002784:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002788:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800278a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fa2f f283 	sxtb16	r2, r3
 8002794:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002798:	601a      	str	r2, [r3, #0]
  return(result);
 800279a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inM11 = __SXTB16(inM11);
 80027a4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80027a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80027ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	fa2f f283 	sxtb16	r2, r3
 80027b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027bc:	601a      	str	r2, [r3, #0]
  return(result);
 80027be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            sum = __SMLAD(inM11, inV, sum);
 80027c8:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80027cc:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80027d0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80027d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027d8:	6018      	str	r0, [r3, #0]
 80027da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80027de:	6019      	str	r1, [r3, #0]
 80027e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80027e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80027f6:	6809      	ldr	r1, [r1, #0]
 80027f8:	fb23 1202 	smlad	r2, r3, r2, r1
 80027fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002800:	601a      	str	r2, [r3, #0]
  return(result);
 8002802:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 800280c:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8002810:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 8002814:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002818:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800281c:	6018      	str	r0, [r3, #0]
 800281e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002822:	6019      	str	r1, [r3, #0]
 8002824:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002828:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800282a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800283a:	6809      	ldr	r1, [r1, #0]
 800283c:	fb23 1202 	smlad	r2, r3, r2, r1
 8002840:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002844:	601a      	str	r2, [r3, #0]
  return(result);
 8002846:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8002850:	f107 0220 	add.w	r2, r7, #32
 8002854:	6813      	ldr	r3, [r2, #0]
 8002856:	1d19      	adds	r1, r3, #4
 8002858:	6011      	str	r1, [r2, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            inM14 = __SXTB16(__ROR(inM13, 8));
 8002860:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8002864:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800286e:	2208      	movs	r2, #8
 8002870:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002872:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002876:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002882:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <arm_fully_connected_q7_opt+0x282>
    return op1;
 800288c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e007      	b.n	80028a4 <arm_fully_connected_q7_opt+0x292>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002894:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002898:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	fa62 f303 	ror.w	r3, r2, r3
 80028a4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80028a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80028aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa2f f283 	sxtb16	r2, r3
 80028b4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80028b8:	601a      	str	r2, [r3, #0]
  return(result);
 80028ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
            inM13 = __SXTB16(inM13);
 80028c4:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80028c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80028ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa2f f283 	sxtb16	r2, r3
 80028d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028dc:	601a      	str	r2, [r3, #0]
  return(result);
 80028de:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            sum3 = __SMLAD(inM13, inV, sum3);
 80028e8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028ec:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80028f0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80028f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028fc:	6019      	str	r1, [r3, #0]
 80028fe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002902:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002908:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8002912:	6809      	ldr	r1, [r1, #0]
 8002914:	fb23 1202 	smlad	r2, r3, r2, r1
 8002918:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800291c:	601a      	str	r2, [r3, #0]
  return(result);
 800291e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 8002928:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800292c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002930:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002934:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8002938:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800293c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002940:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002944:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002948:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800294c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8002954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002958:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            inV = *__SIMD32(pA)++;
 800295c:	f107 021c 	add.w	r2, r7, #28
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	1d19      	adds	r1, r3, #4
 8002964:	6011      	str	r1, [r2, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
            inM11 = *__SIMD32(pB)++;
 800296c:	f107 0220 	add.w	r2, r7, #32
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	1d19      	adds	r1, r3, #4
 8002974:	6011      	str	r1, [r2, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            inM12 = __SXTB16(__ROR(inM11, 8));
 800297c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002980:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002984:	2308      	movs	r3, #8
 8002986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  op2 %= 32U;
 800298a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (op2 == 0U)
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <arm_fully_connected_q7_opt+0x392>
    return op1;
 800299e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a2:	e005      	b.n	80029b0 <arm_fully_connected_q7_opt+0x39e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80029a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80029a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ac:	fa62 f303 	ror.w	r3, r2, r3
 80029b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b8:	fa2f f383 	sxtb16	r3, r3
 80029bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
            inM11 = __SXTB16(inM11);
 80029c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80029cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80029d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80029d4:	fa2f f383 	sxtb16	r3, r3
 80029d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80029dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80029e0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
            sum = __SMLAD(inM11, inV, sum);
 80029e4:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 80029e8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029f0:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80029f4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80029f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80029fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a00:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8002a04:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002a08:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8002a10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002a14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 = __SMLAD(inM12, inV, sum2);
 8002a18:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 8002a1c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002a24:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8002a28:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8002a2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a34:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002a38:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8002a3c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002a40:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 8002a44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002a48:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            inM13 = *__SIMD32(pB)++;
 8002a4c:	f107 0220 	add.w	r2, r7, #32
 8002a50:	6813      	ldr	r3, [r2, #0]
 8002a52:	1d19      	adds	r1, r3, #4
 8002a54:	6011      	str	r1, [r2, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            inM14 = __SXTB16(__ROR(inM13, 8));
 8002a5c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a64:	2308      	movs	r3, #8
 8002a66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  op2 %= 32U;
 8002a6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  if (op2 == 0U)
 8002a76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <arm_fully_connected_q7_opt+0x472>
    return op1;
 8002a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a82:	e005      	b.n	8002a90 <arm_fully_connected_q7_opt+0x47e>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002a84:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a8c:	fa62 f303 	ror.w	r3, r2, r3
 8002a90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a98:	fa2f f383 	sxtb16	r3, r3
 8002a9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8002aa0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002aa4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
            inM13 = __SXTB16(inM13);
 8002aa8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002ab0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ab4:	fa2f f383 	sxtb16	r3, r3
 8002ab8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8002abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ac0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            sum3 = __SMLAD(inM13, inV, sum3);
 8002ac4:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 8002ac8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002acc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002ad0:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8002ad4:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8002ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002adc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ae0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002ae4:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002ae8:	fb23 1302 	smlad	r3, r3, r2, r1
 8002aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8002af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002af4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 = __SMLAD(inM14, inV, sum4);
 8002af8:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002afc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b04:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8002b08:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8002b0c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002b10:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002b14:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8002b18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002b1c:	fb23 1302 	smlad	r3, r3, r2, r1
 8002b20:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8002b24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002b28:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8002b2c:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002b30:	3b01      	subs	r3, #1
 8002b32:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8002b36:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f47f adf0 	bne.w	8002720 <arm_fully_connected_q7_opt+0x10e>
                      [sum4] "+r"(sum4),[pB] "+r"(pB),[pA] "+r"(pA):[colCnt] "r"(colCnt):"r0", "r1", "r2", "r3", "r4");
#endif                          /* ARM_MATH_BIG_ENDIAN */

#endif                          /* USE_INTRINSIC */

        colCnt = dim_vec & 0x3;
 8002b40:	1dbb      	adds	r3, r7, #6
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8002b4c:	e062      	b.n	8002c14 <arm_fully_connected_q7_opt+0x602>
        {
            q15_t     inV = *pA++;
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	1c99      	adds	r1, r3, #2
 8002b56:	f107 021c 	add.w	r2, r7, #28
 8002b5a:	6011      	str	r1, [r2, #0]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
            q7_t      inM = *pB++;
 8002b62:	f107 0320 	add.w	r3, r7, #32
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1c59      	adds	r1, r3, #1
 8002b6a:	f107 0220 	add.w	r2, r7, #32
 8002b6e:	6011      	str	r1, [r2, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
            q7_t      inM2 = *pB++;
 8002b76:	f107 0320 	add.w	r3, r7, #32
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	f107 0220 	add.w	r2, r7, #32
 8002b82:	6011      	str	r1, [r2, #0]
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
            q7_t      inM3 = *pB++;
 8002b8a:	f107 0320 	add.w	r3, r7, #32
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	f107 0220 	add.w	r2, r7, #32
 8002b96:	6011      	str	r1, [r2, #0]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
            q7_t      inM4 = *pB++;
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	1c59      	adds	r1, r3, #1
 8002ba6:	f107 0220 	add.w	r2, r7, #32
 8002baa:	6011      	str	r1, [r2, #0]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e

            sum += inV * inM;
 8002bb2:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8002bb6:	f997 2181 	ldrsb.w	r2, [r7, #385]	; 0x181
 8002bba:	fb02 f303 	mul.w	r3, r2, r3
 8002bbe:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            sum2 += inV * inM2;
 8002bc8:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8002bcc:	f997 2180 	ldrsb.w	r2, [r7, #384]	; 0x180
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8002bd8:	4413      	add	r3, r2
 8002bda:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
            sum3 += inV * inM3;
 8002bde:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8002be2:	f997 217f 	ldrsb.w	r2, [r7, #383]	; 0x17f
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002bee:	4413      	add	r3, r2
 8002bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
            sum4 += inV * inM4;
 8002bf4:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	; 0x182
 8002bf8:	f997 217e 	ldrsb.w	r2, [r7, #382]	; 0x17e
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c04:	4413      	add	r3, r2
 8002c06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
            colCnt--;
 8002c0a:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        while (colCnt)
 8002c14:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d198      	bne.n	8002b4e <arm_fully_connected_q7_opt+0x53c>
        }                       /* while over colCnt */
        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8002c1c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002c26:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8002c2a:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8002c2e:	fa41 f202 	asr.w	r2, r1, r2
 8002c32:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c36:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c3a:	f302 0207 	ssat	r2, #8, r2
 8002c3e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002c42:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c46:	b252      	sxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum2 >> out_shift), 8));
 8002c4a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002c54:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8002c58:	f8d7 11ac 	ldr.w	r1, [r7, #428]	; 0x1ac
 8002c5c:	fa41 f202 	asr.w	r2, r1, r2
 8002c60:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 8002c64:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8002c68:	f302 0207 	ssat	r2, #8, r2
 8002c6c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8002c70:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8002c74:	b252      	sxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum3 >> out_shift), 8));
 8002c78:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002c82:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8002c86:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 8002c8a:	fa41 f202 	asr.w	r2, r1, r2
 8002c8e:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 8002c92:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8002c96:	f302 0207 	ssat	r2, #8, r2
 8002c9a:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002c9e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8002ca2:	b252      	sxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
        *pO++ = (q7_t) (__SSAT((sum4 >> out_shift), 8));
 8002ca6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002cb0:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8002cb4:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8002cb8:	fa41 f202 	asr.w	r2, r1, r2
 8002cbc:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 8002cc0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002cc4:	f302 0207 	ssat	r2, #8, r2
 8002cc8:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002ccc:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002cd0:	b252      	sxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

        /* adjust the pointers and counters */
        rowCnt--;
 8002cd4:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8002cde:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f47f acc1 	bne.w	800266a <arm_fully_connected_q7_opt+0x58>
    }

    /* left-over part of the rows */
    rowCnt = num_of_rows & 0x3;
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6

    while (rowCnt)
 8002cf4:	e136      	b.n	8002f64 <arm_fully_connected_q7_opt+0x952>
    {
        q31_t     sum = ((q31_t)(*pBias++) << bias_shift) + NN_ROUND(out_shift);
 8002cf6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002d00:	f993 3000 	ldrsb.w	r3, [r3]
 8002d04:	461a      	mov	r2, r3
 8002d06:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002d10:	3b01      	subs	r3, #1
 8002d12:	2101      	movs	r1, #1
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
        uint16_t  colCnt = dim_vec >> 2;
 8002d1e:	1dbb      	adds	r3, r7, #6
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

        pA = vec_buffer;
 8002d28:	f107 031c 	add.w	r3, r7, #28
 8002d2c:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8002d30:	601a      	str	r2, [r3, #0]

        while (colCnt)
 8002d32:	e0c7      	b.n	8002ec4 <arm_fully_connected_q7_opt+0x8b2>
        {
            q31_t     inV1, inV2, inM11, inM12;

            pB = (q7_t *) read_and_pad_reordered((void *)pB, &inM11, &inM12);
 8002d34:	f107 0320 	add.w	r3, r7, #32
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002d44:	f107 0218 	add.w	r2, r7, #24
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d4e:	f107 0214 	add.w	r2, r7, #20
 8002d52:	601a      	str	r2, [r3, #0]
        q31_t     inA = *__SIMD32(source)++;
 8002d54:	f107 0210 	add.w	r2, r7, #16
 8002d58:	6813      	ldr	r3, [r2, #0]
 8002d5a:	1d19      	adds	r1, r3, #4
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6013      	str	r3, [r2, #0]
        *out2 = __SXTB16(__ROR(inA, 8));
 8002d66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d76:	2208      	movs	r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8002d7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d7e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8002d8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d103      	bne.n	8002d9c <arm_fully_connected_q7_opt+0x78a>
    return op1;
 8002d94:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	e007      	b.n	8002dac <arm_fully_connected_q7_opt+0x79a>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002d9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002da0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa62 f303 	ror.w	r3, r2, r3
 8002dac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002db0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002db2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	fa2f f283 	sxtb16	r2, r3
 8002dbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc0:	601a      	str	r2, [r3, #0]
  return(result);
 8002dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
        *out1 = __SXTB16(inA);
 8002dd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ddc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	fa2f f283 	sxtb16	r2, r3
 8002de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dec:	601a      	str	r2, [r3, #0]
  return(result);
 8002dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	601a      	str	r2, [r3, #0]
        return source;
 8002dfe:	f107 0310 	add.w	r3, r7, #16
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	f107 0320 	add.w	r3, r7, #32
 8002e08:	601a      	str	r2, [r3, #0]

            inV1 = *__SIMD32(pA)++;
 8002e0a:	f107 021c 	add.w	r2, r7, #28
 8002e0e:	6813      	ldr	r3, [r2, #0]
 8002e10:	1d19      	adds	r1, r3, #4
 8002e12:	6011      	str	r1, [r2, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
            sum = __SMLAD(inV1, inM11, sum);
 8002e1a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8002e1e:	f107 0318 	add.w	r3, r7, #24
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e2e:	6019      	str	r1, [r3, #0]
 8002e30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e34:	6018      	str	r0, [r3, #0]
 8002e36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8002e4c:	6809      	ldr	r1, [r1, #0]
 8002e4e:	fb23 1202 	smlad	r2, r3, r2, r1
 8002e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e56:	601a      	str	r2, [r3, #0]
  return(result);
 8002e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            inV2 = *__SIMD32(pA)++;
 8002e62:	f107 021c 	add.w	r2, r7, #28
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	1d19      	adds	r1, r3, #4
 8002e6a:	6011      	str	r1, [r2, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
            sum = __SMLAD(inV2, inM12, sum);
 8002e72:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002e82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e86:	6019      	str	r1, [r3, #0]
 8002e88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e8c:	6018      	str	r0, [r3, #0]
 8002e8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8002e94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002ea4:	6809      	ldr	r1, [r1, #0]
 8002ea6:	fb23 1202 	smlad	r2, r3, r2, r1
 8002eaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eae:	601a      	str	r2, [r3, #0]
  return(result);
 8002eb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

            colCnt--;
 8002eba:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8002ec4:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f47f af33 	bne.w	8002d34 <arm_fully_connected_q7_opt+0x722>
        }

        /* left-over of the vector */
        colCnt = dim_vec & 0x3;
 8002ece:	1dbb      	adds	r3, r7, #6
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	f003 0303 	and.w	r3, r3, #3
 8002ed6:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8002eda:	e023      	b.n	8002f24 <arm_fully_connected_q7_opt+0x912>
        {
            q15_t     inV = *pA++;
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1c99      	adds	r1, r3, #2
 8002ee4:	f107 021c 	add.w	r2, r7, #28
 8002ee8:	6011      	str	r1, [r2, #0]
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
            q7_t      inM = *pB++;
 8002ef0:	f107 0320 	add.w	r3, r7, #32
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	f107 0220 	add.w	r2, r7, #32
 8002efc:	6011      	str	r1, [r2, #0]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151
            sum += inV * inM;
 8002f04:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8002f08:	f997 2151 	ldrsb.w	r2, [r7, #337]	; 0x151
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002f14:	4413      	add	r3, r2
 8002f16:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
            colCnt--;
 8002f1a:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
        while (colCnt)
 8002f24:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1d7      	bne.n	8002edc <arm_fully_connected_q7_opt+0x8ca>
        }

        *pO++ = (q7_t) (__SSAT((sum >> out_shift), 8));
 8002f2c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002f36:	f8b7 21d4 	ldrh.w	r2, [r7, #468]	; 0x1d4
 8002f3a:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 8002f3e:	fa41 f202 	asr.w	r2, r1, r2
 8002f42:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002f46:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002f4a:	f302 0207 	ssat	r2, #8, r2
 8002f4e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f52:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f56:	b252      	sxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

        rowCnt--;
 8002f5a:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
    while (rowCnt)
 8002f64:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f aec4 	bne.w	8002cf6 <arm_fully_connected_q7_opt+0x6e4>
    }

#endif                          /* ARM_MATH_DSP */

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8002f6e:	2300      	movs	r3, #0

}
 8002f70:	4618      	mov	r0, r3
 8002f72:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}

08002f7a <arm_q7_to_q15_no_shift>:
 * </pre>    
 *   
 */

void arm_q7_to_q15_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b093      	sub	sp, #76	; 0x4c
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	617b      	str	r3, [r7, #20]
    q31_t     out1, out2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	089b      	lsrs	r3, r3, #2
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 8002f90:	e044      	b.n	800301c <arm_q7_to_q15_no_shift+0xa2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8002f92:	f107 0214 	add.w	r2, r7, #20
 8002f96:	6813      	ldr	r3, [r2, #0]
 8002f98:	1d19      	adds	r1, r3, #4
 8002f9a:	6011      	str	r1, [r2, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	643b      	str	r3, [r7, #64]	; 0x40

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 031f 	and.w	r3, r3, #31
 8002fae:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <arm_q7_to_q15_no_shift+0x40>
    return op1;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	e003      	b.n	8002fc2 <arm_q7_to_q15_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa62 f303 	ror.w	r3, r2, r3
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	fa2f f383 	sxtb16	r3, r3
 8002fca:	623b      	str	r3, [r7, #32]
  return(result);
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8002fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd6:	fa2f f383 	sxtb16	r3, r3
 8002fda:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38

#ifndef ARM_MATH_BIG_ENDIAN

        out2 = __PKHTB(in1, in2, 16);
 8002fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe2:	0c1b      	lsrs	r3, r3, #16
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fe8:	0c12      	lsrs	r2, r2, #16
 8002fea:	4313      	orrs	r3, r2
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
        out1 = __PKHBT(in2, in1, 16);
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	633b      	str	r3, [r7, #48]	; 0x30
        out1 = __PKHTB(in1, in2, 16);
        out2 = __PKHBT(in2, in1, 16);

#endif

        *__SIMD32(pDst)++ = out1;
 8002ffa:	f107 0208 	add.w	r2, r7, #8
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	1d19      	adds	r1, r3, #4
 8003002:	6011      	str	r1, [r2, #0]
 8003004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003006:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = out2;
 8003008:	f107 0208 	add.w	r2, r7, #8
 800300c:	6813      	ldr	r3, [r2, #0]
 800300e:	1d19      	adds	r1, r3, #4
 8003010:	6011      	str	r1, [r2, #0]
 8003012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003014:	601a      	str	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8003016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003018:	3b01      	subs	r3, #1
 800301a:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 800301c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1b7      	bne.n	8002f92 <arm_q7_to_q15_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 800302a:	e00c      	b.n	8003046 <arm_q7_to_q15_no_shift+0xcc>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	1c9a      	adds	r2, r3, #2
 8003030:	60ba      	str	r2, [r7, #8]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	1c51      	adds	r1, r2, #1
 8003036:	6179      	str	r1, [r7, #20]
 8003038:	f992 2000 	ldrsb.w	r2, [r2]
 800303c:	b212      	sxth	r2, r2
 800303e:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8003040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003042:	3b01      	subs	r3, #1
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
    while (blkCnt > 0u)
 8003046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ef      	bne.n	800302c <arm_q7_to_q15_no_shift+0xb2>
    }

}
 800304c:	bf00      	nop
 800304e:	374c      	adds	r7, #76	; 0x4c
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <arm_q7_to_q15_reordered_no_shift>:
 * The tail (i.e., last (N % 4) elements) will still be in original order.
 *   
 */

void arm_q7_to_q15_reordered_no_shift(const q7_t * pSrc, q15_t * pDst, uint32_t blockSize)
{
 8003058:	b480      	push	{r7}
 800305a:	b091      	sub	sp, #68	; 0x44
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
    const q7_t *pIn = pSrc;     /* Src pointer */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	617b      	str	r3, [r7, #20]
    q31_t     in1, in2;

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /*loop Unrolling */
    blkCnt = blockSize >> 2u;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0u)
 800306e:	e037      	b.n	80030e0 <arm_q7_to_q15_reordered_no_shift+0x88>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in = *__SIMD32(pIn)++;
 8003070:	f107 0214 	add.w	r2, r7, #20
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	1d19      	adds	r1, r3, #4
 8003078:	6011      	str	r1, [r2, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* rotatate in by 8 and extend two q7_t values to q15_t values */
        in1 = __SXTB16(__ROR(in, 8));
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	2308      	movs	r3, #8
 8003084:	61bb      	str	r3, [r7, #24]
  op2 %= 32U;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <arm_q7_to_q15_reordered_no_shift+0x40>
    return op1;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	e003      	b.n	80030a0 <arm_q7_to_q15_reordered_no_shift+0x48>
  return (op1 >> op2) | (op1 << (32U - op2));
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	fa62 f303 	ror.w	r3, r2, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	fa2f f383 	sxtb16	r3, r3
 80030a8:	623b      	str	r3, [r7, #32]
  return(result);
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	637b      	str	r3, [r7, #52]	; 0x34

        /* extend remainig two q7_t values to q15_t values */
        in2 = __SXTB16(in);
 80030ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	fa2f f383 	sxtb16	r3, r3
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30

#ifndef ARM_MATH_BIG_ENDIAN
        *__SIMD32(pDst)++ = in2;
 80030be:	f107 0208 	add.w	r2, r7, #8
 80030c2:	6813      	ldr	r3, [r2, #0]
 80030c4:	1d19      	adds	r1, r3, #4
 80030c6:	6011      	str	r1, [r2, #0]
 80030c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ca:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
 80030cc:	f107 0208 	add.w	r2, r7, #8
 80030d0:	6813      	ldr	r3, [r2, #0]
 80030d2:	1d19      	adds	r1, r3, #4
 80030d4:	6011      	str	r1, [r2, #0]
 80030d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d8:	601a      	str	r2, [r3, #0]
        *__SIMD32(pDst)++ = in1;
        *__SIMD32(pDst)++ = in2;
#endif

        /* Decrement the loop counter */
        blkCnt--;
 80030da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030dc:	3b01      	subs	r3, #1
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 80030e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1c4      	bne.n	8003070 <arm_q7_to_q15_reordered_no_shift+0x18>
    }

    /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
     ** No loop unrolling is used. */
    blkCnt = blockSize % 0x4u;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Loop over blockSize number of values */
    blkCnt = blockSize;

#endif                          /* #ifndef ARM_MATH_CM0_FAMILY */

    while (blkCnt > 0u)
 80030ee:	e00c      	b.n	800310a <arm_q7_to_q15_reordered_no_shift+0xb2>
    {
        /* C = (q15_t) A << 8 */
        /* convert from q7 to q15 and then store the results in the destination buffer */
        *pDst++ = (q15_t) * pIn++;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1c9a      	adds	r2, r3, #2
 80030f4:	60ba      	str	r2, [r7, #8]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	1c51      	adds	r1, r2, #1
 80030fa:	6179      	str	r1, [r7, #20]
 80030fc:	f992 2000 	ldrsb.w	r2, [r2]
 8003100:	b212      	sxth	r2, r2
 8003102:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        blkCnt--;
 8003104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003106:	3b01      	subs	r3, #1
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (blkCnt > 0u)
 800310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ef      	bne.n	80030f0 <arm_q7_to_q15_reordered_no_shift+0x98>
    }

}
 8003110:	bf00      	nop
 8003112:	3744      	adds	r7, #68	; 0x44
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <buffer_scale_back_q15_to_q7>:
 *
 * 
 */

static void buffer_scale_back_q15_to_q7(q15_t * buffer, q7_t * target, uint16_t length, uint16_t scale)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	460b      	mov	r3, r1
 800312c:	80fb      	strh	r3, [r7, #6]
 800312e:	4613      	mov	r3, r2
 8003130:	80bb      	strh	r3, [r7, #4]
    int       i;

    for (i = 0; i < length; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e011      	b.n	800315c <buffer_scale_back_q15_to_q7+0x40>
    {
        target[i] = (q7_t) (buffer[i] / scale);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	0052      	lsls	r2, r2, #1
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	440a      	add	r2, r1
 8003146:	f9b2 2000 	ldrsh.w	r2, [r2]
 800314a:	4611      	mov	r1, r2
 800314c:	88ba      	ldrh	r2, [r7, #4]
 800314e:	fb91 f2f2 	sdiv	r2, r1, r2
 8003152:	b252      	sxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < length; i++)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	3301      	adds	r3, #1
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	dce9      	bgt.n	8003138 <buffer_scale_back_q15_to_q7+0x1c>
    }
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <compare_and_replace_if_larger_q7>:

static void compare_and_replace_if_larger_q7(q7_t * base,   // base data
                                             q7_t * target, // compare target
                                             const uint16_t length  // data length
    )
{
 8003170:	b480      	push	{r7}
 8003172:	b08b      	sub	sp, #44	; 0x2c
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
    q7_t     *pIn = base;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	623b      	str	r3, [r7, #32]
    q7_t     *pCom = target;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	61fb      	str	r3, [r7, #28]
    union arm_nnword in;
    union arm_nnword com;
    uint16_t  cnt = length >> 2;
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	84fb      	strh	r3, [r7, #38]	; 0x26

    while (cnt > 0u)
 800318c:	e039      	b.n	8003202 <compare_and_replace_if_larger_q7+0x92>
    {
        in.word = *__SIMD32(pIn);
 800318e:	f107 0320 	add.w	r3, r7, #32
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61bb      	str	r3, [r7, #24]
        com.word = *__SIMD32(pCom)++;
 8003198:	f107 021c 	add.w	r2, r7, #28
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	1d19      	adds	r1, r3, #4
 80031a0:	6011      	str	r1, [r2, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	617b      	str	r3, [r7, #20]

        // if version
        if (com.bytes[0] > in.bytes[0])
 80031a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80031aa:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	dd02      	ble.n	80031b8 <compare_and_replace_if_larger_q7+0x48>
            in.bytes[0] = com.bytes[0];
 80031b2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80031b6:	763b      	strb	r3, [r7, #24]
        if (com.bytes[1] > in.bytes[1])
 80031b8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80031bc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dd02      	ble.n	80031ca <compare_and_replace_if_larger_q7+0x5a>
            in.bytes[1] = com.bytes[1];
 80031c4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80031c8:	767b      	strb	r3, [r7, #25]
        if (com.bytes[2] > in.bytes[2])
 80031ca:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80031ce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	dd02      	ble.n	80031dc <compare_and_replace_if_larger_q7+0x6c>
            in.bytes[2] = com.bytes[2];
 80031d6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80031da:	76bb      	strb	r3, [r7, #26]
        if (com.bytes[3] > in.bytes[3])
 80031dc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80031e0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dd02      	ble.n	80031ee <compare_and_replace_if_larger_q7+0x7e>
            in.bytes[3] = com.bytes[3];
 80031e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031ec:	76fb      	strb	r3, [r7, #27]

        *__SIMD32(pIn)++ = in.word;
 80031ee:	f107 0220 	add.w	r2, r7, #32
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	1d19      	adds	r1, r3, #4
 80031f6:	6011      	str	r1, [r2, #0]
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	601a      	str	r2, [r3, #0]

        cnt--;
 80031fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031fe:	3b01      	subs	r3, #1
 8003200:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (cnt > 0u)
 8003202:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1c2      	bne.n	800318e <compare_and_replace_if_larger_q7+0x1e>
    }
}
 8003208:	bf00      	nop
 800320a:	372c      	adds	r7, #44	; 0x2c
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <accumulate_q7_to_q15>:

static void accumulate_q7_to_q15(q15_t * base, q7_t * target, const uint16_t length)
{
 8003214:	b480      	push	{r7}
 8003216:	b09b      	sub	sp, #108	; 0x6c
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	4613      	mov	r3, r2
 8003220:	80fb      	strh	r3, [r7, #6]
    q15_t    *pCnt = base;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	61bb      	str	r3, [r7, #24]
    q7_t     *pV = target;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	617b      	str	r3, [r7, #20]
    q31_t     v1, v2, vo1, vo2;
    uint16_t  cnt = length >> 2;
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    q31_t     in;

    while (cnt > 0u)
 8003232:	e062      	b.n	80032fa <accumulate_q7_to_q15+0xe6>
    {
        q31_t     value = *__SIMD32(pV)++;
 8003234:	f107 0214 	add.w	r2, r7, #20
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	1d19      	adds	r1, r3, #4
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	663b      	str	r3, [r7, #96]	; 0x60
        v1 = __SXTB16(__ROR(value, 8));
 8003242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	2308      	movs	r3, #8
 8003248:	61fb      	str	r3, [r7, #28]
  op2 %= 32U;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	61fb      	str	r3, [r7, #28]
  if (op2 == 0U)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <accumulate_q7_to_q15+0x48>
    return op1;
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	e003      	b.n	8003264 <accumulate_q7_to_q15+0x50>
  return (op1 >> op2) | (op1 << (32U - op2));
 800325c:	6a3a      	ldr	r2, [r7, #32]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa62 f303 	ror.w	r3, r2, r3
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	fa2f f383 	sxtb16	r3, r3
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	65fb      	str	r3, [r7, #92]	; 0x5c
        v2 = __SXTB16(value);
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	fa2f f383 	sxtb16	r3, r3
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	65bb      	str	r3, [r7, #88]	; 0x58
#ifndef ARM_MATH_BIG_ENDIAN

        vo2 = __PKHTB(v1, v2, 16);
 8003282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800328a:	0c12      	lsrs	r2, r2, #16
 800328c:	4313      	orrs	r3, r2
 800328e:	657b      	str	r3, [r7, #84]	; 0x54
        vo1 = __PKHBT(v2, v1, 16);
 8003290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003292:	b29a      	uxth	r2, r3
 8003294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	4313      	orrs	r3, r2
 800329a:	653b      	str	r3, [r7, #80]	; 0x50
        vo1 = __PKHTB(v1, v2, 16);
        vo2 = __PKHBT(v2, v1, 16);

#endif

        in = *__SIMD32(pCnt);
 800329c:	f107 0318 	add.w	r3, r7, #24
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	64fb      	str	r3, [r7, #76]	; 0x4c
        *__SIMD32(pCnt)++ = __QADD16(vo1, in);
 80032a6:	f107 0218 	add.w	r2, r7, #24
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	1d19      	adds	r1, r3, #4
 80032ae:	6011      	str	r1, [r2, #0]
 80032b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80032b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b4:	63f9      	str	r1, [r7, #60]	; 0x3c
 80032b6:	63ba      	str	r2, [r7, #56]	; 0x38
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80032b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032bc:	fa92 f211 	qadd16	r2, r2, r1
 80032c0:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80032c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032c4:	601a      	str	r2, [r3, #0]

        in = *__SIMD32(pCnt);
 80032c6:	f107 0318 	add.w	r3, r7, #24
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
        *__SIMD32(pCnt)++ = __QADD16(vo2, in);
 80032d0:	f107 0218 	add.w	r2, r7, #24
 80032d4:	6813      	ldr	r3, [r2, #0]
 80032d6:	1d19      	adds	r1, r3, #4
 80032d8:	6011      	str	r1, [r2, #0]
 80032da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032de:	64b9      	str	r1, [r7, #72]	; 0x48
 80032e0:	647a      	str	r2, [r7, #68]	; 0x44
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80032e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032e6:	fa92 f211 	qadd16	r2, r2, r1
 80032ea:	643a      	str	r2, [r7, #64]	; 0x40
  return(result);
 80032ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032ee:	601a      	str	r2, [r3, #0]

        cnt--;
 80032f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80032f4:	3b01      	subs	r3, #1
 80032f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    while (cnt > 0u)
 80032fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d198      	bne.n	8003234 <accumulate_q7_to_q15+0x20>
    }
    cnt = length & 0x3;
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    while (cnt > 0u)
 800330c:	e014      	b.n	8003338 <accumulate_q7_to_q15+0x124>
    {
        *pCnt++ += *pV++;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	617a      	str	r2, [r7, #20]
 8003314:	f993 0000 	ldrsb.w	r0, [r3]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	1c9a      	adds	r2, r3, #2
 800331c:	61ba      	str	r2, [r7, #24]
 800331e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003322:	b291      	uxth	r1, r2
 8003324:	b282      	uxth	r2, r0
 8003326:	440a      	add	r2, r1
 8003328:	b292      	uxth	r2, r2
 800332a:	b212      	sxth	r2, r2
 800332c:	801a      	strh	r2, [r3, #0]
        cnt--;
 800332e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003332:	3b01      	subs	r3, #1
 8003334:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    while (cnt > 0u)
 8003338:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1e6      	bne.n	800330e <accumulate_q7_to_q15+0xfa>
    }
}
 8003340:	bf00      	nop
 8003342:	376c      	adds	r7, #108	; 0x6c
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <arm_maxpool_q7_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08c      	sub	sp, #48	; 0x30
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    int16_t   i_x, i_y;

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 8003366:	2300      	movs	r3, #0
 8003368:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800336a:	e08d      	b.n	8003488 <arm_maxpool_q7_HWC+0x13c>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 800336c:	2300      	movs	r3, #0
 800336e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003370:	e07d      	b.n	800346e <arm_maxpool_q7_HWC+0x122>
        {
            /* for each output pixel */
            q7_t     *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 8003372:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003376:	897a      	ldrh	r2, [r7, #10]
 8003378:	fb02 f203 	mul.w	r2, r2, r3
 800337c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003380:	4413      	add	r3, r2
 8003382:	893a      	ldrh	r2, [r7, #8]
 8003384:	fb02 f303 	mul.w	r3, r2, r3
 8003388:	461a      	mov	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
            q7_t     *win_start;
            q7_t     *win_stop;
            if (i_x * stride - padding < 0)
 8003390:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003394:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003396:	fb02 f203 	mul.w	r2, r2, r3
 800339a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da02      	bge.n	80033a8 <arm_maxpool_q7_HWC+0x5c>
            {
                win_start = target;
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033a6:	e013      	b.n	80033d0 <arm_maxpool_q7_HWC+0x84>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 80033a8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80033ac:	897a      	ldrh	r2, [r7, #10]
 80033ae:	fb02 f203 	mul.w	r2, r2, r3
 80033b2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80033b6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	441a      	add	r2, r3
 80033be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	893a      	ldrh	r2, [r7, #8]
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 80033d0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80033d4:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80033d6:	fb02 f203 	mul.w	r2, r2, r3
 80033da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80033dc:	1ad2      	subs	r2, r2, r3
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	441a      	add	r2, r3
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	db0d      	blt.n	8003404 <arm_maxpool_q7_HWC+0xb8>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 80033e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80033ec:	3301      	adds	r3, #1
 80033ee:	897a      	ldrh	r2, [r7, #10]
 80033f0:	fb02 f303 	mul.w	r3, r2, r3
 80033f4:	893a      	ldrh	r2, [r7, #8]
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
 8003402:	e015      	b.n	8003430 <arm_maxpool_q7_HWC+0xe4>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8003404:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003408:	897a      	ldrh	r2, [r7, #10]
 800340a:	fb02 f203 	mul.w	r2, r2, r3
 800340e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003412:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	441a      	add	r2, r3
 800341a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800341c:	1ad2      	subs	r2, r2, r3
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	4413      	add	r3, r2
 8003422:	893a      	ldrh	r2, [r7, #8]
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	461a      	mov	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* first step is to copy over initial data */
            /* arm_copy_q7(win_start, target, ch_im_in); */
            memmove(target, win_start, ch_im_in);
 8003430:	893b      	ldrh	r3, [r7, #8]
 8003432:	461a      	mov	r2, r3
 8003434:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003436:	69b8      	ldr	r0, [r7, #24]
 8003438:	f005 fbfc 	bl	8008c34 <memmove>

            /* start the max operation from the second part */
            win_start += ch_im_in;
 800343c:	893b      	ldrh	r3, [r7, #8]
 800343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003440:	4413      	add	r3, r2
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
            for (; win_start < win_stop; win_start += ch_im_in)
 8003444:	e009      	b.n	800345a <arm_maxpool_q7_HWC+0x10e>
            {
                compare_and_replace_if_larger_q7(target, win_start, ch_im_in);
 8003446:	893b      	ldrh	r3, [r7, #8]
 8003448:	461a      	mov	r2, r3
 800344a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344c:	69b8      	ldr	r0, [r7, #24]
 800344e:	f7ff fe8f 	bl	8003170 <compare_and_replace_if_larger_q7>
            for (; win_start < win_stop; win_start += ch_im_in)
 8003452:	893b      	ldrh	r3, [r7, #8]
 8003454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003456:	4413      	add	r3, r2
 8003458:	62bb      	str	r3, [r7, #40]	; 0x28
 800345a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	429a      	cmp	r2, r3
 8003460:	d3f1      	bcc.n	8003446 <arm_maxpool_q7_HWC+0xfa>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8003462:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3301      	adds	r3, #1
 800346a:	b29b      	uxth	r3, r3
 800346c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800346e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8003472:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003476:	429a      	cmp	r2, r3
 8003478:	f6ff af7b 	blt.w	8003372 <arm_maxpool_q7_HWC+0x26>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 800347c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003480:	b29b      	uxth	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003488:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800348c:	897b      	ldrh	r3, [r7, #10]
 800348e:	429a      	cmp	r2, r3
 8003490:	f6ff af6c 	blt.w	800336c <arm_maxpool_q7_HWC+0x20>
            }
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003494:	2300      	movs	r3, #0
 8003496:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003498:	e084      	b.n	80035a4 <arm_maxpool_q7_HWC+0x258>
    {

        /* for each output row */
        q7_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 800349a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800349e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	893a      	ldrh	r2, [r7, #8]
 80034a8:	fb02 f303 	mul.w	r3, r2, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b0:	4413      	add	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
        q7_t     *row_start;
        q7_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 80034b4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80034b8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80034ba:	fb02 f203 	mul.w	r2, r2, r3
 80034be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da02      	bge.n	80034cc <arm_maxpool_q7_HWC+0x180>
        {
            row_start = Im_in;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	e010      	b.n	80034ee <arm_maxpool_q7_HWC+0x1a2>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 80034cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80034d0:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80034d2:	fb02 f203 	mul.w	r2, r2, r3
 80034d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	897a      	ldrh	r2, [r7, #10]
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	893a      	ldrh	r2, [r7, #8]
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	623b      	str	r3, [r7, #32]
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 80034ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80034f2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80034f4:	fb02 f203 	mul.w	r2, r2, r3
 80034f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	441a      	add	r2, r3
 8003500:	897b      	ldrh	r3, [r7, #10]
 8003502:	429a      	cmp	r2, r3
 8003504:	db0b      	blt.n	800351e <arm_maxpool_q7_HWC+0x1d2>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 8003506:	897b      	ldrh	r3, [r7, #10]
 8003508:	897a      	ldrh	r2, [r7, #10]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	893a      	ldrh	r2, [r7, #8]
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	461a      	mov	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	61fb      	str	r3, [r7, #28]
 800351c:	e012      	b.n	8003544 <arm_maxpool_q7_HWC+0x1f8>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 800351e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003522:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8003524:	fb02 f203 	mul.w	r2, r2, r3
 8003528:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4413      	add	r3, r2
 8003530:	897a      	ldrh	r2, [r7, #10]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	893a      	ldrh	r2, [r7, #8]
 8003538:	fb02 f303 	mul.w	r3, r2, r3
 800353c:	461a      	mov	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4413      	add	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]
        }

        /* copy over the first row */
        /* arm_copy_q7(row_start, target, dim_im_out * ch_im_in); */
        memmove(target, row_start, dim_im_out * ch_im_in);
 8003544:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	461a      	mov	r2, r3
 8003550:	6a39      	ldr	r1, [r7, #32]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f005 fb6e 	bl	8008c34 <memmove>

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	897a      	ldrh	r2, [r7, #10]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	461a      	mov	r2, r3
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	4413      	add	r3, r2
 8003566:	623b      	str	r3, [r7, #32]

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8003568:	e012      	b.n	8003590 <arm_maxpool_q7_HWC+0x244>
        {
            compare_and_replace_if_larger_q7(target, row_start, dim_im_out * ch_im_in);
 800356a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800356e:	893b      	ldrh	r3, [r7, #8]
 8003570:	fb12 f303 	smulbb	r3, r2, r3
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	6a39      	ldr	r1, [r7, #32]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff fdf8 	bl	8003170 <compare_and_replace_if_larger_q7>
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8003580:	897b      	ldrh	r3, [r7, #10]
 8003582:	893a      	ldrh	r2, [r7, #8]
 8003584:	fb02 f303 	mul.w	r3, r2, r3
 8003588:	461a      	mov	r2, r3
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	4413      	add	r3, r2
 800358e:	623b      	str	r3, [r7, #32]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3e8      	bcc.n	800356a <arm_maxpool_q7_HWC+0x21e>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003598:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800359c:	b29b      	uxth	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035a4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80035a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035ac:	429a      	cmp	r2, r3
 80035ae:	f6ff af74 	blt.w	800349a <arm_maxpool_q7_HWC+0x14e>
        }
    }

#endif                          /* ARM_MATH_DSP */

}
 80035b2:	bf00      	nop
 80035b4:	3730      	adds	r7, #48	; 0x30
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <arm_avepool_q7_HWC>:
                   const uint16_t dim_im_in,
                   const uint16_t ch_im_in,
                   const uint16_t dim_kernel,
                   const uint16_t padding,
                   const uint16_t stride, const uint16_t dim_im_out, q7_t * bufferA, q7_t * Im_out)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b08e      	sub	sp, #56	; 0x38
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	4608      	mov	r0, r1
 80035c4:	4611      	mov	r1, r2
 80035c6:	461a      	mov	r2, r3
 80035c8:	4603      	mov	r3, r0
 80035ca:	817b      	strh	r3, [r7, #10]
 80035cc:	460b      	mov	r3, r1
 80035ce:	813b      	strh	r3, [r7, #8]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80fb      	strh	r3, [r7, #6]

#if defined (ARM_MATH_DSP)
    /* Run the following code for Cortex-M4 and Cortex-M7 */

    q15_t    *buffer = (q15_t *) bufferA;
 80035d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d6:	61fb      	str	r3, [r7, #28]
    int16_t   i_x, i_y;
    int16_t   count = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	867b      	strh	r3, [r7, #50]	; 0x32

    /* first does the pooling along x axis */
    for (i_y = 0; i_y < dim_im_in; i_y++)
 80035dc:	2300      	movs	r3, #0
 80035de:	86bb      	strh	r3, [r7, #52]	; 0x34
 80035e0:	e0a3      	b.n	800372a <arm_avepool_q7_HWC+0x170>
    {

        for (i_x = 0; i_x < dim_im_out; i_x++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035e6:	e093      	b.n	8003710 <arm_avepool_q7_HWC+0x156>
        {
            /* for each output pixel */
            q7_t     *target = Im_in + (i_y * dim_im_in + i_x) * ch_im_in;
 80035e8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80035ec:	897a      	ldrh	r2, [r7, #10]
 80035ee:	fb02 f203 	mul.w	r2, r2, r3
 80035f2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80035f6:	4413      	add	r3, r2
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
            q7_t     *win_start;
            q7_t     *win_stop;
            if (i_x * stride - padding < 0)
 8003606:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800360a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800360e:	fb02 f203 	mul.w	r2, r2, r3
 8003612:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	da02      	bge.n	8003622 <arm_avepool_q7_HWC+0x68>
            {
                win_start = target;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	e015      	b.n	800364e <arm_avepool_q7_HWC+0x94>
            } else
            {
                win_start = Im_in + (i_y * dim_im_in + i_x * stride - padding) * ch_im_in;
 8003622:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003626:	897a      	ldrh	r2, [r7, #10]
 8003628:	fb02 f203 	mul.w	r2, r2, r3
 800362c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003630:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	441a      	add	r2, r3
 800363a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	893a      	ldrh	r2, [r7, #8]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            if (i_x * stride - padding + dim_kernel >= dim_im_in)
 800364e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003652:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003656:	fb02 f203 	mul.w	r2, r2, r3
 800365a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	441a      	add	r2, r3
 8003664:	897b      	ldrh	r3, [r7, #10]
 8003666:	429a      	cmp	r2, r3
 8003668:	db0d      	blt.n	8003686 <arm_avepool_q7_HWC+0xcc>
            {
                win_stop = Im_in + (i_y * dim_im_in + dim_im_in) * ch_im_in;
 800366a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800366e:	3301      	adds	r3, #1
 8003670:	897a      	ldrh	r2, [r7, #10]
 8003672:	fb02 f303 	mul.w	r3, r2, r3
 8003676:	893a      	ldrh	r2, [r7, #8]
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	461a      	mov	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4413      	add	r3, r2
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
 8003684:	e017      	b.n	80036b6 <arm_avepool_q7_HWC+0xfc>
            } else
            {
                win_stop = Im_in + (i_y * dim_im_in + i_x * stride - padding + dim_kernel) * ch_im_in;
 8003686:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800368a:	897a      	ldrh	r2, [r7, #10]
 800368c:	fb02 f203 	mul.w	r2, r2, r3
 8003690:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003694:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	441a      	add	r2, r3
 800369e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036a2:	1ad2      	subs	r2, r2, r3
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4413      	add	r3, r2
 80036a8:	893a      	ldrh	r2, [r7, #8]
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            /* first step is to copy over initial data */
            arm_q7_to_q15_no_shift(win_start, buffer, ch_im_in);
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	461a      	mov	r2, r3
 80036ba:	69f9      	ldr	r1, [r7, #28]
 80036bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036be:	f7ff fc5c 	bl	8002f7a <arm_q7_to_q15_no_shift>
            count = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	867b      	strh	r3, [r7, #50]	; 0x32

            /* start the max operation from the second part */
            win_start += ch_im_in;
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ca:	4413      	add	r3, r2
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (; win_start < win_stop; win_start += ch_im_in)
 80036ce:	e00f      	b.n	80036f0 <arm_avepool_q7_HWC+0x136>
            {
                accumulate_q7_to_q15(buffer, win_start, ch_im_in);
 80036d0:	893b      	ldrh	r3, [r7, #8]
 80036d2:	461a      	mov	r2, r3
 80036d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d6:	69f8      	ldr	r0, [r7, #28]
 80036d8:	f7ff fd9c 	bl	8003214 <accumulate_q7_to_q15>
                count++;
 80036dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	867b      	strh	r3, [r7, #50]	; 0x32
            for (; win_start < win_stop; win_start += ch_im_in)
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ec:	4413      	add	r3, r2
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3eb      	bcc.n	80036d0 <arm_avepool_q7_HWC+0x116>
            }
            buffer_scale_back_q15_to_q7(buffer, target, ch_im_in, count);
 80036f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80036fa:	893a      	ldrh	r2, [r7, #8]
 80036fc:	69b9      	ldr	r1, [r7, #24]
 80036fe:	69f8      	ldr	r0, [r7, #28]
 8003700:	f7ff fd0c 	bl	800311c <buffer_scale_back_q15_to_q7>
        for (i_x = 0; i_x < dim_im_out; i_x++)
 8003704:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	3301      	adds	r3, #1
 800370c:	b29b      	uxth	r3, r3
 800370e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003710:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003714:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003718:	429a      	cmp	r2, r3
 800371a:	f6ff af65 	blt.w	80035e8 <arm_avepool_q7_HWC+0x2e>
    for (i_y = 0; i_y < dim_im_in; i_y++)
 800371e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003722:	b29b      	uxth	r3, r3
 8003724:	3301      	adds	r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	86bb      	strh	r3, [r7, #52]	; 0x34
 800372a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 800372e:	897b      	ldrh	r3, [r7, #10]
 8003730:	429a      	cmp	r2, r3
 8003732:	f6ff af56 	blt.w	80035e2 <arm_avepool_q7_HWC+0x28>
        }
    }

    /* then does the pooling along y axis */
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003736:	2300      	movs	r3, #0
 8003738:	86bb      	strh	r3, [r7, #52]	; 0x34
 800373a:	e09f      	b.n	800387c <arm_avepool_q7_HWC+0x2c2>
    {
        /* for each output row */
        q7_t     *target = Im_out + i_y * dim_im_out * ch_im_in;
 800373c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003740:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003744:	fb02 f303 	mul.w	r3, r2, r3
 8003748:	893a      	ldrh	r2, [r7, #8]
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003752:	4413      	add	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
        q7_t     *row_start;
        q7_t     *row_end;
        /* setting the starting row */
        if (i_y * stride - padding < 0)
 8003756:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800375a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800375e:	fb02 f203 	mul.w	r2, r2, r3
 8003762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	da02      	bge.n	8003772 <arm_avepool_q7_HWC+0x1b8>
        {
            row_start = Im_in;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	e012      	b.n	8003798 <arm_avepool_q7_HWC+0x1de>
        } else
        {
            row_start = Im_in + (i_y * stride - padding) * dim_im_in * ch_im_in;
 8003772:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003776:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800377a:	fb02 f203 	mul.w	r2, r2, r3
 800377e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	897a      	ldrh	r2, [r7, #10]
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	893a      	ldrh	r2, [r7, #8]
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	461a      	mov	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
        }
        /* setting the stopping row */
        if (i_y * stride - padding + dim_kernel >= dim_im_in)
 8003798:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800379c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80037a0:	fb02 f203 	mul.w	r2, r2, r3
 80037a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037a8:	1ad2      	subs	r2, r2, r3
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	441a      	add	r2, r3
 80037ae:	897b      	ldrh	r3, [r7, #10]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	db0b      	blt.n	80037cc <arm_avepool_q7_HWC+0x212>
        {
            row_end = Im_in + dim_im_in * dim_im_in * ch_im_in;
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	897a      	ldrh	r2, [r7, #10]
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	893a      	ldrh	r2, [r7, #8]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4413      	add	r3, r2
 80037c8:	623b      	str	r3, [r7, #32]
 80037ca:	e014      	b.n	80037f6 <arm_avepool_q7_HWC+0x23c>
        } else
        {
            row_end = Im_in + (i_y * stride - padding + dim_kernel) * dim_im_in * ch_im_in;
 80037cc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80037d0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80037d4:	fb02 f203 	mul.w	r2, r2, r3
 80037d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	4413      	add	r3, r2
 80037e2:	897a      	ldrh	r2, [r7, #10]
 80037e4:	fb02 f303 	mul.w	r3, r2, r3
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	623b      	str	r3, [r7, #32]
        }

        /* copy over the first row */
        arm_q7_to_q15_no_shift(row_start, buffer, dim_im_out * ch_im_in);
 80037f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80037fa:	893a      	ldrh	r2, [r7, #8]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	461a      	mov	r2, r3
 8003802:	69f9      	ldr	r1, [r7, #28]
 8003804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003806:	f7ff fbb8 	bl	8002f7a <arm_q7_to_q15_no_shift>
        count = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	867b      	strh	r3, [r7, #50]	; 0x32

        /* move over to next row */
        row_start += ch_im_in * dim_im_in;
 800380e:	893b      	ldrh	r3, [r7, #8]
 8003810:	897a      	ldrh	r2, [r7, #10]
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	461a      	mov	r2, r3
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	4413      	add	r3, r2
 800381c:	627b      	str	r3, [r7, #36]	; 0x24

        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 800381e:	e018      	b.n	8003852 <arm_avepool_q7_HWC+0x298>
        {
            accumulate_q7_to_q15(buffer, row_start, dim_im_out * ch_im_in);
 8003820:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	fb12 f303 	smulbb	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003830:	69f8      	ldr	r0, [r7, #28]
 8003832:	f7ff fcef 	bl	8003214 <accumulate_q7_to_q15>
            count++;
 8003836:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	b29b      	uxth	r3, r3
 8003840:	867b      	strh	r3, [r7, #50]	; 0x32
        for (; row_start < row_end; row_start += dim_im_in * ch_im_in)
 8003842:	897b      	ldrh	r3, [r7, #10]
 8003844:	893a      	ldrh	r2, [r7, #8]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	461a      	mov	r2, r3
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	4413      	add	r3, r2
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	429a      	cmp	r2, r3
 8003858:	d3e2      	bcc.n	8003820 <arm_avepool_q7_HWC+0x266>
        }
        buffer_scale_back_q15_to_q7(buffer, target, dim_im_out * ch_im_in, count);
 800385a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800385e:	893b      	ldrh	r3, [r7, #8]
 8003860:	fb12 f303 	smulbb	r3, r2, r3
 8003864:	b29a      	uxth	r2, r3
 8003866:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003868:	6979      	ldr	r1, [r7, #20]
 800386a:	69f8      	ldr	r0, [r7, #28]
 800386c:	f7ff fc56 	bl	800311c <buffer_scale_back_q15_to_q7>
    for (i_y = 0; i_y < dim_im_out; i_y++)
 8003870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003874:	b29b      	uxth	r3, r3
 8003876:	3301      	adds	r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800387c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8003880:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003884:	429a      	cmp	r2, r3
 8003886:	f6ff af59 	blt.w	800373c <arm_avepool_q7_HWC+0x182>
        }
    }

#endif                          /* ARM_MATH_DSP */

}
 800388a:	bf00      	nop
 800388c:	3738      	adds	r7, #56	; 0x38
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003898:	4a0e      	ldr	r2, [pc, #56]	; (80038d4 <HAL_Init+0x40>)
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <HAL_Init+0x40>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <HAL_Init+0x40>)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_Init+0x40>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038b0:	4a08      	ldr	r2, [pc, #32]	; (80038d4 <HAL_Init+0x40>)
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_Init+0x40>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038bc:	2003      	movs	r0, #3
 80038be:	f000 f94b 	bl	8003b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038c2:	2000      	movs	r0, #0
 80038c4:	f000 f808 	bl	80038d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c8:	f004 fd6c 	bl	80083a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023c00 	.word	0x40023c00

080038d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_InitTick+0x54>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_InitTick+0x58>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f963 	bl	8003bc2 <HAL_SYSTICK_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e00e      	b.n	8003924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0f      	cmp	r3, #15
 800390a:	d80a      	bhi.n	8003922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800390c:	2200      	movs	r2, #0
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	f04f 30ff 	mov.w	r0, #4294967295
 8003914:	f000 f92b 	bl	8003b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003918:	4a06      	ldr	r2, [pc, #24]	; (8003934 <HAL_InitTick+0x5c>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200081c4 	.word	0x200081c4
 8003930:	20000004 	.word	0x20000004
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_IncTick+0x20>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_IncTick+0x24>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4413      	add	r3, r2
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <HAL_IncTick+0x24>)
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004
 800395c:	2000825c 	.word	0x2000825c

08003960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return uwTick;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <HAL_GetTick+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	2000825c 	.word	0x2000825c

08003978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003980:	f7ff ffee 	bl	8003960 <HAL_GetTick>
 8003984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d005      	beq.n	800399e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_Delay+0x40>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800399e:	bf00      	nop
 80039a0:	f7ff ffde 	bl	8003960 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	1ad2      	subs	r2, r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d3f7      	bcc.n	80039a0 <HAL_Delay+0x28>
  {
  }
}
 80039b0:	bf00      	nop
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000004 	.word	0x20000004

080039bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039d8:	4013      	ands	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ee:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <__NVIC_SetPriorityGrouping+0x44>)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	60d3      	str	r3, [r2, #12]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <__NVIC_GetPriorityGrouping+0x18>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	f003 0307 	and.w	r3, r3, #7
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	db0b      	blt.n	8003a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a32:	4909      	ldr	r1, [pc, #36]	; (8003a58 <__NVIC_EnableIRQ+0x38>)
 8003a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	79fa      	ldrb	r2, [r7, #7]
 8003a3c:	f002 021f 	and.w	r2, r2, #31
 8003a40:	2001      	movs	r0, #1
 8003a42:	fa00 f202 	lsl.w	r2, r0, r2
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000e100 	.word	0xe000e100

08003a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db0a      	blt.n	8003a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a70:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <__NVIC_SetPriority+0x4c>)
 8003a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a84:	e00a      	b.n	8003a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a86:	4909      	ldr	r1, [pc, #36]	; (8003aac <__NVIC_SetPriority+0x50>)
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	3b04      	subs	r3, #4
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	0112      	lsls	r2, r2, #4
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	440b      	add	r3, r1
 8003a9a:	761a      	strb	r2, [r3, #24]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000e100 	.word	0xe000e100
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f1c3 0307 	rsb	r3, r3, #7
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	bf28      	it	cs
 8003ace:	2304      	movcs	r3, #4
 8003ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d902      	bls.n	8003ae0 <NVIC_EncodePriority+0x30>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3b03      	subs	r3, #3
 8003ade:	e000      	b.n	8003ae2 <NVIC_EncodePriority+0x32>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	401a      	ands	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af6:	2101      	movs	r1, #1
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	1e59      	subs	r1, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b04:	4313      	orrs	r3, r2
         );
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b24:	d301      	bcc.n	8003b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00f      	b.n	8003b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <SysTick_Config+0x40>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b32:	210f      	movs	r1, #15
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	f7ff ff90 	bl	8003a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <SysTick_Config+0x40>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <SysTick_Config+0x40>)
 8003b44:	2207      	movs	r2, #7
 8003b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	e000e010 	.word	0xe000e010

08003b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ff2b 	bl	80039bc <__NVIC_SetPriorityGrouping>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b086      	sub	sp, #24
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b80:	f7ff ff40 	bl	8003a04 <__NVIC_GetPriorityGrouping>
 8003b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff90 	bl	8003ab0 <NVIC_EncodePriority>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff5f 	bl	8003a5c <__NVIC_SetPriority>
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	4603      	mov	r3, r0
 8003bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff33 	bl	8003a20 <__NVIC_EnableIRQ>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ffa2 	bl	8003b14 <SysTick_Config>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_DCMI_Start_DMA+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e086      	b.n	8003d0a <HAL_DCMI_Start_DMA+0x12e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	f022 0202 	bic.w	r2, r2, #2
 8003c2a:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_DCMI_Start_DMA+0x138>)
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <HAL_DCMI_Start_DMA+0x13c>)
 8003c4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	2200      	movs	r2, #0
 8003c52:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d20a      	bcs.n	8003c7e <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3328      	adds	r3, #40	; 0x28
 8003c72:	4619      	mov	r1, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	f000 fb08 	bl	800428c <HAL_DMA_Start_IT>
 8003c7c:	e038      	b.n	8003cf0 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <HAL_DCMI_Start_DMA+0x138>)
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8003c98:	e009      	b.n	8003cae <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	085a      	lsrs	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	005a      	lsls	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d2f0      	bcs.n	8003c9a <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	1e9a      	subs	r2, r3, #2
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	009a      	lsls	r2, r3, #2
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3328      	adds	r3, #40	; 0x28
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	f000 fe28 	bl	8004940 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	08003f0d 	.word	0x08003f0d
 8003d18:	08004037 	.word	0x08004037

08003d1c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8003d24:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <HAL_DCMI_Stop+0xb0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	4a29      	ldr	r2, [pc, #164]	; (8003dd0 <HAL_DCMI_Stop+0xb4>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_DCMI_Stop+0x2a>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e03d      	b.n	8003dc2 <HAL_DCMI_Stop+0xa6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	60ba      	str	r2, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_DCMI_Stop+0x64>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1eb      	bne.n	8003d66 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fad2 	bl	800434c <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200081c4 	.word	0x200081c4
 8003dd0:	92492493 	.word	0x92492493

08003dd4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	f043 0202 	orr.w	r2, r3, #2
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2204      	movs	r2, #4
 8003e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	4a2f      	ldr	r2, [pc, #188]	; (8003ecc <HAL_DCMI_IRQHandler+0xf8>)
 8003e10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fb08 	bl	800442c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	4a21      	ldr	r2, [pc, #132]	; (8003ecc <HAL_DCMI_IRQHandler+0xf8>)
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 faec 	bl	800442c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2210      	movs	r2, #16
 8003e64:	615a      	str	r2, [r3, #20]
    
    /* Line interrupt Callback */
    HAL_DCMI_LineEventCallback(hdcmi);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f83c 	bl	8003ee4 <HAL_DCMI_LineEventCallback>
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	615a      	str	r2, [r3, #20]
    
    /* VSYNC Callback */
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f83a 	bl	8003ef8 <HAL_DCMI_VsyncEventCallback>
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d019      	beq.n	8003ec2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d107      	bne.n	8003eac <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	68d2      	ldr	r2, [r2, #12]
 8003ea6:	f022 021e 	bic.w	r2, r2, #30
 8003eaa:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	60da      	str	r2, [r3, #12]

    /* Frame Callback */
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f003 ff65 	bl	8007d8c <HAL_DCMI_FrameEventCallback>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08004037 	.word	0x08004037

08003ed0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d043      	beq.n	8003fae <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f32:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d118      	bne.n	8003f72 <DCMI_DMAXferCplt+0x66>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d015      	beq.n	8003f72 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	00da      	lsls	r2, r3, #3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	4619      	mov	r1, r3
 8003f62:	f001 ff29 	bl	8005db8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	1e5a      	subs	r2, r3, #1
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	e044      	b.n	8003ffc <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13c      	bne.n	8003ffc <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	00da      	lsls	r2, r3, #3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f001 ff0b 	bl	8005db8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	1e5a      	subs	r2, r3, #1
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
 8003fac:	e026      	b.n	8003ffc <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	e017      	b.n	8003ffc <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10f      	bne.n	8003ffc <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003fec:	0091      	lsls	r1, r2, #2
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	429a      	cmp	r2, r3
 8004006:	d112      	bne.n	800402e <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	68d2      	ldr	r2, [r2, #12]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d103      	bne.n	800402e <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004042:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* DCMI error Callback */
  HAL_DCMI_ErrorCallback(hdcmi);
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ff3a 	bl	8003ed0 <HAL_DCMI_ErrorCallback>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e057      	b.n	8004126 <HAL_DCMI_Init+0xc2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_DCMI_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f004 f9b6 	bl	80083f4 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800409e:	f023 0308 	bic.w	r3, r3, #8
 80040a2:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	6811      	ldr	r1, [r2, #0]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6850      	ldr	r0, [r2, #4]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6952      	ldr	r2, [r2, #20]
 80040b6:	4310      	orrs	r0, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68d2      	ldr	r2, [r2, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80040bc:	4310      	orrs	r0, r2
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6912      	ldr	r2, [r2, #16]
 80040c2:	4310      	orrs	r0, r2
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6892      	ldr	r2, [r2, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80040c8:	4310      	orrs	r0, r2
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6992      	ldr	r2, [r2, #24]
 80040ce:	4310      	orrs	r0, r2
                                     hdcmi->Init.JPEGMode 
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6a12      	ldr	r2, [r2, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80040d4:	4302      	orrs	r2, r0
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b10      	cmp	r3, #16
 80040e0:	d111      	bne.n	8004106 <HAL_DCMI_Init+0xa2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	7f12      	ldrb	r2, [r2, #28]
 80040ea:	4611      	mov	r1, r2
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	7f52      	ldrb	r2, [r2, #29]
 80040f0:	0212      	lsls	r2, r2, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80040f2:	4311      	orrs	r1, r2
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	7f92      	ldrb	r2, [r2, #30]
 80040f8:	0412      	lsls	r2, r2, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80040fa:	4311      	orrs	r1, r2
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	7fd2      	ldrb	r2, [r2, #31]
 8004100:	0612      	lsls	r2, r2, #24
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8004102:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8004104:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	68d2      	ldr	r2, [r2, #12]
 8004110:	f042 021e 	orr.w	r2, r2, #30
 8004114:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800413c:	f7ff fc10 	bl	8003960 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e099      	b.n	8004280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800416c:	e00f      	b.n	800418e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800416e:	f7ff fbf7 	bl	8003960 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b05      	cmp	r3, #5
 800417a:	d908      	bls.n	800418e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2203      	movs	r2, #3
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e078      	b.n	8004280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e8      	bne.n	800416e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <HAL_DMA_Init+0x158>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d107      	bne.n	80041f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	4313      	orrs	r3, r2
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0307 	bic.w	r3, r3, #7
 800420e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b04      	cmp	r3, #4
 8004220:	d117      	bne.n	8004252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fb09 	bl	800484c <DMA_CheckFifoParam>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2240      	movs	r2, #64	; 0x40
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800424e:	2301      	movs	r3, #1
 8004250:	e016      	b.n	8004280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fac0 	bl	80047e0 <DMA_CalcBaseAndBitshift>
 8004260:	4603      	mov	r3, r0
 8004262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	223f      	movs	r2, #63	; 0x3f
 800426a:	409a      	lsls	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	f010803f 	.word	0xf010803f

0800428c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_DMA_Start_IT+0x26>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e048      	b.n	8004344 <HAL_DMA_Start_IT+0xb8>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d137      	bne.n	8004336 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fa52 	bl	8004784 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	223f      	movs	r2, #63	; 0x3f
 80042e6:	409a      	lsls	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	f042 0216 	orr.w	r2, r2, #22
 80042fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	6952      	ldr	r2, [r2, #20]
 8004306:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	f042 0208 	orr.w	r2, r2, #8
 8004322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e005      	b.n	8004342 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800433e:	2302      	movs	r3, #2
 8004340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800435a:	f7ff fb01 	bl	8003960 <HAL_GetTick>
 800435e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d008      	beq.n	800437e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e052      	b.n	8004424 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	6812      	ldr	r2, [r2, #0]
 8004388:	f022 0216 	bic.w	r2, r2, #22
 800438c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	6952      	ldr	r2, [r2, #20]
 8004398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_DMA_Abort+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ce:	e013      	b.n	80043f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043d0:	f7ff fac6 	bl	8003960 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b05      	cmp	r3, #5
 80043dc:	d90c      	bls.n	80043f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2203      	movs	r2, #3
 80043f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e015      	b.n	8004424 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e4      	bne.n	80043d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	223f      	movs	r2, #63	; 0x3f
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d004      	beq.n	800444a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2280      	movs	r2, #128	; 0x80
 8004444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e00c      	b.n	8004464 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2205      	movs	r2, #5
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800447c:	4b92      	ldr	r3, [pc, #584]	; (80046c8 <HAL_DMA_IRQHandler+0x258>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a92      	ldr	r2, [pc, #584]	; (80046cc <HAL_DMA_IRQHandler+0x25c>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	0a9b      	lsrs	r3, r3, #10
 8004488:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	2208      	movs	r2, #8
 800449c:	409a      	lsls	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d01a      	beq.n	80044dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	f022 0204 	bic.w	r2, r2, #4
 80044c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	2208      	movs	r2, #8
 80044ca:	409a      	lsls	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	2201      	movs	r2, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fe:	2201      	movs	r2, #1
 8004500:	409a      	lsls	r2, r3
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	2204      	movs	r2, #4
 8004518:	409a      	lsls	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d012      	beq.n	8004548 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004534:	2204      	movs	r2, #4
 8004536:	409a      	lsls	r2, r3
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	2210      	movs	r2, #16
 800454e:	409a      	lsls	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d043      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d03c      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	2210      	movs	r2, #16
 800456c:	409a      	lsls	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d108      	bne.n	80045a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d024      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
 800459e:	e01f      	b.n	80045e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01b      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	4798      	blx	r3
 80045b0:	e016      	b.n	80045e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d107      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	f022 0208 	bic.w	r2, r2, #8
 80045ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	2220      	movs	r2, #32
 80045e6:	409a      	lsls	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 808e 	beq.w	800470e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 8086 	beq.w	800470e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004606:	2220      	movs	r2, #32
 8004608:	409a      	lsls	r2, r3
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b05      	cmp	r3, #5
 8004618:	d136      	bne.n	8004688 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	f022 0216 	bic.w	r2, r2, #22
 8004628:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	6952      	ldr	r2, [r2, #20]
 8004634:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004638:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <HAL_DMA_IRQHandler+0x1da>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	f022 0208 	bic.w	r2, r2, #8
 8004658:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	223f      	movs	r2, #63	; 0x3f
 8004660:	409a      	lsls	r2, r3
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d07d      	beq.n	800477a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
        }
        return;
 8004686:	e078      	b.n	800477a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01c      	beq.n	80046d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d108      	bne.n	80046b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d030      	beq.n	800470e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
 80046b4:	e02b      	b.n	800470e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d027      	beq.n	800470e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
 80046c6:	e022      	b.n	800470e <HAL_DMA_IRQHandler+0x29e>
 80046c8:	200081c4 	.word	0x200081c4
 80046cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	f022 0210 	bic.w	r2, r2, #16
 80046ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	2b00      	cmp	r3, #0
 8004714:	d032      	beq.n	800477c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d022      	beq.n	8004768 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2205      	movs	r2, #5
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3301      	adds	r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4293      	cmp	r3, r2
 8004744:	d807      	bhi.n	8004756 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f2      	bne.n	800473a <HAL_DMA_IRQHandler+0x2ca>
 8004754:	e000      	b.n	8004758 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004756:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	4798      	blx	r3
 8004778:	e000      	b.n	800477c <HAL_DMA_IRQHandler+0x30c>
        return;
 800477a:	bf00      	nop
    }
  }
}
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop

08004784 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d108      	bne.n	80047c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047c2:	e007      	b.n	80047d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	60da      	str	r2, [r3, #12]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	3b10      	subs	r3, #16
 80047f0:	4a14      	ldr	r2, [pc, #80]	; (8004844 <DMA_CalcBaseAndBitshift+0x64>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <DMA_CalcBaseAndBitshift+0x68>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d909      	bls.n	8004822 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	1d1a      	adds	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	659a      	str	r2, [r3, #88]	; 0x58
 8004820:	e007      	b.n	8004832 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800482a:	f023 0303 	bic.w	r3, r3, #3
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	aaaaaaab 	.word	0xaaaaaaab
 8004848:	0800957c 	.word	0x0800957c

0800484c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11f      	bne.n	80048a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b03      	cmp	r3, #3
 800486a:	d855      	bhi.n	8004918 <DMA_CheckFifoParam+0xcc>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <DMA_CheckFifoParam+0x28>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004885 	.word	0x08004885
 8004878:	08004897 	.word	0x08004897
 800487c:	08004885 	.word	0x08004885
 8004880:	08004919 	.word	0x08004919
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d045      	beq.n	800491c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e042      	b.n	800491c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800489e:	d13f      	bne.n	8004920 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a4:	e03c      	b.n	8004920 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ae:	d121      	bne.n	80048f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d836      	bhi.n	8004924 <DMA_CheckFifoParam+0xd8>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <DMA_CheckFifoParam+0x70>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048d3 	.word	0x080048d3
 80048c4:	080048cd 	.word	0x080048cd
 80048c8:	080048e5 	.word	0x080048e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
      break;
 80048d0:	e02f      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d024      	beq.n	8004928 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e2:	e021      	b.n	8004928 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048ec:	d11e      	bne.n	800492c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048f2:	e01b      	b.n	800492c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <DMA_CheckFifoParam+0xb4>
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d003      	beq.n	8004906 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048fe:	e018      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e015      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00e      	beq.n	8004930 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
      break;
 8004916:	e00b      	b.n	8004930 <DMA_CheckFifoParam+0xe4>
      break;
 8004918:	bf00      	nop
 800491a:	e00a      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 800491c:	bf00      	nop
 800491e:	e008      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 8004920:	bf00      	nop
 8004922:	e006      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 8004924:	bf00      	nop
 8004926:	e004      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 8004928:	bf00      	nop
 800492a:	e002      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;   
 800492c:	bf00      	nop
 800492e:	e000      	b.n	8004932 <DMA_CheckFifoParam+0xe6>
      break;
 8004930:	bf00      	nop
    }
  } 
  
  return status; 
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d106      	bne.n	8004968 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f001 ba08 	b.w	8005d78 <HAL_DMAEx_MultiBufferStart_IT+0x1438>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f001 b9f6 	b.w	8005d78 <HAL_DMAEx_MultiBufferStart_IT+0x1438>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004992:	2b01      	cmp	r3, #1
 8004994:	d102      	bne.n	800499c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8004996:	2302      	movs	r3, #2
 8004998:	f001 b9ee 	b.w	8005d78 <HAL_DMAEx_MultiBufferStart_IT+0x1438>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	f041 81dc 	bne.w	8005d6a <HAL_DMAEx_MultiBufferStart_IT+0x142a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80049ce:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f001 fa04 	bl	8005dec <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4ba0      	ldr	r3, [pc, #640]	; (8004c6c <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d96c      	bls.n	8004aca <HAL_DMAEx_MultiBufferStart_IT+0x18a>
 80049f0:	4a9f      	ldr	r2, [pc, #636]	; (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	4b9e      	ldr	r3, [pc, #632]	; (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80049fa:	4299      	cmp	r1, r3
 80049fc:	d062      	beq.n	8004ac4 <HAL_DMAEx_MultiBufferStart_IT+0x184>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4b9c      	ldr	r3, [pc, #624]	; (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8004a06:	4299      	cmp	r1, r3
 8004a08:	d05a      	beq.n	8004ac0 <HAL_DMAEx_MultiBufferStart_IT+0x180>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4b9a      	ldr	r3, [pc, #616]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8004a12:	4299      	cmp	r1, r3
 8004a14:	d052      	beq.n	8004abc <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4b98      	ldr	r3, [pc, #608]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	d04a      	beq.n	8004ab8 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4619      	mov	r1, r3
 8004a28:	4b96      	ldr	r3, [pc, #600]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8004a2a:	4299      	cmp	r1, r3
 8004a2c:	d041      	beq.n	8004ab2 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	4b94      	ldr	r3, [pc, #592]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8004a36:	4299      	cmp	r1, r3
 8004a38:	d038      	beq.n	8004aac <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4b92      	ldr	r3, [pc, #584]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8004a42:	4299      	cmp	r1, r3
 8004a44:	d02f      	beq.n	8004aa6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4b90      	ldr	r3, [pc, #576]	; (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8004a4e:	4299      	cmp	r1, r3
 8004a50:	d026      	beq.n	8004aa0 <HAL_DMAEx_MultiBufferStart_IT+0x160>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4b8e      	ldr	r3, [pc, #568]	; (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	d01d      	beq.n	8004a9a <HAL_DMAEx_MultiBufferStart_IT+0x15a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4b8c      	ldr	r3, [pc, #560]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004a66:	4299      	cmp	r1, r3
 8004a68:	d014      	beq.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x154>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4b8a      	ldr	r3, [pc, #552]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004a72:	4299      	cmp	r1, r3
 8004a74:	d00b      	beq.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4b88      	ldr	r3, [pc, #544]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x360>)
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d102      	bne.n	8004a88 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a86:	e01e      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004a88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a8c:	e01b      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004a8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a92:	e018      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004a94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a98:	e015      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a9e:	e012      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aa4:	e00f      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004aaa:	e00c      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004aac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab0:	e009      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004ab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab6:	e006      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004ab8:	2320      	movs	r3, #32
 8004aba:	e004      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004abc:	2320      	movs	r3, #32
 8004abe:	e002      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	e000      	b.n	8004ac6 <HAL_DMAEx_MultiBufferStart_IT+0x186>
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	60d3      	str	r3, [r2, #12]
 8004ac8:	e176      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x364>)
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d96c      	bls.n	8004bb0 <HAL_DMAEx_MultiBufferStart_IT+0x270>
 8004ad6:	4a66      	ldr	r2, [pc, #408]	; (8004c70 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	4b65      	ldr	r3, [pc, #404]	; (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	d062      	beq.n	8004baa <HAL_DMAEx_MultiBufferStart_IT+0x26a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4b63      	ldr	r3, [pc, #396]	; (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8004aec:	4299      	cmp	r1, r3
 8004aee:	d05a      	beq.n	8004ba6 <HAL_DMAEx_MultiBufferStart_IT+0x266>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d052      	beq.n	8004ba2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8004b04:	4299      	cmp	r1, r3
 8004b06:	d04a      	beq.n	8004b9e <HAL_DMAEx_MultiBufferStart_IT+0x25e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8004b10:	4299      	cmp	r1, r3
 8004b12:	d041      	beq.n	8004b98 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4b5b      	ldr	r3, [pc, #364]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	d038      	beq.n	8004b92 <HAL_DMAEx_MultiBufferStart_IT+0x252>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4619      	mov	r1, r3
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8004b28:	4299      	cmp	r1, r3
 8004b2a:	d02f      	beq.n	8004b8c <HAL_DMAEx_MultiBufferStart_IT+0x24c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8004b34:	4299      	cmp	r1, r3
 8004b36:	d026      	beq.n	8004b86 <HAL_DMAEx_MultiBufferStart_IT+0x246>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4b55      	ldr	r3, [pc, #340]	; (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d01d      	beq.n	8004b80 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	d014      	beq.n	8004b7a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	d00b      	beq.n	8004b74 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	4b4f      	ldr	r3, [pc, #316]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x360>)
 8004b64:	4299      	cmp	r1, r3
 8004b66:	d102      	bne.n	8004b6e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
 8004b68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b6c:	e01e      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b72:	e01b      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b78:	e018      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b7a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b7e:	e015      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b84:	e012      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b8a:	e00f      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b90:	e00c      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b96:	e009      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b9c:	e006      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004b9e:	2320      	movs	r3, #32
 8004ba0:	e004      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	e002      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004ba6:	2320      	movs	r3, #32
 8004ba8:	e000      	b.n	8004bac <HAL_DMAEx_MultiBufferStart_IT+0x26c>
 8004baa:	2320      	movs	r3, #32
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	e103      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	4b3c      	ldr	r3, [pc, #240]	; (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x368>)
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	f240 8091 	bls.w	8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0x3a0>
 8004bbe:	4a3b      	ldr	r2, [pc, #236]	; (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x36c>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8004bc8:	4299      	cmp	r1, r3
 8004bca:	f000 8086 	beq.w	8004cda <HAL_DMAEx_MultiBufferStart_IT+0x39a>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4b28      	ldr	r3, [pc, #160]	; (8004c78 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8004bd6:	4299      	cmp	r1, r3
 8004bd8:	d07d      	beq.n	8004cd6 <HAL_DMAEx_MultiBufferStart_IT+0x396>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	4b26      	ldr	r3, [pc, #152]	; (8004c7c <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8004be2:	4299      	cmp	r1, r3
 8004be4:	d075      	beq.n	8004cd2 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8004bee:	4299      	cmp	r1, r3
 8004bf0:	d06d      	beq.n	8004cce <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8004bfa:	4299      	cmp	r1, r3
 8004bfc:	d064      	beq.n	8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x388>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4619      	mov	r1, r3
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8004c06:	4299      	cmp	r1, r3
 8004c08:	d05b      	beq.n	8004cc2 <HAL_DMAEx_MultiBufferStart_IT+0x382>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8004c12:	4299      	cmp	r1, r3
 8004c14:	d052      	beq.n	8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x37c>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8004c1e:	4299      	cmp	r1, r3
 8004c20:	d049      	beq.n	8004cb6 <HAL_DMAEx_MultiBufferStart_IT+0x376>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <HAL_DMAEx_MultiBufferStart_IT+0x354>)
 8004c2a:	4299      	cmp	r1, r3
 8004c2c:	d040      	beq.n	8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x370>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x358>)
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d014      	beq.n	8004c64 <HAL_DMAEx_MultiBufferStart_IT+0x324>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x35c>)
 8004c42:	4299      	cmp	r1, r3
 8004c44:	d00b      	beq.n	8004c5e <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x360>)
 8004c4e:	4299      	cmp	r1, r3
 8004c50:	d102      	bne.n	8004c58 <HAL_DMAEx_MultiBufferStart_IT+0x318>
 8004c52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c56:	e041      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c5c:	e03e      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004c5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c62:	e03b      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004c64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c68:	e038      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004c6a:	bf00      	nop
 8004c6c:	40026458 	.word	0x40026458
 8004c70:	40026400 	.word	0x40026400
 8004c74:	40026010 	.word	0x40026010
 8004c78:	40026410 	.word	0x40026410
 8004c7c:	40026070 	.word	0x40026070
 8004c80:	40026470 	.word	0x40026470
 8004c84:	40026028 	.word	0x40026028
 8004c88:	40026428 	.word	0x40026428
 8004c8c:	40026088 	.word	0x40026088
 8004c90:	40026488 	.word	0x40026488
 8004c94:	40026040 	.word	0x40026040
 8004c98:	40026440 	.word	0x40026440
 8004c9c:	400260a0 	.word	0x400260a0
 8004ca0:	400264a0 	.word	0x400264a0
 8004ca4:	400260b8 	.word	0x400260b8
 8004ca8:	40026058 	.word	0x40026058
 8004cac:	40026000 	.word	0x40026000
 8004cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cb4:	e012      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cba:	e00f      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cc0:	e00c      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cc6:	e009      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ccc:	e006      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cce:	2320      	movs	r3, #32
 8004cd0:	e004      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e002      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e000      	b.n	8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x39c>
 8004cda:	2320      	movs	r3, #32
 8004cdc:	60d3      	str	r3, [r2, #12]
 8004cde:	e06b      	b.n	8004db8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8004ce0:	4aa0      	ldr	r2, [pc, #640]	; (8004f64 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4b9f      	ldr	r3, [pc, #636]	; (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0x628>)
 8004cea:	4299      	cmp	r1, r3
 8004cec:	d062      	beq.n	8004db4 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4b9d      	ldr	r3, [pc, #628]	; (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x62c>)
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	d05a      	beq.n	8004db0 <HAL_DMAEx_MultiBufferStart_IT+0x470>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4b9b      	ldr	r3, [pc, #620]	; (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x630>)
 8004d02:	4299      	cmp	r1, r3
 8004d04:	d052      	beq.n	8004dac <HAL_DMAEx_MultiBufferStart_IT+0x46c>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4b99      	ldr	r3, [pc, #612]	; (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0x634>)
 8004d0e:	4299      	cmp	r1, r3
 8004d10:	d04a      	beq.n	8004da8 <HAL_DMAEx_MultiBufferStart_IT+0x468>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4619      	mov	r1, r3
 8004d18:	4b97      	ldr	r3, [pc, #604]	; (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0x638>)
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d041      	beq.n	8004da2 <HAL_DMAEx_MultiBufferStart_IT+0x462>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4619      	mov	r1, r3
 8004d24:	4b95      	ldr	r3, [pc, #596]	; (8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x63c>)
 8004d26:	4299      	cmp	r1, r3
 8004d28:	d038      	beq.n	8004d9c <HAL_DMAEx_MultiBufferStart_IT+0x45c>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4b93      	ldr	r3, [pc, #588]	; (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0x640>)
 8004d32:	4299      	cmp	r1, r3
 8004d34:	d02f      	beq.n	8004d96 <HAL_DMAEx_MultiBufferStart_IT+0x456>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4b91      	ldr	r3, [pc, #580]	; (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x644>)
 8004d3e:	4299      	cmp	r1, r3
 8004d40:	d026      	beq.n	8004d90 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4619      	mov	r1, r3
 8004d48:	4b8f      	ldr	r3, [pc, #572]	; (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0x648>)
 8004d4a:	4299      	cmp	r1, r3
 8004d4c:	d01d      	beq.n	8004d8a <HAL_DMAEx_MultiBufferStart_IT+0x44a>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4619      	mov	r1, r3
 8004d54:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0x64c>)
 8004d56:	4299      	cmp	r1, r3
 8004d58:	d014      	beq.n	8004d84 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4b8b      	ldr	r3, [pc, #556]	; (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x650>)
 8004d62:	4299      	cmp	r1, r3
 8004d64:	d00b      	beq.n	8004d7e <HAL_DMAEx_MultiBufferStart_IT+0x43e>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0x654>)
 8004d6e:	4299      	cmp	r1, r3
 8004d70:	d102      	bne.n	8004d78 <HAL_DMAEx_MultiBufferStart_IT+0x438>
 8004d72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d76:	e01e      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d7c:	e01b      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d82:	e018      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d88:	e015      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d8e:	e012      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d94:	e00f      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d9a:	e00c      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004da0:	e009      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004da6:	e006      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004da8:	2320      	movs	r3, #32
 8004daa:	e004      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004dac:	2320      	movs	r3, #32
 8004dae:	e002      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004db0:	2320      	movs	r3, #32
 8004db2:	e000      	b.n	8004db6 <HAL_DMAEx_MultiBufferStart_IT+0x476>
 8004db4:	2320      	movs	r3, #32
 8004db6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b76      	ldr	r3, [pc, #472]	; (8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x658>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d96c      	bls.n	8004e9e <HAL_DMAEx_MultiBufferStart_IT+0x55e>
 8004dc4:	4a75      	ldr	r2, [pc, #468]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4b66      	ldr	r3, [pc, #408]	; (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0x628>)
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	d062      	beq.n	8004e98 <HAL_DMAEx_MultiBufferStart_IT+0x558>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x62c>)
 8004dda:	4299      	cmp	r1, r3
 8004ddc:	d05a      	beq.n	8004e94 <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4b62      	ldr	r3, [pc, #392]	; (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x630>)
 8004de6:	4299      	cmp	r1, r3
 8004de8:	d052      	beq.n	8004e90 <HAL_DMAEx_MultiBufferStart_IT+0x550>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4b60      	ldr	r3, [pc, #384]	; (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0x634>)
 8004df2:	4299      	cmp	r1, r3
 8004df4:	d04a      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0x54c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4b5e      	ldr	r3, [pc, #376]	; (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0x638>)
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	d041      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4b5c      	ldr	r3, [pc, #368]	; (8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x63c>)
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	d038      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	4b5a      	ldr	r3, [pc, #360]	; (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0x640>)
 8004e16:	4299      	cmp	r1, r3
 8004e18:	d02f      	beq.n	8004e7a <HAL_DMAEx_MultiBufferStart_IT+0x53a>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x644>)
 8004e22:	4299      	cmp	r1, r3
 8004e24:	d026      	beq.n	8004e74 <HAL_DMAEx_MultiBufferStart_IT+0x534>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4b56      	ldr	r3, [pc, #344]	; (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0x648>)
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	d01d      	beq.n	8004e6e <HAL_DMAEx_MultiBufferStart_IT+0x52e>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4619      	mov	r1, r3
 8004e38:	4b54      	ldr	r3, [pc, #336]	; (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0x64c>)
 8004e3a:	4299      	cmp	r1, r3
 8004e3c:	d014      	beq.n	8004e68 <HAL_DMAEx_MultiBufferStart_IT+0x528>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4b52      	ldr	r3, [pc, #328]	; (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x650>)
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d00b      	beq.n	8004e62 <HAL_DMAEx_MultiBufferStart_IT+0x522>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4b50      	ldr	r3, [pc, #320]	; (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0x654>)
 8004e52:	4299      	cmp	r1, r3
 8004e54:	d102      	bne.n	8004e5c <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 8004e56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e5a:	e01e      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e60:	e01b      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e66:	e018      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e6c:	e015      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004e72:	e012      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e78:	e00f      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e7e:	e00c      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e84:	e009      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8a:	e006      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	e004      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e90:	2310      	movs	r3, #16
 8004e92:	e002      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e94:	2310      	movs	r3, #16
 8004e96:	e000      	b.n	8004e9a <HAL_DMAEx_MultiBufferStart_IT+0x55a>
 8004e98:	2310      	movs	r3, #16
 8004e9a:	60d3      	str	r3, [r2, #12]
 8004e9c:	e173      	b.n	8005186 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	f240 808e 	bls.w	8004fc8 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8004eac:	4a3b      	ldr	r2, [pc, #236]	; (8004f9c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <HAL_DMAEx_MultiBufferStart_IT+0x628>)
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	f000 8083 	beq.w	8004fc2 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <HAL_DMAEx_MultiBufferStart_IT+0x62c>)
 8004ec4:	4299      	cmp	r1, r3
 8004ec6:	d07a      	beq.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4b28      	ldr	r3, [pc, #160]	; (8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x630>)
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	d072      	beq.n	8004fba <HAL_DMAEx_MultiBufferStart_IT+0x67a>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <HAL_DMAEx_MultiBufferStart_IT+0x634>)
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d06a      	beq.n	8004fb6 <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <HAL_DMAEx_MultiBufferStart_IT+0x638>)
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	d061      	beq.n	8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4b22      	ldr	r3, [pc, #136]	; (8004f7c <HAL_DMAEx_MultiBufferStart_IT+0x63c>)
 8004ef4:	4299      	cmp	r1, r3
 8004ef6:	d058      	beq.n	8004faa <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4619      	mov	r1, r3
 8004efe:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <HAL_DMAEx_MultiBufferStart_IT+0x640>)
 8004f00:	4299      	cmp	r1, r3
 8004f02:	d04f      	beq.n	8004fa4 <HAL_DMAEx_MultiBufferStart_IT+0x664>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <HAL_DMAEx_MultiBufferStart_IT+0x644>)
 8004f0c:	4299      	cmp	r1, r3
 8004f0e:	d026      	beq.n	8004f5e <HAL_DMAEx_MultiBufferStart_IT+0x61e>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <HAL_DMAEx_MultiBufferStart_IT+0x648>)
 8004f18:	4299      	cmp	r1, r3
 8004f1a:	d01d      	beq.n	8004f58 <HAL_DMAEx_MultiBufferStart_IT+0x618>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <HAL_DMAEx_MultiBufferStart_IT+0x64c>)
 8004f24:	4299      	cmp	r1, r3
 8004f26:	d014      	beq.n	8004f52 <HAL_DMAEx_MultiBufferStart_IT+0x612>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <HAL_DMAEx_MultiBufferStart_IT+0x650>)
 8004f30:	4299      	cmp	r1, r3
 8004f32:	d00b      	beq.n	8004f4c <HAL_DMAEx_MultiBufferStart_IT+0x60c>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4b16      	ldr	r3, [pc, #88]	; (8004f94 <HAL_DMAEx_MultiBufferStart_IT+0x654>)
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	d102      	bne.n	8004f46 <HAL_DMAEx_MultiBufferStart_IT+0x606>
 8004f40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f44:	e03e      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f4a:	e03b      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004f4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f50:	e038      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004f52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f56:	e035      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004f5c:	e032      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f62:	e02f      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004f64:	40026000 	.word	0x40026000
 8004f68:	40026010 	.word	0x40026010
 8004f6c:	40026410 	.word	0x40026410
 8004f70:	40026070 	.word	0x40026070
 8004f74:	40026470 	.word	0x40026470
 8004f78:	40026028 	.word	0x40026028
 8004f7c:	40026428 	.word	0x40026428
 8004f80:	40026088 	.word	0x40026088
 8004f84:	40026488 	.word	0x40026488
 8004f88:	40026040 	.word	0x40026040
 8004f8c:	40026440 	.word	0x40026440
 8004f90:	400260a0 	.word	0x400260a0
 8004f94:	400264a0 	.word	0x400264a0
 8004f98:	40026458 	.word	0x40026458
 8004f9c:	40026400 	.word	0x40026400
 8004fa0:	400260b8 	.word	0x400260b8
 8004fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa8:	e00c      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fae:	e009      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fb4:	e006      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	e004      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004fba:	2310      	movs	r3, #16
 8004fbc:	e002      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	e000      	b.n	8004fc4 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 8004fc2:	2310      	movs	r3, #16
 8004fc4:	6093      	str	r3, [r2, #8]
 8004fc6:	e0de      	b.n	8005186 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4ba1      	ldr	r3, [pc, #644]	; (8005254 <HAL_DMAEx_MultiBufferStart_IT+0x914>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d96c      	bls.n	80050ae <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8004fd4:	4aa0      	ldr	r2, [pc, #640]	; (8005258 <HAL_DMAEx_MultiBufferStart_IT+0x918>)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4b9f      	ldr	r3, [pc, #636]	; (800525c <HAL_DMAEx_MultiBufferStart_IT+0x91c>)
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	d062      	beq.n	80050a8 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4b9d      	ldr	r3, [pc, #628]	; (8005260 <HAL_DMAEx_MultiBufferStart_IT+0x920>)
 8004fea:	4299      	cmp	r1, r3
 8004fec:	d05a      	beq.n	80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4b9b      	ldr	r3, [pc, #620]	; (8005264 <HAL_DMAEx_MultiBufferStart_IT+0x924>)
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	d052      	beq.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x760>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	4b99      	ldr	r3, [pc, #612]	; (8005268 <HAL_DMAEx_MultiBufferStart_IT+0x928>)
 8005002:	4299      	cmp	r1, r3
 8005004:	d04a      	beq.n	800509c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4b97      	ldr	r3, [pc, #604]	; (800526c <HAL_DMAEx_MultiBufferStart_IT+0x92c>)
 800500e:	4299      	cmp	r1, r3
 8005010:	d041      	beq.n	8005096 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	4b95      	ldr	r3, [pc, #596]	; (8005270 <HAL_DMAEx_MultiBufferStart_IT+0x930>)
 800501a:	4299      	cmp	r1, r3
 800501c:	d038      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	4b93      	ldr	r3, [pc, #588]	; (8005274 <HAL_DMAEx_MultiBufferStart_IT+0x934>)
 8005026:	4299      	cmp	r1, r3
 8005028:	d02f      	beq.n	800508a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4b91      	ldr	r3, [pc, #580]	; (8005278 <HAL_DMAEx_MultiBufferStart_IT+0x938>)
 8005032:	4299      	cmp	r1, r3
 8005034:	d026      	beq.n	8005084 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	4b8f      	ldr	r3, [pc, #572]	; (800527c <HAL_DMAEx_MultiBufferStart_IT+0x93c>)
 800503e:	4299      	cmp	r1, r3
 8005040:	d01d      	beq.n	800507e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4619      	mov	r1, r3
 8005048:	4b8d      	ldr	r3, [pc, #564]	; (8005280 <HAL_DMAEx_MultiBufferStart_IT+0x940>)
 800504a:	4299      	cmp	r1, r3
 800504c:	d014      	beq.n	8005078 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4b8b      	ldr	r3, [pc, #556]	; (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x944>)
 8005056:	4299      	cmp	r1, r3
 8005058:	d00b      	beq.n	8005072 <HAL_DMAEx_MultiBufferStart_IT+0x732>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	4b89      	ldr	r3, [pc, #548]	; (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x948>)
 8005062:	4299      	cmp	r1, r3
 8005064:	d102      	bne.n	800506c <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8005066:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800506a:	e01e      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800506c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005070:	e01b      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8005072:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005076:	e018      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8005078:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800507c:	e015      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800507e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005082:	e012      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8005084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005088:	e00f      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800508a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800508e:	e00c      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8005090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005094:	e009      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8005096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800509a:	e006      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 800509c:	2310      	movs	r3, #16
 800509e:	e004      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80050a0:	2310      	movs	r3, #16
 80050a2:	e002      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80050a4:	2310      	movs	r3, #16
 80050a6:	e000      	b.n	80050aa <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 80050a8:	2310      	movs	r3, #16
 80050aa:	60d3      	str	r3, [r2, #12]
 80050ac:	e06b      	b.n	8005186 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 80050ae:	4a6a      	ldr	r2, [pc, #424]	; (8005258 <HAL_DMAEx_MultiBufferStart_IT+0x918>)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	4b69      	ldr	r3, [pc, #420]	; (800525c <HAL_DMAEx_MultiBufferStart_IT+0x91c>)
 80050b8:	4299      	cmp	r1, r3
 80050ba:	d062      	beq.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0x842>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4619      	mov	r1, r3
 80050c2:	4b67      	ldr	r3, [pc, #412]	; (8005260 <HAL_DMAEx_MultiBufferStart_IT+0x920>)
 80050c4:	4299      	cmp	r1, r3
 80050c6:	d05a      	beq.n	800517e <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4619      	mov	r1, r3
 80050ce:	4b65      	ldr	r3, [pc, #404]	; (8005264 <HAL_DMAEx_MultiBufferStart_IT+0x924>)
 80050d0:	4299      	cmp	r1, r3
 80050d2:	d052      	beq.n	800517a <HAL_DMAEx_MultiBufferStart_IT+0x83a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	4b63      	ldr	r3, [pc, #396]	; (8005268 <HAL_DMAEx_MultiBufferStart_IT+0x928>)
 80050dc:	4299      	cmp	r1, r3
 80050de:	d04a      	beq.n	8005176 <HAL_DMAEx_MultiBufferStart_IT+0x836>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	4b61      	ldr	r3, [pc, #388]	; (800526c <HAL_DMAEx_MultiBufferStart_IT+0x92c>)
 80050e8:	4299      	cmp	r1, r3
 80050ea:	d041      	beq.n	8005170 <HAL_DMAEx_MultiBufferStart_IT+0x830>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4b5f      	ldr	r3, [pc, #380]	; (8005270 <HAL_DMAEx_MultiBufferStart_IT+0x930>)
 80050f4:	4299      	cmp	r1, r3
 80050f6:	d038      	beq.n	800516a <HAL_DMAEx_MultiBufferStart_IT+0x82a>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4619      	mov	r1, r3
 80050fe:	4b5d      	ldr	r3, [pc, #372]	; (8005274 <HAL_DMAEx_MultiBufferStart_IT+0x934>)
 8005100:	4299      	cmp	r1, r3
 8005102:	d02f      	beq.n	8005164 <HAL_DMAEx_MultiBufferStart_IT+0x824>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4619      	mov	r1, r3
 800510a:	4b5b      	ldr	r3, [pc, #364]	; (8005278 <HAL_DMAEx_MultiBufferStart_IT+0x938>)
 800510c:	4299      	cmp	r1, r3
 800510e:	d026      	beq.n	800515e <HAL_DMAEx_MultiBufferStart_IT+0x81e>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	4b59      	ldr	r3, [pc, #356]	; (800527c <HAL_DMAEx_MultiBufferStart_IT+0x93c>)
 8005118:	4299      	cmp	r1, r3
 800511a:	d01d      	beq.n	8005158 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4619      	mov	r1, r3
 8005122:	4b57      	ldr	r3, [pc, #348]	; (8005280 <HAL_DMAEx_MultiBufferStart_IT+0x940>)
 8005124:	4299      	cmp	r1, r3
 8005126:	d014      	beq.n	8005152 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4619      	mov	r1, r3
 800512e:	4b55      	ldr	r3, [pc, #340]	; (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x944>)
 8005130:	4299      	cmp	r1, r3
 8005132:	d00b      	beq.n	800514c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4619      	mov	r1, r3
 800513a:	4b53      	ldr	r3, [pc, #332]	; (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x948>)
 800513c:	4299      	cmp	r1, r3
 800513e:	d102      	bne.n	8005146 <HAL_DMAEx_MultiBufferStart_IT+0x806>
 8005140:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005144:	e01e      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005146:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800514a:	e01b      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800514c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005150:	e018      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005152:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005156:	e015      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800515c:	e012      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800515e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005162:	e00f      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005168:	e00c      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800516a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516e:	e009      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005174:	e006      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005176:	2310      	movs	r3, #16
 8005178:	e004      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800517a:	2310      	movs	r3, #16
 800517c:	e002      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 800517e:	2310      	movs	r3, #16
 8005180:	e000      	b.n	8005184 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8005182:	2310      	movs	r3, #16
 8005184:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	4b3f      	ldr	r3, [pc, #252]	; (800528c <HAL_DMAEx_MultiBufferStart_IT+0x94c>)
 800518e:	429a      	cmp	r2, r3
 8005190:	f240 808f 	bls.w	80052b2 <HAL_DMAEx_MultiBufferStart_IT+0x972>
 8005194:	4a3e      	ldr	r2, [pc, #248]	; (8005290 <HAL_DMAEx_MultiBufferStart_IT+0x950>)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	4b2f      	ldr	r3, [pc, #188]	; (800525c <HAL_DMAEx_MultiBufferStart_IT+0x91c>)
 800519e:	4299      	cmp	r1, r3
 80051a0:	f000 8084 	beq.w	80052ac <HAL_DMAEx_MultiBufferStart_IT+0x96c>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4619      	mov	r1, r3
 80051aa:	4b2d      	ldr	r3, [pc, #180]	; (8005260 <HAL_DMAEx_MultiBufferStart_IT+0x920>)
 80051ac:	4299      	cmp	r1, r3
 80051ae:	d07b      	beq.n	80052a8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_DMAEx_MultiBufferStart_IT+0x924>)
 80051b8:	4299      	cmp	r1, r3
 80051ba:	d073      	beq.n	80052a4 <HAL_DMAEx_MultiBufferStart_IT+0x964>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4b29      	ldr	r3, [pc, #164]	; (8005268 <HAL_DMAEx_MultiBufferStart_IT+0x928>)
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d06b      	beq.n	80052a0 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_DMAEx_MultiBufferStart_IT+0x92c>)
 80051d0:	4299      	cmp	r1, r3
 80051d2:	d062      	beq.n	800529a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4619      	mov	r1, r3
 80051da:	4b25      	ldr	r3, [pc, #148]	; (8005270 <HAL_DMAEx_MultiBufferStart_IT+0x930>)
 80051dc:	4299      	cmp	r1, r3
 80051de:	d059      	beq.n	8005294 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4619      	mov	r1, r3
 80051e6:	4b23      	ldr	r3, [pc, #140]	; (8005274 <HAL_DMAEx_MultiBufferStart_IT+0x934>)
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d02f      	beq.n	800524c <HAL_DMAEx_MultiBufferStart_IT+0x90c>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_DMAEx_MultiBufferStart_IT+0x938>)
 80051f4:	4299      	cmp	r1, r3
 80051f6:	d026      	beq.n	8005246 <HAL_DMAEx_MultiBufferStart_IT+0x906>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_DMAEx_MultiBufferStart_IT+0x93c>)
 8005200:	4299      	cmp	r1, r3
 8005202:	d01d      	beq.n	8005240 <HAL_DMAEx_MultiBufferStart_IT+0x900>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4619      	mov	r1, r3
 800520a:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <HAL_DMAEx_MultiBufferStart_IT+0x940>)
 800520c:	4299      	cmp	r1, r3
 800520e:	d014      	beq.n	800523a <HAL_DMAEx_MultiBufferStart_IT+0x8fa>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4619      	mov	r1, r3
 8005216:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_DMAEx_MultiBufferStart_IT+0x944>)
 8005218:	4299      	cmp	r1, r3
 800521a:	d00b      	beq.n	8005234 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4b19      	ldr	r3, [pc, #100]	; (8005288 <HAL_DMAEx_MultiBufferStart_IT+0x948>)
 8005224:	4299      	cmp	r1, r3
 8005226:	d102      	bne.n	800522e <HAL_DMAEx_MultiBufferStart_IT+0x8ee>
 8005228:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800522c:	e03f      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 800522e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005232:	e03c      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8005234:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005238:	e039      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 800523a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800523e:	e036      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8005240:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005244:	e033      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8005246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800524a:	e030      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 800524c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005250:	e02d      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8005252:	bf00      	nop
 8005254:	40026058 	.word	0x40026058
 8005258:	40026000 	.word	0x40026000
 800525c:	40026010 	.word	0x40026010
 8005260:	40026410 	.word	0x40026410
 8005264:	40026070 	.word	0x40026070
 8005268:	40026470 	.word	0x40026470
 800526c:	40026028 	.word	0x40026028
 8005270:	40026428 	.word	0x40026428
 8005274:	40026088 	.word	0x40026088
 8005278:	40026488 	.word	0x40026488
 800527c:	40026040 	.word	0x40026040
 8005280:	40026440 	.word	0x40026440
 8005284:	400260a0 	.word	0x400260a0
 8005288:	400264a0 	.word	0x400264a0
 800528c:	40026458 	.word	0x40026458
 8005290:	40026400 	.word	0x40026400
 8005294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005298:	e009      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 800529a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800529e:	e006      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80052a0:	2308      	movs	r3, #8
 80052a2:	e004      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80052a4:	2308      	movs	r3, #8
 80052a6:	e002      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80052a8:	2308      	movs	r3, #8
 80052aa:	e000      	b.n	80052ae <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 80052ac:	2308      	movs	r3, #8
 80052ae:	60d3      	str	r3, [r2, #12]
 80052b0:	e173      	b.n	800559a <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	4b9f      	ldr	r3, [pc, #636]	; (8005538 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>)
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d96c      	bls.n	8005398 <HAL_DMAEx_MultiBufferStart_IT+0xa58>
 80052be:	4a9f      	ldr	r2, [pc, #636]	; (800553c <HAL_DMAEx_MultiBufferStart_IT+0xbfc>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	4b9e      	ldr	r3, [pc, #632]	; (8005540 <HAL_DMAEx_MultiBufferStart_IT+0xc00>)
 80052c8:	4299      	cmp	r1, r3
 80052ca:	d062      	beq.n	8005392 <HAL_DMAEx_MultiBufferStart_IT+0xa52>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4b9c      	ldr	r3, [pc, #624]	; (8005544 <HAL_DMAEx_MultiBufferStart_IT+0xc04>)
 80052d4:	4299      	cmp	r1, r3
 80052d6:	d05a      	beq.n	800538e <HAL_DMAEx_MultiBufferStart_IT+0xa4e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	4b9a      	ldr	r3, [pc, #616]	; (8005548 <HAL_DMAEx_MultiBufferStart_IT+0xc08>)
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d052      	beq.n	800538a <HAL_DMAEx_MultiBufferStart_IT+0xa4a>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4619      	mov	r1, r3
 80052ea:	4b98      	ldr	r3, [pc, #608]	; (800554c <HAL_DMAEx_MultiBufferStart_IT+0xc0c>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d04a      	beq.n	8005386 <HAL_DMAEx_MultiBufferStart_IT+0xa46>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4619      	mov	r1, r3
 80052f6:	4b96      	ldr	r3, [pc, #600]	; (8005550 <HAL_DMAEx_MultiBufferStart_IT+0xc10>)
 80052f8:	4299      	cmp	r1, r3
 80052fa:	d041      	beq.n	8005380 <HAL_DMAEx_MultiBufferStart_IT+0xa40>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4619      	mov	r1, r3
 8005302:	4b94      	ldr	r3, [pc, #592]	; (8005554 <HAL_DMAEx_MultiBufferStart_IT+0xc14>)
 8005304:	4299      	cmp	r1, r3
 8005306:	d038      	beq.n	800537a <HAL_DMAEx_MultiBufferStart_IT+0xa3a>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4619      	mov	r1, r3
 800530e:	4b92      	ldr	r3, [pc, #584]	; (8005558 <HAL_DMAEx_MultiBufferStart_IT+0xc18>)
 8005310:	4299      	cmp	r1, r3
 8005312:	d02f      	beq.n	8005374 <HAL_DMAEx_MultiBufferStart_IT+0xa34>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4619      	mov	r1, r3
 800531a:	4b90      	ldr	r3, [pc, #576]	; (800555c <HAL_DMAEx_MultiBufferStart_IT+0xc1c>)
 800531c:	4299      	cmp	r1, r3
 800531e:	d026      	beq.n	800536e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4619      	mov	r1, r3
 8005326:	4b8e      	ldr	r3, [pc, #568]	; (8005560 <HAL_DMAEx_MultiBufferStart_IT+0xc20>)
 8005328:	4299      	cmp	r1, r3
 800532a:	d01d      	beq.n	8005368 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4619      	mov	r1, r3
 8005332:	4b8c      	ldr	r3, [pc, #560]	; (8005564 <HAL_DMAEx_MultiBufferStart_IT+0xc24>)
 8005334:	4299      	cmp	r1, r3
 8005336:	d014      	beq.n	8005362 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4619      	mov	r1, r3
 800533e:	4b8a      	ldr	r3, [pc, #552]	; (8005568 <HAL_DMAEx_MultiBufferStart_IT+0xc28>)
 8005340:	4299      	cmp	r1, r3
 8005342:	d00b      	beq.n	800535c <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_DMAEx_MultiBufferStart_IT+0xc2c>)
 800534c:	4299      	cmp	r1, r3
 800534e:	d102      	bne.n	8005356 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 8005350:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005354:	e01e      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800535a:	e01b      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800535c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005360:	e018      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005362:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005366:	e015      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005368:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800536c:	e012      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800536e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005372:	e00f      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005378:	e00c      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800537a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800537e:	e009      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005384:	e006      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005386:	2308      	movs	r3, #8
 8005388:	e004      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800538a:	2308      	movs	r3, #8
 800538c:	e002      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 800538e:	2308      	movs	r3, #8
 8005390:	e000      	b.n	8005394 <HAL_DMAEx_MultiBufferStart_IT+0xa54>
 8005392:	2308      	movs	r3, #8
 8005394:	6093      	str	r3, [r2, #8]
 8005396:	e100      	b.n	800559a <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	4b74      	ldr	r3, [pc, #464]	; (8005570 <HAL_DMAEx_MultiBufferStart_IT+0xc30>)
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d96c      	bls.n	800547e <HAL_DMAEx_MultiBufferStart_IT+0xb3e>
 80053a4:	4a73      	ldr	r2, [pc, #460]	; (8005574 <HAL_DMAEx_MultiBufferStart_IT+0xc34>)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4b64      	ldr	r3, [pc, #400]	; (8005540 <HAL_DMAEx_MultiBufferStart_IT+0xc00>)
 80053ae:	4299      	cmp	r1, r3
 80053b0:	d062      	beq.n	8005478 <HAL_DMAEx_MultiBufferStart_IT+0xb38>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4619      	mov	r1, r3
 80053b8:	4b62      	ldr	r3, [pc, #392]	; (8005544 <HAL_DMAEx_MultiBufferStart_IT+0xc04>)
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d05a      	beq.n	8005474 <HAL_DMAEx_MultiBufferStart_IT+0xb34>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	4b60      	ldr	r3, [pc, #384]	; (8005548 <HAL_DMAEx_MultiBufferStart_IT+0xc08>)
 80053c6:	4299      	cmp	r1, r3
 80053c8:	d052      	beq.n	8005470 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4619      	mov	r1, r3
 80053d0:	4b5e      	ldr	r3, [pc, #376]	; (800554c <HAL_DMAEx_MultiBufferStart_IT+0xc0c>)
 80053d2:	4299      	cmp	r1, r3
 80053d4:	d04a      	beq.n	800546c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	4b5c      	ldr	r3, [pc, #368]	; (8005550 <HAL_DMAEx_MultiBufferStart_IT+0xc10>)
 80053de:	4299      	cmp	r1, r3
 80053e0:	d041      	beq.n	8005466 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4619      	mov	r1, r3
 80053e8:	4b5a      	ldr	r3, [pc, #360]	; (8005554 <HAL_DMAEx_MultiBufferStart_IT+0xc14>)
 80053ea:	4299      	cmp	r1, r3
 80053ec:	d038      	beq.n	8005460 <HAL_DMAEx_MultiBufferStart_IT+0xb20>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4b58      	ldr	r3, [pc, #352]	; (8005558 <HAL_DMAEx_MultiBufferStart_IT+0xc18>)
 80053f6:	4299      	cmp	r1, r3
 80053f8:	d02f      	beq.n	800545a <HAL_DMAEx_MultiBufferStart_IT+0xb1a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	4b56      	ldr	r3, [pc, #344]	; (800555c <HAL_DMAEx_MultiBufferStart_IT+0xc1c>)
 8005402:	4299      	cmp	r1, r3
 8005404:	d026      	beq.n	8005454 <HAL_DMAEx_MultiBufferStart_IT+0xb14>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4619      	mov	r1, r3
 800540c:	4b54      	ldr	r3, [pc, #336]	; (8005560 <HAL_DMAEx_MultiBufferStart_IT+0xc20>)
 800540e:	4299      	cmp	r1, r3
 8005410:	d01d      	beq.n	800544e <HAL_DMAEx_MultiBufferStart_IT+0xb0e>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	4b52      	ldr	r3, [pc, #328]	; (8005564 <HAL_DMAEx_MultiBufferStart_IT+0xc24>)
 800541a:	4299      	cmp	r1, r3
 800541c:	d014      	beq.n	8005448 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4619      	mov	r1, r3
 8005424:	4b50      	ldr	r3, [pc, #320]	; (8005568 <HAL_DMAEx_MultiBufferStart_IT+0xc28>)
 8005426:	4299      	cmp	r1, r3
 8005428:	d00b      	beq.n	8005442 <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4619      	mov	r1, r3
 8005430:	4b4e      	ldr	r3, [pc, #312]	; (800556c <HAL_DMAEx_MultiBufferStart_IT+0xc2c>)
 8005432:	4299      	cmp	r1, r3
 8005434:	d102      	bne.n	800543c <HAL_DMAEx_MultiBufferStart_IT+0xafc>
 8005436:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800543a:	e01e      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800543c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005440:	e01b      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005442:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005446:	e018      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800544c:	e015      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800544e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005452:	e012      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005458:	e00f      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800545a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800545e:	e00c      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005464:	e009      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800546a:	e006      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 800546c:	2308      	movs	r3, #8
 800546e:	e004      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005470:	2308      	movs	r3, #8
 8005472:	e002      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005474:	2308      	movs	r3, #8
 8005476:	e000      	b.n	800547a <HAL_DMAEx_MultiBufferStart_IT+0xb3a>
 8005478:	2308      	movs	r3, #8
 800547a:	60d3      	str	r3, [r2, #12]
 800547c:	e08d      	b.n	800559a <HAL_DMAEx_MultiBufferStart_IT+0xc5a>
 800547e:	4a3d      	ldr	r2, [pc, #244]	; (8005574 <HAL_DMAEx_MultiBufferStart_IT+0xc34>)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4619      	mov	r1, r3
 8005486:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <HAL_DMAEx_MultiBufferStart_IT+0xc00>)
 8005488:	4299      	cmp	r1, r3
 800548a:	f000 8084 	beq.w	8005596 <HAL_DMAEx_MultiBufferStart_IT+0xc56>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	4b2b      	ldr	r3, [pc, #172]	; (8005544 <HAL_DMAEx_MultiBufferStart_IT+0xc04>)
 8005496:	4299      	cmp	r1, r3
 8005498:	d07b      	beq.n	8005592 <HAL_DMAEx_MultiBufferStart_IT+0xc52>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4619      	mov	r1, r3
 80054a0:	4b29      	ldr	r3, [pc, #164]	; (8005548 <HAL_DMAEx_MultiBufferStart_IT+0xc08>)
 80054a2:	4299      	cmp	r1, r3
 80054a4:	d073      	beq.n	800558e <HAL_DMAEx_MultiBufferStart_IT+0xc4e>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4619      	mov	r1, r3
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <HAL_DMAEx_MultiBufferStart_IT+0xc0c>)
 80054ae:	4299      	cmp	r1, r3
 80054b0:	d06b      	beq.n	800558a <HAL_DMAEx_MultiBufferStart_IT+0xc4a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_DMAEx_MultiBufferStart_IT+0xc10>)
 80054ba:	4299      	cmp	r1, r3
 80054bc:	d062      	beq.n	8005584 <HAL_DMAEx_MultiBufferStart_IT+0xc44>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4619      	mov	r1, r3
 80054c4:	4b23      	ldr	r3, [pc, #140]	; (8005554 <HAL_DMAEx_MultiBufferStart_IT+0xc14>)
 80054c6:	4299      	cmp	r1, r3
 80054c8:	d059      	beq.n	800557e <HAL_DMAEx_MultiBufferStart_IT+0xc3e>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4619      	mov	r1, r3
 80054d0:	4b21      	ldr	r3, [pc, #132]	; (8005558 <HAL_DMAEx_MultiBufferStart_IT+0xc18>)
 80054d2:	4299      	cmp	r1, r3
 80054d4:	d050      	beq.n	8005578 <HAL_DMAEx_MultiBufferStart_IT+0xc38>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4619      	mov	r1, r3
 80054dc:	4b1f      	ldr	r3, [pc, #124]	; (800555c <HAL_DMAEx_MultiBufferStart_IT+0xc1c>)
 80054de:	4299      	cmp	r1, r3
 80054e0:	d026      	beq.n	8005530 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4b1d      	ldr	r3, [pc, #116]	; (8005560 <HAL_DMAEx_MultiBufferStart_IT+0xc20>)
 80054ea:	4299      	cmp	r1, r3
 80054ec:	d01d      	beq.n	800552a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <HAL_DMAEx_MultiBufferStart_IT+0xc24>)
 80054f6:	4299      	cmp	r1, r3
 80054f8:	d014      	beq.n	8005524 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4619      	mov	r1, r3
 8005500:	4b19      	ldr	r3, [pc, #100]	; (8005568 <HAL_DMAEx_MultiBufferStart_IT+0xc28>)
 8005502:	4299      	cmp	r1, r3
 8005504:	d00b      	beq.n	800551e <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4619      	mov	r1, r3
 800550c:	4b17      	ldr	r3, [pc, #92]	; (800556c <HAL_DMAEx_MultiBufferStart_IT+0xc2c>)
 800550e:	4299      	cmp	r1, r3
 8005510:	d102      	bne.n	8005518 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8005512:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005516:	e03f      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800551c:	e03c      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800551e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005522:	e039      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005524:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005528:	e036      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800552a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800552e:	e033      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005534:	e030      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005536:	bf00      	nop
 8005538:	400260b8 	.word	0x400260b8
 800553c:	40026400 	.word	0x40026400
 8005540:	40026010 	.word	0x40026010
 8005544:	40026410 	.word	0x40026410
 8005548:	40026070 	.word	0x40026070
 800554c:	40026470 	.word	0x40026470
 8005550:	40026028 	.word	0x40026028
 8005554:	40026428 	.word	0x40026428
 8005558:	40026088 	.word	0x40026088
 800555c:	40026488 	.word	0x40026488
 8005560:	40026040 	.word	0x40026040
 8005564:	40026440 	.word	0x40026440
 8005568:	400260a0 	.word	0x400260a0
 800556c:	400264a0 	.word	0x400264a0
 8005570:	40026058 	.word	0x40026058
 8005574:	40026000 	.word	0x40026000
 8005578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557c:	e00c      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800557e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005582:	e009      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005588:	e006      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800558a:	2308      	movs	r3, #8
 800558c:	e004      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 800558e:	2308      	movs	r3, #8
 8005590:	e002      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005592:	2308      	movs	r3, #8
 8005594:	e000      	b.n	8005598 <HAL_DMAEx_MultiBufferStart_IT+0xc58>
 8005596:	2308      	movs	r3, #8
 8005598:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	4b9f      	ldr	r3, [pc, #636]	; (8005820 <HAL_DMAEx_MultiBufferStart_IT+0xee0>)
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d96c      	bls.n	8005680 <HAL_DMAEx_MultiBufferStart_IT+0xd40>
 80055a6:	4a9f      	ldr	r2, [pc, #636]	; (8005824 <HAL_DMAEx_MultiBufferStart_IT+0xee4>)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4b9e      	ldr	r3, [pc, #632]	; (8005828 <HAL_DMAEx_MultiBufferStart_IT+0xee8>)
 80055b0:	4299      	cmp	r1, r3
 80055b2:	d062      	beq.n	800567a <HAL_DMAEx_MultiBufferStart_IT+0xd3a>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	4b9c      	ldr	r3, [pc, #624]	; (800582c <HAL_DMAEx_MultiBufferStart_IT+0xeec>)
 80055bc:	4299      	cmp	r1, r3
 80055be:	d05a      	beq.n	8005676 <HAL_DMAEx_MultiBufferStart_IT+0xd36>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	4b9a      	ldr	r3, [pc, #616]	; (8005830 <HAL_DMAEx_MultiBufferStart_IT+0xef0>)
 80055c8:	4299      	cmp	r1, r3
 80055ca:	d052      	beq.n	8005672 <HAL_DMAEx_MultiBufferStart_IT+0xd32>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4b98      	ldr	r3, [pc, #608]	; (8005834 <HAL_DMAEx_MultiBufferStart_IT+0xef4>)
 80055d4:	4299      	cmp	r1, r3
 80055d6:	d04a      	beq.n	800566e <HAL_DMAEx_MultiBufferStart_IT+0xd2e>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4619      	mov	r1, r3
 80055de:	4b96      	ldr	r3, [pc, #600]	; (8005838 <HAL_DMAEx_MultiBufferStart_IT+0xef8>)
 80055e0:	4299      	cmp	r1, r3
 80055e2:	d041      	beq.n	8005668 <HAL_DMAEx_MultiBufferStart_IT+0xd28>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4b94      	ldr	r3, [pc, #592]	; (800583c <HAL_DMAEx_MultiBufferStart_IT+0xefc>)
 80055ec:	4299      	cmp	r1, r3
 80055ee:	d038      	beq.n	8005662 <HAL_DMAEx_MultiBufferStart_IT+0xd22>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4619      	mov	r1, r3
 80055f6:	4b92      	ldr	r3, [pc, #584]	; (8005840 <HAL_DMAEx_MultiBufferStart_IT+0xf00>)
 80055f8:	4299      	cmp	r1, r3
 80055fa:	d02f      	beq.n	800565c <HAL_DMAEx_MultiBufferStart_IT+0xd1c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4619      	mov	r1, r3
 8005602:	4b90      	ldr	r3, [pc, #576]	; (8005844 <HAL_DMAEx_MultiBufferStart_IT+0xf04>)
 8005604:	4299      	cmp	r1, r3
 8005606:	d026      	beq.n	8005656 <HAL_DMAEx_MultiBufferStart_IT+0xd16>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	4b8e      	ldr	r3, [pc, #568]	; (8005848 <HAL_DMAEx_MultiBufferStart_IT+0xf08>)
 8005610:	4299      	cmp	r1, r3
 8005612:	d01d      	beq.n	8005650 <HAL_DMAEx_MultiBufferStart_IT+0xd10>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	4b8c      	ldr	r3, [pc, #560]	; (800584c <HAL_DMAEx_MultiBufferStart_IT+0xf0c>)
 800561c:	4299      	cmp	r1, r3
 800561e:	d014      	beq.n	800564a <HAL_DMAEx_MultiBufferStart_IT+0xd0a>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	4b8a      	ldr	r3, [pc, #552]	; (8005850 <HAL_DMAEx_MultiBufferStart_IT+0xf10>)
 8005628:	4299      	cmp	r1, r3
 800562a:	d00b      	beq.n	8005644 <HAL_DMAEx_MultiBufferStart_IT+0xd04>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4619      	mov	r1, r3
 8005632:	4b88      	ldr	r3, [pc, #544]	; (8005854 <HAL_DMAEx_MultiBufferStart_IT+0xf14>)
 8005634:	4299      	cmp	r1, r3
 8005636:	d102      	bne.n	800563e <HAL_DMAEx_MultiBufferStart_IT+0xcfe>
 8005638:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800563c:	e01e      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800563e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005642:	e01b      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005644:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005648:	e018      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800564a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800564e:	e015      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005654:	e012      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565a:	e00f      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800565c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005660:	e00c      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005666:	e009      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800566c:	e006      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800566e:	2304      	movs	r3, #4
 8005670:	e004      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005672:	2304      	movs	r3, #4
 8005674:	e002      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 8005676:	2304      	movs	r3, #4
 8005678:	e000      	b.n	800567c <HAL_DMAEx_MultiBufferStart_IT+0xd3c>
 800567a:	2304      	movs	r3, #4
 800567c:	60d3      	str	r3, [r2, #12]
 800567e:	e175      	b.n	800596c <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	4b74      	ldr	r3, [pc, #464]	; (8005858 <HAL_DMAEx_MultiBufferStart_IT+0xf18>)
 8005688:	429a      	cmp	r2, r3
 800568a:	d96c      	bls.n	8005766 <HAL_DMAEx_MultiBufferStart_IT+0xe26>
 800568c:	4a65      	ldr	r2, [pc, #404]	; (8005824 <HAL_DMAEx_MultiBufferStart_IT+0xee4>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <HAL_DMAEx_MultiBufferStart_IT+0xee8>)
 8005696:	4299      	cmp	r1, r3
 8005698:	d062      	beq.n	8005760 <HAL_DMAEx_MultiBufferStart_IT+0xe20>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4619      	mov	r1, r3
 80056a0:	4b62      	ldr	r3, [pc, #392]	; (800582c <HAL_DMAEx_MultiBufferStart_IT+0xeec>)
 80056a2:	4299      	cmp	r1, r3
 80056a4:	d05a      	beq.n	800575c <HAL_DMAEx_MultiBufferStart_IT+0xe1c>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	4b60      	ldr	r3, [pc, #384]	; (8005830 <HAL_DMAEx_MultiBufferStart_IT+0xef0>)
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d052      	beq.n	8005758 <HAL_DMAEx_MultiBufferStart_IT+0xe18>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4619      	mov	r1, r3
 80056b8:	4b5e      	ldr	r3, [pc, #376]	; (8005834 <HAL_DMAEx_MultiBufferStart_IT+0xef4>)
 80056ba:	4299      	cmp	r1, r3
 80056bc:	d04a      	beq.n	8005754 <HAL_DMAEx_MultiBufferStart_IT+0xe14>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4b5c      	ldr	r3, [pc, #368]	; (8005838 <HAL_DMAEx_MultiBufferStart_IT+0xef8>)
 80056c6:	4299      	cmp	r1, r3
 80056c8:	d041      	beq.n	800574e <HAL_DMAEx_MultiBufferStart_IT+0xe0e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	4b5a      	ldr	r3, [pc, #360]	; (800583c <HAL_DMAEx_MultiBufferStart_IT+0xefc>)
 80056d2:	4299      	cmp	r1, r3
 80056d4:	d038      	beq.n	8005748 <HAL_DMAEx_MultiBufferStart_IT+0xe08>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4619      	mov	r1, r3
 80056dc:	4b58      	ldr	r3, [pc, #352]	; (8005840 <HAL_DMAEx_MultiBufferStart_IT+0xf00>)
 80056de:	4299      	cmp	r1, r3
 80056e0:	d02f      	beq.n	8005742 <HAL_DMAEx_MultiBufferStart_IT+0xe02>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	4b56      	ldr	r3, [pc, #344]	; (8005844 <HAL_DMAEx_MultiBufferStart_IT+0xf04>)
 80056ea:	4299      	cmp	r1, r3
 80056ec:	d026      	beq.n	800573c <HAL_DMAEx_MultiBufferStart_IT+0xdfc>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	4b54      	ldr	r3, [pc, #336]	; (8005848 <HAL_DMAEx_MultiBufferStart_IT+0xf08>)
 80056f6:	4299      	cmp	r1, r3
 80056f8:	d01d      	beq.n	8005736 <HAL_DMAEx_MultiBufferStart_IT+0xdf6>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4b52      	ldr	r3, [pc, #328]	; (800584c <HAL_DMAEx_MultiBufferStart_IT+0xf0c>)
 8005702:	4299      	cmp	r1, r3
 8005704:	d014      	beq.n	8005730 <HAL_DMAEx_MultiBufferStart_IT+0xdf0>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4619      	mov	r1, r3
 800570c:	4b50      	ldr	r3, [pc, #320]	; (8005850 <HAL_DMAEx_MultiBufferStart_IT+0xf10>)
 800570e:	4299      	cmp	r1, r3
 8005710:	d00b      	beq.n	800572a <HAL_DMAEx_MultiBufferStart_IT+0xdea>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	4b4e      	ldr	r3, [pc, #312]	; (8005854 <HAL_DMAEx_MultiBufferStart_IT+0xf14>)
 800571a:	4299      	cmp	r1, r3
 800571c:	d102      	bne.n	8005724 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 800571e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005722:	e01e      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005728:	e01b      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800572a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800572e:	e018      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005730:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005734:	e015      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005736:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800573a:	e012      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800573c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005740:	e00f      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005746:	e00c      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800574c:	e009      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800574e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005752:	e006      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005754:	2304      	movs	r3, #4
 8005756:	e004      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005758:	2304      	movs	r3, #4
 800575a:	e002      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 800575c:	2304      	movs	r3, #4
 800575e:	e000      	b.n	8005762 <HAL_DMAEx_MultiBufferStart_IT+0xe22>
 8005760:	2304      	movs	r3, #4
 8005762:	6093      	str	r3, [r2, #8]
 8005764:	e102      	b.n	800596c <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	4b3b      	ldr	r3, [pc, #236]	; (800585c <HAL_DMAEx_MultiBufferStart_IT+0xf1c>)
 800576e:	429a      	cmp	r2, r3
 8005770:	f240 8090 	bls.w	8005894 <HAL_DMAEx_MultiBufferStart_IT+0xf54>
 8005774:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <HAL_DMAEx_MultiBufferStart_IT+0xf20>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4619      	mov	r1, r3
 800577c:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_DMAEx_MultiBufferStart_IT+0xee8>)
 800577e:	4299      	cmp	r1, r3
 8005780:	f000 8085 	beq.w	800588e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4619      	mov	r1, r3
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <HAL_DMAEx_MultiBufferStart_IT+0xeec>)
 800578c:	4299      	cmp	r1, r3
 800578e:	d07c      	beq.n	800588a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4619      	mov	r1, r3
 8005796:	4b26      	ldr	r3, [pc, #152]	; (8005830 <HAL_DMAEx_MultiBufferStart_IT+0xef0>)
 8005798:	4299      	cmp	r1, r3
 800579a:	d074      	beq.n	8005886 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4619      	mov	r1, r3
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <HAL_DMAEx_MultiBufferStart_IT+0xef4>)
 80057a4:	4299      	cmp	r1, r3
 80057a6:	d06c      	beq.n	8005882 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4b22      	ldr	r3, [pc, #136]	; (8005838 <HAL_DMAEx_MultiBufferStart_IT+0xef8>)
 80057b0:	4299      	cmp	r1, r3
 80057b2:	d063      	beq.n	800587c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4b20      	ldr	r3, [pc, #128]	; (800583c <HAL_DMAEx_MultiBufferStart_IT+0xefc>)
 80057bc:	4299      	cmp	r1, r3
 80057be:	d05a      	beq.n	8005876 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_DMAEx_MultiBufferStart_IT+0xf00>)
 80057c8:	4299      	cmp	r1, r3
 80057ca:	d051      	beq.n	8005870 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4619      	mov	r1, r3
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <HAL_DMAEx_MultiBufferStart_IT+0xf04>)
 80057d4:	4299      	cmp	r1, r3
 80057d6:	d048      	beq.n	800586a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4619      	mov	r1, r3
 80057de:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_DMAEx_MultiBufferStart_IT+0xf08>)
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d03f      	beq.n	8005864 <HAL_DMAEx_MultiBufferStart_IT+0xf24>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4619      	mov	r1, r3
 80057ea:	4b18      	ldr	r3, [pc, #96]	; (800584c <HAL_DMAEx_MultiBufferStart_IT+0xf0c>)
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d014      	beq.n	800581a <HAL_DMAEx_MultiBufferStart_IT+0xeda>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4619      	mov	r1, r3
 80057f6:	4b16      	ldr	r3, [pc, #88]	; (8005850 <HAL_DMAEx_MultiBufferStart_IT+0xf10>)
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d00b      	beq.n	8005814 <HAL_DMAEx_MultiBufferStart_IT+0xed4>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4619      	mov	r1, r3
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <HAL_DMAEx_MultiBufferStart_IT+0xf14>)
 8005804:	4299      	cmp	r1, r3
 8005806:	d102      	bne.n	800580e <HAL_DMAEx_MultiBufferStart_IT+0xece>
 8005808:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800580c:	e040      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800580e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005812:	e03d      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8005814:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005818:	e03a      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800581a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800581e:	e037      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8005820:	40026458 	.word	0x40026458
 8005824:	40026400 	.word	0x40026400
 8005828:	40026010 	.word	0x40026010
 800582c:	40026410 	.word	0x40026410
 8005830:	40026070 	.word	0x40026070
 8005834:	40026470 	.word	0x40026470
 8005838:	40026028 	.word	0x40026028
 800583c:	40026428 	.word	0x40026428
 8005840:	40026088 	.word	0x40026088
 8005844:	40026488 	.word	0x40026488
 8005848:	40026040 	.word	0x40026040
 800584c:	40026440 	.word	0x40026440
 8005850:	400260a0 	.word	0x400260a0
 8005854:	400264a0 	.word	0x400264a0
 8005858:	400260b8 	.word	0x400260b8
 800585c:	40026058 	.word	0x40026058
 8005860:	40026000 	.word	0x40026000
 8005864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005868:	e012      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800586a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800586e:	e00f      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8005870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005874:	e00c      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8005876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800587a:	e009      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800587c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005880:	e006      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8005882:	2304      	movs	r3, #4
 8005884:	e004      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 8005886:	2304      	movs	r3, #4
 8005888:	e002      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800588a:	2304      	movs	r3, #4
 800588c:	e000      	b.n	8005890 <HAL_DMAEx_MultiBufferStart_IT+0xf50>
 800588e:	2304      	movs	r3, #4
 8005890:	60d3      	str	r3, [r2, #12]
 8005892:	e06b      	b.n	800596c <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8005894:	4a9e      	ldr	r2, [pc, #632]	; (8005b10 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	4b9d      	ldr	r3, [pc, #628]	; (8005b14 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 800589e:	4299      	cmp	r1, r3
 80058a0:	d062      	beq.n	8005968 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4b9b      	ldr	r3, [pc, #620]	; (8005b18 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 80058aa:	4299      	cmp	r1, r3
 80058ac:	d05a      	beq.n	8005964 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	4b99      	ldr	r3, [pc, #612]	; (8005b1c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 80058b6:	4299      	cmp	r1, r3
 80058b8:	d052      	beq.n	8005960 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4619      	mov	r1, r3
 80058c0:	4b97      	ldr	r3, [pc, #604]	; (8005b20 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 80058c2:	4299      	cmp	r1, r3
 80058c4:	d04a      	beq.n	800595c <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	4b95      	ldr	r3, [pc, #596]	; (8005b24 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 80058ce:	4299      	cmp	r1, r3
 80058d0:	d041      	beq.n	8005956 <HAL_DMAEx_MultiBufferStart_IT+0x1016>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	4b93      	ldr	r3, [pc, #588]	; (8005b28 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 80058da:	4299      	cmp	r1, r3
 80058dc:	d038      	beq.n	8005950 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4619      	mov	r1, r3
 80058e4:	4b91      	ldr	r3, [pc, #580]	; (8005b2c <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 80058e6:	4299      	cmp	r1, r3
 80058e8:	d02f      	beq.n	800594a <HAL_DMAEx_MultiBufferStart_IT+0x100a>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4619      	mov	r1, r3
 80058f0:	4b8f      	ldr	r3, [pc, #572]	; (8005b30 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 80058f2:	4299      	cmp	r1, r3
 80058f4:	d026      	beq.n	8005944 <HAL_DMAEx_MultiBufferStart_IT+0x1004>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4b8d      	ldr	r3, [pc, #564]	; (8005b34 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 80058fe:	4299      	cmp	r1, r3
 8005900:	d01d      	beq.n	800593e <HAL_DMAEx_MultiBufferStart_IT+0xffe>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	4b8b      	ldr	r3, [pc, #556]	; (8005b38 <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 800590a:	4299      	cmp	r1, r3
 800590c:	d014      	beq.n	8005938 <HAL_DMAEx_MultiBufferStart_IT+0xff8>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	4b89      	ldr	r3, [pc, #548]	; (8005b3c <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 8005916:	4299      	cmp	r1, r3
 8005918:	d00b      	beq.n	8005932 <HAL_DMAEx_MultiBufferStart_IT+0xff2>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	4b87      	ldr	r3, [pc, #540]	; (8005b40 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 8005922:	4299      	cmp	r1, r3
 8005924:	d102      	bne.n	800592c <HAL_DMAEx_MultiBufferStart_IT+0xfec>
 8005926:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800592a:	e01e      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800592c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005930:	e01b      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005932:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005936:	e018      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800593c:	e015      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800593e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005942:	e012      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005948:	e00f      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800594a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800594e:	e00c      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005954:	e009      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800595a:	e006      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 800595c:	2304      	movs	r3, #4
 800595e:	e004      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005960:	2304      	movs	r3, #4
 8005962:	e002      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005964:	2304      	movs	r3, #4
 8005966:	e000      	b.n	800596a <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8005968:	2304      	movs	r3, #4
 800596a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	4b74      	ldr	r3, [pc, #464]	; (8005b44 <HAL_DMAEx_MultiBufferStart_IT+0x1204>)
 8005974:	429a      	cmp	r2, r3
 8005976:	d968      	bls.n	8005a4a <HAL_DMAEx_MultiBufferStart_IT+0x110a>
 8005978:	4a73      	ldr	r2, [pc, #460]	; (8005b48 <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4619      	mov	r1, r3
 8005980:	4b64      	ldr	r3, [pc, #400]	; (8005b14 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 8005982:	4299      	cmp	r1, r3
 8005984:	d05e      	beq.n	8005a44 <HAL_DMAEx_MultiBufferStart_IT+0x1104>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	4b62      	ldr	r3, [pc, #392]	; (8005b18 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 800598e:	4299      	cmp	r1, r3
 8005990:	d056      	beq.n	8005a40 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4619      	mov	r1, r3
 8005998:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 800599a:	4299      	cmp	r1, r3
 800599c:	d04e      	beq.n	8005a3c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4b5e      	ldr	r3, [pc, #376]	; (8005b20 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 80059a6:	4299      	cmp	r1, r3
 80059a8:	d046      	beq.n	8005a38 <HAL_DMAEx_MultiBufferStart_IT+0x10f8>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4619      	mov	r1, r3
 80059b0:	4b5c      	ldr	r3, [pc, #368]	; (8005b24 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 80059b2:	4299      	cmp	r1, r3
 80059b4:	d03e      	beq.n	8005a34 <HAL_DMAEx_MultiBufferStart_IT+0x10f4>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4619      	mov	r1, r3
 80059bc:	4b5a      	ldr	r3, [pc, #360]	; (8005b28 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 80059be:	4299      	cmp	r1, r3
 80059c0:	d036      	beq.n	8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x10f0>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	4b58      	ldr	r3, [pc, #352]	; (8005b2c <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 80059ca:	4299      	cmp	r1, r3
 80059cc:	d02e      	beq.n	8005a2c <HAL_DMAEx_MultiBufferStart_IT+0x10ec>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4619      	mov	r1, r3
 80059d4:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 80059d6:	4299      	cmp	r1, r3
 80059d8:	d026      	beq.n	8005a28 <HAL_DMAEx_MultiBufferStart_IT+0x10e8>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4619      	mov	r1, r3
 80059e0:	4b54      	ldr	r3, [pc, #336]	; (8005b34 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d01d      	beq.n	8005a22 <HAL_DMAEx_MultiBufferStart_IT+0x10e2>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	4b52      	ldr	r3, [pc, #328]	; (8005b38 <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d014      	beq.n	8005a1c <HAL_DMAEx_MultiBufferStart_IT+0x10dc>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	4b50      	ldr	r3, [pc, #320]	; (8005b3c <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 80059fa:	4299      	cmp	r1, r3
 80059fc:	d00b      	beq.n	8005a16 <HAL_DMAEx_MultiBufferStart_IT+0x10d6>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	4b4e      	ldr	r3, [pc, #312]	; (8005b40 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 8005a06:	4299      	cmp	r1, r3
 8005a08:	d102      	bne.n	8005a10 <HAL_DMAEx_MultiBufferStart_IT+0x10d0>
 8005a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a0e:	e01a      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a14:	e017      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a1a:	e014      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a20:	e011      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a26:	e00e      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	e00c      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	e00a      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a30:	2340      	movs	r3, #64	; 0x40
 8005a32:	e008      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	e006      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e004      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e002      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005a44:	2301      	movs	r3, #1
 8005a46:	60d3      	str	r3, [r2, #12]
 8005a48:	e166      	b.n	8005d18 <HAL_DMAEx_MultiBufferStart_IT+0x13d8>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b3e      	ldr	r3, [pc, #248]	; (8005b4c <HAL_DMAEx_MultiBufferStart_IT+0x120c>)
 8005a52:	429a      	cmp	r2, r3
 8005a54:	f240 8089 	bls.w	8005b6a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
 8005a58:	4a3b      	ldr	r2, [pc, #236]	; (8005b48 <HAL_DMAEx_MultiBufferStart_IT+0x1208>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>)
 8005a62:	4299      	cmp	r1, r3
 8005a64:	d07e      	beq.n	8005b64 <HAL_DMAEx_MultiBufferStart_IT+0x1224>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4b2a      	ldr	r3, [pc, #168]	; (8005b18 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>)
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	d076      	beq.n	8005b60 <HAL_DMAEx_MultiBufferStart_IT+0x1220>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4619      	mov	r1, r3
 8005a78:	4b28      	ldr	r3, [pc, #160]	; (8005b1c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>)
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d06e      	beq.n	8005b5c <HAL_DMAEx_MultiBufferStart_IT+0x121c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>)
 8005a86:	4299      	cmp	r1, r3
 8005a88:	d066      	beq.n	8005b58 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>)
 8005a92:	4299      	cmp	r1, r3
 8005a94:	d05e      	beq.n	8005b54 <HAL_DMAEx_MultiBufferStart_IT+0x1214>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4b22      	ldr	r3, [pc, #136]	; (8005b28 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>)
 8005a9e:	4299      	cmp	r1, r3
 8005aa0:	d056      	beq.n	8005b50 <HAL_DMAEx_MultiBufferStart_IT+0x1210>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_DMAEx_MultiBufferStart_IT+0x11ec>)
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	d02e      	beq.n	8005b0c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <HAL_DMAEx_MultiBufferStart_IT+0x11f0>)
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	d026      	beq.n	8005b08 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <HAL_DMAEx_MultiBufferStart_IT+0x11f4>)
 8005ac2:	4299      	cmp	r1, r3
 8005ac4:	d01d      	beq.n	8005b02 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4619      	mov	r1, r3
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_DMAEx_MultiBufferStart_IT+0x11f8>)
 8005ace:	4299      	cmp	r1, r3
 8005ad0:	d014      	beq.n	8005afc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <HAL_DMAEx_MultiBufferStart_IT+0x11fc>)
 8005ada:	4299      	cmp	r1, r3
 8005adc:	d00b      	beq.n	8005af6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <HAL_DMAEx_MultiBufferStart_IT+0x1200>)
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d102      	bne.n	8005af0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005aee:	e03a      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005af0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005af4:	e037      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005afa:	e034      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005afc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b00:	e031      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b06:	e02e      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b08:	2340      	movs	r3, #64	; 0x40
 8005b0a:	e02c      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b0c:	2340      	movs	r3, #64	; 0x40
 8005b0e:	e02a      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b10:	40026000 	.word	0x40026000
 8005b14:	40026010 	.word	0x40026010
 8005b18:	40026410 	.word	0x40026410
 8005b1c:	40026070 	.word	0x40026070
 8005b20:	40026470 	.word	0x40026470
 8005b24:	40026028 	.word	0x40026028
 8005b28:	40026428 	.word	0x40026428
 8005b2c:	40026088 	.word	0x40026088
 8005b30:	40026488 	.word	0x40026488
 8005b34:	40026040 	.word	0x40026040
 8005b38:	40026440 	.word	0x40026440
 8005b3c:	400260a0 	.word	0x400260a0
 8005b40:	400264a0 	.word	0x400264a0
 8005b44:	40026458 	.word	0x40026458
 8005b48:	40026400 	.word	0x40026400
 8005b4c:	400260b8 	.word	0x400260b8
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	e008      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	e006      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e004      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e002      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8005b64:	2301      	movs	r3, #1
 8005b66:	6093      	str	r3, [r2, #8]
 8005b68:	e0d6      	b.n	8005d18 <HAL_DMAEx_MultiBufferStart_IT+0x13d8>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b83      	ldr	r3, [pc, #524]	; (8005d80 <HAL_DMAEx_MultiBufferStart_IT+0x1440>)
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d968      	bls.n	8005c48 <HAL_DMAEx_MultiBufferStart_IT+0x1308>
 8005b76:	4a83      	ldr	r2, [pc, #524]	; (8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x1444>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4b82      	ldr	r3, [pc, #520]	; (8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x1448>)
 8005b80:	4299      	cmp	r1, r3
 8005b82:	d05e      	beq.n	8005c42 <HAL_DMAEx_MultiBufferStart_IT+0x1302>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4b80      	ldr	r3, [pc, #512]	; (8005d8c <HAL_DMAEx_MultiBufferStart_IT+0x144c>)
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d056      	beq.n	8005c3e <HAL_DMAEx_MultiBufferStart_IT+0x12fe>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	4b7e      	ldr	r3, [pc, #504]	; (8005d90 <HAL_DMAEx_MultiBufferStart_IT+0x1450>)
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d04e      	beq.n	8005c3a <HAL_DMAEx_MultiBufferStart_IT+0x12fa>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4b7c      	ldr	r3, [pc, #496]	; (8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x1454>)
 8005ba4:	4299      	cmp	r1, r3
 8005ba6:	d046      	beq.n	8005c36 <HAL_DMAEx_MultiBufferStart_IT+0x12f6>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4619      	mov	r1, r3
 8005bae:	4b7a      	ldr	r3, [pc, #488]	; (8005d98 <HAL_DMAEx_MultiBufferStart_IT+0x1458>)
 8005bb0:	4299      	cmp	r1, r3
 8005bb2:	d03e      	beq.n	8005c32 <HAL_DMAEx_MultiBufferStart_IT+0x12f2>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4b78      	ldr	r3, [pc, #480]	; (8005d9c <HAL_DMAEx_MultiBufferStart_IT+0x145c>)
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d036      	beq.n	8005c2e <HAL_DMAEx_MultiBufferStart_IT+0x12ee>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	4b76      	ldr	r3, [pc, #472]	; (8005da0 <HAL_DMAEx_MultiBufferStart_IT+0x1460>)
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	d02e      	beq.n	8005c2a <HAL_DMAEx_MultiBufferStart_IT+0x12ea>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4b74      	ldr	r3, [pc, #464]	; (8005da4 <HAL_DMAEx_MultiBufferStart_IT+0x1464>)
 8005bd4:	4299      	cmp	r1, r3
 8005bd6:	d026      	beq.n	8005c26 <HAL_DMAEx_MultiBufferStart_IT+0x12e6>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4b72      	ldr	r3, [pc, #456]	; (8005da8 <HAL_DMAEx_MultiBufferStart_IT+0x1468>)
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d01d      	beq.n	8005c20 <HAL_DMAEx_MultiBufferStart_IT+0x12e0>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4619      	mov	r1, r3
 8005bea:	4b70      	ldr	r3, [pc, #448]	; (8005dac <HAL_DMAEx_MultiBufferStart_IT+0x146c>)
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d014      	beq.n	8005c1a <HAL_DMAEx_MultiBufferStart_IT+0x12da>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4b6e      	ldr	r3, [pc, #440]	; (8005db0 <HAL_DMAEx_MultiBufferStart_IT+0x1470>)
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	d00b      	beq.n	8005c14 <HAL_DMAEx_MultiBufferStart_IT+0x12d4>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4619      	mov	r1, r3
 8005c02:	4b6c      	ldr	r3, [pc, #432]	; (8005db4 <HAL_DMAEx_MultiBufferStart_IT+0x1474>)
 8005c04:	4299      	cmp	r1, r3
 8005c06:	d102      	bne.n	8005c0e <HAL_DMAEx_MultiBufferStart_IT+0x12ce>
 8005c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c0c:	e01a      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c12:	e017      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c18:	e014      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c1e:	e011      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c24:	e00e      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	e00c      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c2a:	2340      	movs	r3, #64	; 0x40
 8005c2c:	e00a      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c2e:	2340      	movs	r3, #64	; 0x40
 8005c30:	e008      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	e006      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e004      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e002      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_DMAEx_MultiBufferStart_IT+0x1304>
 8005c42:	2301      	movs	r3, #1
 8005c44:	60d3      	str	r3, [r2, #12]
 8005c46:	e067      	b.n	8005d18 <HAL_DMAEx_MultiBufferStart_IT+0x13d8>
 8005c48:	4a4e      	ldr	r2, [pc, #312]	; (8005d84 <HAL_DMAEx_MultiBufferStart_IT+0x1444>)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4b4d      	ldr	r3, [pc, #308]	; (8005d88 <HAL_DMAEx_MultiBufferStart_IT+0x1448>)
 8005c52:	4299      	cmp	r1, r3
 8005c54:	d05e      	beq.n	8005d14 <HAL_DMAEx_MultiBufferStart_IT+0x13d4>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4b4b      	ldr	r3, [pc, #300]	; (8005d8c <HAL_DMAEx_MultiBufferStart_IT+0x144c>)
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	d056      	beq.n	8005d10 <HAL_DMAEx_MultiBufferStart_IT+0x13d0>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4619      	mov	r1, r3
 8005c68:	4b49      	ldr	r3, [pc, #292]	; (8005d90 <HAL_DMAEx_MultiBufferStart_IT+0x1450>)
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	d04e      	beq.n	8005d0c <HAL_DMAEx_MultiBufferStart_IT+0x13cc>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
 8005c74:	4b47      	ldr	r3, [pc, #284]	; (8005d94 <HAL_DMAEx_MultiBufferStart_IT+0x1454>)
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d046      	beq.n	8005d08 <HAL_DMAEx_MultiBufferStart_IT+0x13c8>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4b45      	ldr	r3, [pc, #276]	; (8005d98 <HAL_DMAEx_MultiBufferStart_IT+0x1458>)
 8005c82:	4299      	cmp	r1, r3
 8005c84:	d03e      	beq.n	8005d04 <HAL_DMAEx_MultiBufferStart_IT+0x13c4>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4b43      	ldr	r3, [pc, #268]	; (8005d9c <HAL_DMAEx_MultiBufferStart_IT+0x145c>)
 8005c8e:	4299      	cmp	r1, r3
 8005c90:	d036      	beq.n	8005d00 <HAL_DMAEx_MultiBufferStart_IT+0x13c0>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4619      	mov	r1, r3
 8005c98:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <HAL_DMAEx_MultiBufferStart_IT+0x1460>)
 8005c9a:	4299      	cmp	r1, r3
 8005c9c:	d02e      	beq.n	8005cfc <HAL_DMAEx_MultiBufferStart_IT+0x13bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <HAL_DMAEx_MultiBufferStart_IT+0x1464>)
 8005ca6:	4299      	cmp	r1, r3
 8005ca8:	d026      	beq.n	8005cf8 <HAL_DMAEx_MultiBufferStart_IT+0x13b8>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4b3d      	ldr	r3, [pc, #244]	; (8005da8 <HAL_DMAEx_MultiBufferStart_IT+0x1468>)
 8005cb2:	4299      	cmp	r1, r3
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_DMAEx_MultiBufferStart_IT+0x13b2>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <HAL_DMAEx_MultiBufferStart_IT+0x146c>)
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d014      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x13ac>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_DMAEx_MultiBufferStart_IT+0x1470>)
 8005cca:	4299      	cmp	r1, r3
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_DMAEx_MultiBufferStart_IT+0x13a6>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4b37      	ldr	r3, [pc, #220]	; (8005db4 <HAL_DMAEx_MultiBufferStart_IT+0x1474>)
 8005cd6:	4299      	cmp	r1, r3
 8005cd8:	d102      	bne.n	8005ce0 <HAL_DMAEx_MultiBufferStart_IT+0x13a0>
 8005cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cde:	e01a      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005ce0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ce4:	e017      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cea:	e014      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cf0:	e011      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cf6:	e00e      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005cf8:	2340      	movs	r3, #64	; 0x40
 8005cfa:	e00c      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	e00a      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005d00:	2340      	movs	r3, #64	; 0x40
 8005d02:	e008      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	e006      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e004      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e002      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <HAL_DMAEx_MultiBufferStart_IT+0x13d6>
 8005d14:	2301      	movs	r3, #1
 8005d16:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	f042 0216 	orr.w	r2, r2, #22
 8005d26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	6952      	ldr	r2, [r2, #20]
 8005d32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <HAL_DMAEx_MultiBufferStart_IT+0x1408>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d007      	beq.n	8005d58 <HAL_DMAEx_MultiBufferStart_IT+0x1418>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	f042 0208 	orr.w	r2, r2, #8
 8005d56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	f042 0201 	orr.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e005      	b.n	8005d76 <HAL_DMAEx_MultiBufferStart_IT+0x1436>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d72:	2302      	movs	r3, #2
 8005d74:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40026058 	.word	0x40026058
 8005d84:	40026000 	.word	0x40026000
 8005d88:	40026010 	.word	0x40026010
 8005d8c:	40026410 	.word	0x40026410
 8005d90:	40026070 	.word	0x40026070
 8005d94:	40026470 	.word	0x40026470
 8005d98:	40026028 	.word	0x40026028
 8005d9c:	40026428 	.word	0x40026428
 8005da0:	40026088 	.word	0x40026088
 8005da4:	40026488 	.word	0x40026488
 8005da8:	40026040 	.word	0x40026040
 8005dac:	40026440 	.word	0x40026440
 8005db0:	400260a0 	.word	0x400260a0
 8005db4:	400264a0 	.word	0x400264a0

08005db8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	60da      	str	r2, [r3, #12]
 8005dd4:	e003      	b.n	8005dde <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b40      	cmp	r3, #64	; 0x40
 8005e08:	d108      	bne.n	8005e1c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e1a:	e007      	b.n	8005e2c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	e177      	b.n	8006144 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e54:	2201      	movs	r2, #1
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	4013      	ands	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	f040 8166 	bne.w	800613e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d003      	beq.n	8005e82 <HAL_GPIO_Init+0x4a>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	2b12      	cmp	r3, #18
 8005e80:	d123      	bne.n	8005eca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	08da      	lsrs	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3208      	adds	r2, #8
 8005e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	220f      	movs	r2, #15
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	08da      	lsrs	r2, r3, #3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3208      	adds	r2, #8
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 0203 	and.w	r2, r3, #3
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d00b      	beq.n	8005f1e <HAL_GPIO_Init+0xe6>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d007      	beq.n	8005f1e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f12:	2b11      	cmp	r3, #17
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b12      	cmp	r3, #18
 8005f1c:	d130      	bne.n	8005f80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	2203      	movs	r2, #3
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4013      	ands	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f54:	2201      	movs	r2, #1
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 0201 	and.w	r2, r3, #1
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80c0 	beq.w	800613e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	4a65      	ldr	r2, [pc, #404]	; (8006158 <HAL_GPIO_Init+0x320>)
 8005fc4:	4b64      	ldr	r3, [pc, #400]	; (8006158 <HAL_GPIO_Init+0x320>)
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8005fce:	4b62      	ldr	r3, [pc, #392]	; (8006158 <HAL_GPIO_Init+0x320>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fda:	4a60      	ldr	r2, [pc, #384]	; (800615c <HAL_GPIO_Init+0x324>)
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a57      	ldr	r2, [pc, #348]	; (8006160 <HAL_GPIO_Init+0x328>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d037      	beq.n	8006076 <HAL_GPIO_Init+0x23e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a56      	ldr	r2, [pc, #344]	; (8006164 <HAL_GPIO_Init+0x32c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d031      	beq.n	8006072 <HAL_GPIO_Init+0x23a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a55      	ldr	r2, [pc, #340]	; (8006168 <HAL_GPIO_Init+0x330>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d02b      	beq.n	800606e <HAL_GPIO_Init+0x236>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a54      	ldr	r2, [pc, #336]	; (800616c <HAL_GPIO_Init+0x334>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d025      	beq.n	800606a <HAL_GPIO_Init+0x232>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a53      	ldr	r2, [pc, #332]	; (8006170 <HAL_GPIO_Init+0x338>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01f      	beq.n	8006066 <HAL_GPIO_Init+0x22e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a52      	ldr	r2, [pc, #328]	; (8006174 <HAL_GPIO_Init+0x33c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d019      	beq.n	8006062 <HAL_GPIO_Init+0x22a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a51      	ldr	r2, [pc, #324]	; (8006178 <HAL_GPIO_Init+0x340>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d013      	beq.n	800605e <HAL_GPIO_Init+0x226>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a50      	ldr	r2, [pc, #320]	; (800617c <HAL_GPIO_Init+0x344>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d00d      	beq.n	800605a <HAL_GPIO_Init+0x222>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a4f      	ldr	r2, [pc, #316]	; (8006180 <HAL_GPIO_Init+0x348>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d007      	beq.n	8006056 <HAL_GPIO_Init+0x21e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a4e      	ldr	r2, [pc, #312]	; (8006184 <HAL_GPIO_Init+0x34c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <HAL_GPIO_Init+0x21a>
 800604e:	2309      	movs	r3, #9
 8006050:	e012      	b.n	8006078 <HAL_GPIO_Init+0x240>
 8006052:	230a      	movs	r3, #10
 8006054:	e010      	b.n	8006078 <HAL_GPIO_Init+0x240>
 8006056:	2308      	movs	r3, #8
 8006058:	e00e      	b.n	8006078 <HAL_GPIO_Init+0x240>
 800605a:	2307      	movs	r3, #7
 800605c:	e00c      	b.n	8006078 <HAL_GPIO_Init+0x240>
 800605e:	2306      	movs	r3, #6
 8006060:	e00a      	b.n	8006078 <HAL_GPIO_Init+0x240>
 8006062:	2305      	movs	r3, #5
 8006064:	e008      	b.n	8006078 <HAL_GPIO_Init+0x240>
 8006066:	2304      	movs	r3, #4
 8006068:	e006      	b.n	8006078 <HAL_GPIO_Init+0x240>
 800606a:	2303      	movs	r3, #3
 800606c:	e004      	b.n	8006078 <HAL_GPIO_Init+0x240>
 800606e:	2302      	movs	r3, #2
 8006070:	e002      	b.n	8006078 <HAL_GPIO_Init+0x240>
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_GPIO_Init+0x240>
 8006076:	2300      	movs	r3, #0
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	f002 0203 	and.w	r2, r2, #3
 800607e:	0092      	lsls	r2, r2, #2
 8006080:	4093      	lsls	r3, r2
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4313      	orrs	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006088:	4934      	ldr	r1, [pc, #208]	; (800615c <HAL_GPIO_Init+0x324>)
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	089b      	lsrs	r3, r3, #2
 800608e:	3302      	adds	r3, #2
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <HAL_GPIO_Init+0x350>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060ba:	4a33      	ldr	r2, [pc, #204]	; (8006188 <HAL_GPIO_Init+0x350>)
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060c0:	4b31      	ldr	r3, [pc, #196]	; (8006188 <HAL_GPIO_Init+0x350>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060e4:	4a28      	ldr	r2, [pc, #160]	; (8006188 <HAL_GPIO_Init+0x350>)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ea:	4b27      	ldr	r3, [pc, #156]	; (8006188 <HAL_GPIO_Init+0x350>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_GPIO_Init+0x350>)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006114:	4b1c      	ldr	r3, [pc, #112]	; (8006188 <HAL_GPIO_Init+0x350>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	43db      	mvns	r3, r3
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4013      	ands	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <HAL_GPIO_Init+0x350>)
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	2b0f      	cmp	r3, #15
 8006148:	f67f ae84 	bls.w	8005e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800614c:	bf00      	nop
 800614e:	3724      	adds	r7, #36	; 0x24
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40023800 	.word	0x40023800
 800615c:	40013800 	.word	0x40013800
 8006160:	40020000 	.word	0x40020000
 8006164:	40020400 	.word	0x40020400
 8006168:	40020800 	.word	0x40020800
 800616c:	40020c00 	.word	0x40020c00
 8006170:	40021000 	.word	0x40021000
 8006174:	40021400 	.word	0x40021400
 8006178:	40021800 	.word	0x40021800
 800617c:	40021c00 	.word	0x40021c00
 8006180:	40022000 	.word	0x40022000
 8006184:	40022400 	.word	0x40022400
 8006188:	40013c00 	.word	0x40013c00

0800618c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	887b      	ldrh	r3, [r7, #2]
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
 80061a8:	e001      	b.n	80061ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	807b      	strh	r3, [r7, #2]
 80061c8:	4613      	mov	r3, r2
 80061ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061cc:	787b      	ldrb	r3, [r7, #1]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061d2:	887a      	ldrh	r2, [r7, #2]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061d8:	e003      	b.n	80061e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061da:	887b      	ldrh	r3, [r7, #2]
 80061dc:	041a      	lsls	r2, r3, #16
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	619a      	str	r2, [r3, #24]
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e0c8      	b.n	800639c <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f002 f9ee 	bl	8008600 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2224      	movs	r2, #36	; 0x24
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	6812      	ldr	r2, [r2, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800623c:	f001 f8c2 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8006240:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4a57      	ldr	r2, [pc, #348]	; (80063a4 <HAL_I2C_Init+0x1b4>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	0c9b      	lsrs	r3, r3, #18
 800624c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4952      	ldr	r1, [pc, #328]	; (80063a8 <HAL_I2C_Init+0x1b8>)
 8006260:	428b      	cmp	r3, r1
 8006262:	d802      	bhi.n	800626a <HAL_I2C_Init+0x7a>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	e009      	b.n	800627e <HAL_I2C_Init+0x8e>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	494d      	ldr	r1, [pc, #308]	; (80063ac <HAL_I2C_Init+0x1bc>)
 8006276:	fba1 1303 	umull	r1, r3, r1, r3
 800627a:	099b      	lsrs	r3, r3, #6
 800627c:	3301      	adds	r3, #1
 800627e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a47      	ldr	r2, [pc, #284]	; (80063a8 <HAL_I2C_Init+0x1b8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d812      	bhi.n	80062b4 <HAL_I2C_Init+0xc4>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d906      	bls.n	80062b0 <HAL_I2C_Init+0xc0>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	e045      	b.n	800633c <HAL_I2C_Init+0x14c>
 80062b0:	2304      	movs	r3, #4
 80062b2:	e043      	b.n	800633c <HAL_I2C_Init+0x14c>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10f      	bne.n	80062dc <HAL_I2C_Init+0xec>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	4413      	add	r3, r2
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e010      	b.n	80062fe <HAL_I2C_Init+0x10e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009a      	lsls	r2, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_I2C_Init+0x116>
 8006302:	2301      	movs	r3, #1
 8006304:	e01a      	b.n	800633c <HAL_I2C_Init+0x14c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <HAL_I2C_Init+0x134>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	fbb2 f3f3 	udiv	r3, r2, r3
 800631e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006322:	e00b      	b.n	800633c <HAL_I2C_Init+0x14c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009a      	lsls	r2, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	fbb2 f3f3 	udiv	r3, r2, r3
 8006338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	69d1      	ldr	r1, [r2, #28]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6a12      	ldr	r2, [r2, #32]
 800634a:	430a      	orrs	r2, r1
 800634c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6911      	ldr	r1, [r2, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68d2      	ldr	r2, [r2, #12]
 800635a:	430a      	orrs	r2, r1
 800635c:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6951      	ldr	r1, [r2, #20]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6992      	ldr	r2, [r2, #24]
 800636a:	430a      	orrs	r2, r1
 800636c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6812      	ldr	r2, [r2, #0]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	f042 0201 	orr.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	431bde83 	.word	0x431bde83
 80063a8:	000186a0 	.word	0x000186a0
 80063ac:	10624dd3 	.word	0x10624dd3

080063b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	461a      	mov	r2, r3
 80063bc:	460b      	mov	r3, r1
 80063be:	817b      	strh	r3, [r7, #10]
 80063c0:	4613      	mov	r3, r2
 80063c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c8:	f7fd faca 	bl	8003960 <HAL_GetTick>
 80063cc:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	f040 80ee 	bne.w	80065b8 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2319      	movs	r3, #25
 80063e2:	2201      	movs	r2, #1
 80063e4:	4977      	ldr	r1, [pc, #476]	; (80065c4 <HAL_I2C_Master_Transmit+0x214>)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f972 	bl	80066d0 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 80063f2:	2302      	movs	r3, #2
 80063f4:	e0e1      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_I2C_Master_Transmit+0x54>
 8006400:	2302      	movs	r3, #2
 8006402:	e0da      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b01      	cmp	r3, #1
 8006418:	d007      	beq.n	800642a <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	6812      	ldr	r2, [r2, #0]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006438:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2221      	movs	r2, #33	; 0x21
 800643e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2210      	movs	r2, #16
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	893a      	ldrh	r2, [r7, #8]
 800645a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4a5a      	ldr	r2, [pc, #360]	; (80065c8 <HAL_I2C_Master_Transmit+0x218>)
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f8aa 	bl	80065cc <I2C_MasterRequestWrite>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00f      	beq.n	800649e <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	2b04      	cmp	r3, #4
 8006484:	d105      	bne.n	8006492 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e093      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e08d      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	613b      	str	r3, [r7, #16]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80064b4:	e066      	b.n	8006584 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	6a39      	ldr	r1, [r7, #32]
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f9c7 	bl	800684e <I2C_WaitOnTXEFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00f      	beq.n	80064e6 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d109      	bne.n	80064e2 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064dc:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e06b      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e069      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	1c58      	adds	r0, r3, #1
 80064f0:	68f9      	ldr	r1, [r7, #12]
 80064f2:	6248      	str	r0, [r1, #36]	; 0x24
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d119      	bne.n	8006554 <HAL_I2C_Master_Transmit+0x1a4>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d015      	beq.n	8006554 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	1c58      	adds	r0, r3, #1
 8006532:	68f9      	ldr	r1, [r7, #12]
 8006534:	6248      	str	r0, [r1, #36]	; 0x24
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	6a39      	ldr	r1, [r7, #32]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f9b5 	bl	80068c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	2b04      	cmp	r3, #4
 800656a:	d109      	bne.n	8006580 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800657a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e01c      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e01a      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d194      	bne.n	80064b6 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e000      	b.n	80065ba <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	00100002 	.word	0x00100002
 80065c8:	ffff0000 	.word	0xffff0000

080065cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	460b      	mov	r3, r1
 80065da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d006      	beq.n	80065f6 <I2C_MasterRequestWrite+0x2a>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d003      	beq.n	80065f6 <I2C_MasterRequestWrite+0x2a>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065f4:	d108      	bne.n	8006608 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	6812      	ldr	r2, [r2, #0]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e00b      	b.n	8006620 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	2b12      	cmp	r3, #18
 800660e:	d107      	bne.n	8006620 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	6812      	ldr	r2, [r2, #0]
 800661a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f84f 	bl	80066d0 <I2C_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e040      	b.n	80066be <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006644:	d107      	bne.n	8006656 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	897a      	ldrh	r2, [r7, #10]
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006652:	611a      	str	r2, [r3, #16]
 8006654:	e021      	b.n	800669a <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	897a      	ldrh	r2, [r7, #10]
 800665c:	11d2      	asrs	r2, r2, #7
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	f002 0206 	and.w	r2, r2, #6
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	f062 020f 	orn	r2, r2, #15
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4915      	ldr	r1, [pc, #84]	; (80066c8 <I2C_MasterRequestWrite+0xfc>)
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f87c 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	2b04      	cmp	r3, #4
 8006686:	d101      	bne.n	800668c <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e018      	b.n	80066be <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e016      	b.n	80066be <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	897a      	ldrh	r2, [r7, #10]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	490b      	ldr	r1, [pc, #44]	; (80066cc <I2C_MasterRequestWrite+0x100>)
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f866 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d101      	bne.n	80066b8 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e002      	b.n	80066be <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e000      	b.n	80066be <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	00010008 	.word	0x00010008
 80066cc:	00010002 	.word	0x00010002

080066d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80066e0:	e01f      	b.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e8:	d01b      	beq.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066f0:	f7fd f936 	bl	8003960 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d910      	bls.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e023      	b.n	800676a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10d      	bne.n	8006748 <I2C_WaitOnFlagUntilTimeout+0x78>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	43da      	mvns	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4013      	ands	r3, r2
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	e00c      	b.n	8006762 <I2C_WaitOnFlagUntilTimeout+0x92>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	43da      	mvns	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	429a      	cmp	r2, r3
 8006766:	d0bc      	beq.n	80066e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006780:	e040      	b.n	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006790:	d11c      	bne.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067aa:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2204      	movs	r2, #4
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e03c      	b.n	8006846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d017      	beq.n	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d007      	beq.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80067da:	f7fd f8c1 	bl	8003960 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d90c      	bls.n	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e020      	b.n	8006846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b01      	cmp	r3, #1
 800680c:	d10c      	bne.n	8006828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e00b      	b.n	8006840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	43da      	mvns	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4013      	ands	r3, r2
 8006834:	b29b      	uxth	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	bf14      	ite	ne
 800683a:	2301      	movne	r3, #1
 800683c:	2300      	moveq	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d19e      	bne.n	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800685a:	e029      	b.n	80068b0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f870 	bl	8006942 <I2C_IsAcknowledgeFailed>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d001      	beq.n	800686c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e029      	b.n	80068c0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d01d      	beq.n	80068b0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800687a:	f7fd f871 	bl	8003960 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	d912      	bls.n	80068b0 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e007      	b.n	80068c0 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d1ce      	bne.n	800685c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068d4:	e029      	b.n	800692a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f833 	bl	8006942 <I2C_IsAcknowledgeFailed>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e029      	b.n	800693a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d01d      	beq.n	800692a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068f4:	f7fd f834 	bl	8003960 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	1ad2      	subs	r2, r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	429a      	cmp	r2, r3
 8006902:	d912      	bls.n	800692a <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e007      	b.n	800693a <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b04      	cmp	r3, #4
 8006936:	d1ce      	bne.n	80068d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006958:	d114      	bne.n	8006984 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006962:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2204      	movs	r2, #4
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d129      	bne.n	80069fc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2224      	movs	r2, #36	; 0x24
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);    
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	6812      	ldr	r2, [r2, #0]
 80069ba:	f022 0201 	bic.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069ca:	f022 0210 	bic.w	r2, r2, #16
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6812      	ldr	r2, [r2, #0]
 80069d8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c); 
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	f042 0201 	orr.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d12a      	bne.n	8006a7a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	; 0x24
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);  
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	f022 0201 	bic.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
    
    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	81fb      	strh	r3, [r7, #14]
    
    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006a44:	89fb      	ldrh	r3, [r7, #14]
 8006a46:	f023 030f 	bic.w	r3, r3, #15
 8006a4a:	81fb      	strh	r3, [r7, #14]
    
    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	81fb      	strh	r3, [r7, #14]
    
    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	89fa      	ldrh	r2, [r7, #14]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24
    
    __HAL_I2C_ENABLE(hi2c); 
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	f042 0201 	orr.w	r2, r2, #1
 8006a6c:	601a      	str	r2, [r3, #0]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
    return HAL_OK; 
 8006a76:	2300      	movs	r3, #0
 8006a78:	e000      	b.n	8006a7c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY; 
 8006a7a:	2302      	movs	r3, #2
  }
}  
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a98:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa2:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <HAL_PWREx_EnableOverDrive+0x90>)
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aaa:	603b      	str	r3, [r7, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006aae:	4b1b      	ldr	r3, [pc, #108]	; (8006b1c <HAL_PWREx_EnableOverDrive+0x94>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ab4:	f7fc ff54 	bl	8003960 <HAL_GetTick>
 8006ab8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006aba:	e009      	b.n	8006ad0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006abc:	f7fc ff50 	bl	8003960 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aca:	d901      	bls.n	8006ad0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e01f      	b.n	8006b10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ad0:	4b13      	ldr	r3, [pc, #76]	; (8006b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006adc:	d1ee      	bne.n	8006abc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ae4:	f7fc ff3c 	bl	8003960 <HAL_GetTick>
 8006ae8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006aea:	e009      	b.n	8006b00 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006aec:	f7fc ff38 	bl	8003960 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afa:	d901      	bls.n	8006b00 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e007      	b.n	8006b10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b0c:	d1ee      	bne.n	8006aec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	420e0040 	.word	0x420e0040
 8006b20:	40007000 	.word	0x40007000
 8006b24:	420e0044 	.word	0x420e0044

08006b28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e22d      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d075      	beq.n	8006c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b46:	4ba3      	ldr	r3, [pc, #652]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d00c      	beq.n	8006b6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b52:	4ba0      	ldr	r3, [pc, #640]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d112      	bne.n	8006b84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b5e:	4b9d      	ldr	r3, [pc, #628]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b6a:	d10b      	bne.n	8006b84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b6c:	4b99      	ldr	r3, [pc, #612]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d05b      	beq.n	8006c30 <HAL_RCC_OscConfig+0x108>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d157      	bne.n	8006c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e208      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d106      	bne.n	8006b9c <HAL_RCC_OscConfig+0x74>
 8006b8e:	4a91      	ldr	r2, [pc, #580]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	4b90      	ldr	r3, [pc, #576]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e01d      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x98>
 8006ba6:	4a8b      	ldr	r2, [pc, #556]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006ba8:	4b8a      	ldr	r3, [pc, #552]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	4a88      	ldr	r2, [pc, #544]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bb4:	4b87      	ldr	r3, [pc, #540]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	e00b      	b.n	8006bd8 <HAL_RCC_OscConfig+0xb0>
 8006bc0:	4a84      	ldr	r2, [pc, #528]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bc2:	4b84      	ldr	r3, [pc, #528]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	4a81      	ldr	r2, [pc, #516]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bce:	4b81      	ldr	r3, [pc, #516]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d013      	beq.n	8006c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fc febe 	bl	8003960 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be8:	f7fc feba 	bl	8003960 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e1cd      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	4b76      	ldr	r3, [pc, #472]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCC_OscConfig+0xc0>
 8006c06:	e014      	b.n	8006c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c08:	f7fc feaa 	bl	8003960 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c10:	f7fc fea6 	bl	8003960 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b64      	cmp	r3, #100	; 0x64
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e1b9      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c22:	4b6c      	ldr	r3, [pc, #432]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0xe8>
 8006c2e:	e000      	b.n	8006c32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d063      	beq.n	8006d06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c3e:	4b65      	ldr	r3, [pc, #404]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 030c 	and.w	r3, r3, #12
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c4a:	4b62      	ldr	r3, [pc, #392]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d11c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c56:	4b5f      	ldr	r3, [pc, #380]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d116      	bne.n	8006c90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c62:	4b5c      	ldr	r3, [pc, #368]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <HAL_RCC_OscConfig+0x152>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d001      	beq.n	8006c7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e18d      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7a:	4956      	ldr	r1, [pc, #344]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c7c:	4b55      	ldr	r3, [pc, #340]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c8e:	e03a      	b.n	8006d06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d020      	beq.n	8006cda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c98:	4b4f      	ldr	r3, [pc, #316]	; (8006dd8 <HAL_RCC_OscConfig+0x2b0>)
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9e:	f7fc fe5f 	bl	8003960 <HAL_GetTick>
 8006ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca4:	e008      	b.n	8006cb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca6:	f7fc fe5b 	bl	8003960 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d901      	bls.n	8006cb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e16e      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb8:	4b46      	ldr	r3, [pc, #280]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d0f0      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc4:	4943      	ldr	r1, [pc, #268]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006cc6:	4b43      	ldr	r3, [pc, #268]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	600b      	str	r3, [r1, #0]
 8006cd8:	e015      	b.n	8006d06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cda:	4b3f      	ldr	r3, [pc, #252]	; (8006dd8 <HAL_RCC_OscConfig+0x2b0>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fc fe3e 	bl	8003960 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ce8:	f7fc fe3a 	bl	8003960 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e14d      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cfa:	4b36      	ldr	r3, [pc, #216]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0308 	and.w	r3, r3, #8
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d030      	beq.n	8006d74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d1a:	4b30      	ldr	r3, [pc, #192]	; (8006ddc <HAL_RCC_OscConfig+0x2b4>)
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fc fe1e 	bl	8003960 <HAL_GetTick>
 8006d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d28:	f7fc fe1a 	bl	8003960 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e12d      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x200>
 8006d46:	e015      	b.n	8006d74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d48:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <HAL_RCC_OscConfig+0x2b4>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d4e:	f7fc fe07 	bl	8003960 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d56:	f7fc fe03 	bl	8003960 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e116      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d68:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f0      	bne.n	8006d56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80a0 	beq.w	8006ec2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	4a0f      	ldr	r2, [pc, #60]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da0:	6413      	str	r3, [r2, #64]	; 0x40
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <HAL_RCC_OscConfig+0x2ac>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db2:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <HAL_RCC_OscConfig+0x2b8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d121      	bne.n	8006e02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <HAL_RCC_OscConfig+0x2b8>)
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <HAL_RCC_OscConfig+0x2b8>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dca:	f7fc fdc9 	bl	8003960 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd0:	e011      	b.n	8006df6 <HAL_RCC_OscConfig+0x2ce>
 8006dd2:	bf00      	nop
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	42470000 	.word	0x42470000
 8006ddc:	42470e80 	.word	0x42470e80
 8006de0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006de4:	f7fc fdbc 	bl	8003960 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e0cf      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006df6:	4b6a      	ldr	r3, [pc, #424]	; (8006fa0 <HAL_RCC_OscConfig+0x478>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f0      	beq.n	8006de4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d106      	bne.n	8006e18 <HAL_RCC_OscConfig+0x2f0>
 8006e0a:	4a66      	ldr	r2, [pc, #408]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e0c:	4b65      	ldr	r3, [pc, #404]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	6713      	str	r3, [r2, #112]	; 0x70
 8006e16:	e01c      	b.n	8006e52 <HAL_RCC_OscConfig+0x32a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d10c      	bne.n	8006e3a <HAL_RCC_OscConfig+0x312>
 8006e20:	4a60      	ldr	r2, [pc, #384]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e22:	4b60      	ldr	r3, [pc, #384]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e26:	f043 0304 	orr.w	r3, r3, #4
 8006e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e2c:	4a5d      	ldr	r2, [pc, #372]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e2e:	4b5d      	ldr	r3, [pc, #372]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	f043 0301 	orr.w	r3, r3, #1
 8006e36:	6713      	str	r3, [r2, #112]	; 0x70
 8006e38:	e00b      	b.n	8006e52 <HAL_RCC_OscConfig+0x32a>
 8006e3a:	4a5a      	ldr	r2, [pc, #360]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e3c:	4b59      	ldr	r3, [pc, #356]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	6713      	str	r3, [r2, #112]	; 0x70
 8006e46:	4a57      	ldr	r2, [pc, #348]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e48:	4b56      	ldr	r3, [pc, #344]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d015      	beq.n	8006e86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5a:	f7fc fd81 	bl	8003960 <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e60:	e00a      	b.n	8006e78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e62:	f7fc fd7d 	bl	8003960 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e08e      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e78:	4b4a      	ldr	r3, [pc, #296]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0ee      	beq.n	8006e62 <HAL_RCC_OscConfig+0x33a>
 8006e84:	e014      	b.n	8006eb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e86:	f7fc fd6b 	bl	8003960 <HAL_GetTick>
 8006e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e8c:	e00a      	b.n	8006ea4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e8e:	f7fc fd67 	bl	8003960 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e078      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ea4:	4b3f      	ldr	r3, [pc, #252]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1ee      	bne.n	8006e8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eb6:	4a3b      	ldr	r2, [pc, #236]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006eb8:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d064      	beq.n	8006f94 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eca:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 030c 	and.w	r3, r3, #12
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d05c      	beq.n	8006f90 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d141      	bne.n	8006f62 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ede:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <HAL_RCC_OscConfig+0x480>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fc fd3c 	bl	8003960 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fc fd38 	bl	8003960 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e04b      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efe:	4b29      	ldr	r3, [pc, #164]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f0a:	4926      	ldr	r1, [pc, #152]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	019b      	lsls	r3, r3, #6
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	3b01      	subs	r3, #1
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	061b      	lsls	r3, r3, #24
 8006f30:	4313      	orrs	r3, r2
 8006f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f34:	4b1c      	ldr	r3, [pc, #112]	; (8006fa8 <HAL_RCC_OscConfig+0x480>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3a:	f7fc fd11 	bl	8003960 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f42:	f7fc fd0d 	bl	8003960 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e020      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f54:	4b13      	ldr	r3, [pc, #76]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f0      	beq.n	8006f42 <HAL_RCC_OscConfig+0x41a>
 8006f60:	e018      	b.n	8006f94 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f62:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <HAL_RCC_OscConfig+0x480>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f68:	f7fc fcfa 	bl	8003960 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f70:	f7fc fcf6 	bl	8003960 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e009      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f82:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <HAL_RCC_OscConfig+0x47c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0x448>
 8006f8e:	e001      	b.n	8006f94 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40007000 	.word	0x40007000
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	42470060 	.word	0x42470060

08006fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0ca      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc0:	4b67      	ldr	r3, [pc, #412]	; (8007160 <HAL_RCC_ClockConfig+0x1b4>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 020f 	and.w	r2, r3, #15
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d20c      	bcs.n	8006fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fce:	4b64      	ldr	r3, [pc, #400]	; (8007160 <HAL_RCC_ClockConfig+0x1b4>)
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b62      	ldr	r3, [pc, #392]	; (8007160 <HAL_RCC_ClockConfig+0x1b4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 020f 	and.w	r2, r3, #15
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e0b6      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d020      	beq.n	8007036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007000:	4a58      	ldr	r2, [pc, #352]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007002:	4b58      	ldr	r3, [pc, #352]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800700a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007018:	4a52      	ldr	r2, [pc, #328]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800701a:	4b52      	ldr	r3, [pc, #328]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007024:	494f      	ldr	r1, [pc, #316]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007026:	4b4f      	ldr	r3, [pc, #316]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	4313      	orrs	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d044      	beq.n	80070cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d107      	bne.n	800705a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704a:	4b46      	ldr	r3, [pc, #280]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d119      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e07d      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d003      	beq.n	800706a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007066:	2b03      	cmp	r3, #3
 8007068:	d107      	bne.n	800707a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706a:	4b3e      	ldr	r3, [pc, #248]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e06d      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707a:	4b3a      	ldr	r3, [pc, #232]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e065      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800708a:	4936      	ldr	r1, [pc, #216]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800708c:	4b35      	ldr	r3, [pc, #212]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f023 0203 	bic.w	r2, r3, #3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4313      	orrs	r3, r2
 800709a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800709c:	f7fc fc60 	bl	8003960 <HAL_GetTick>
 80070a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a4:	f7fc fc5c 	bl	8003960 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e04d      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ba:	4b2a      	ldr	r3, [pc, #168]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 020c 	and.w	r2, r3, #12
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d1eb      	bne.n	80070a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070cc:	4b24      	ldr	r3, [pc, #144]	; (8007160 <HAL_RCC_ClockConfig+0x1b4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d90c      	bls.n	80070f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070da:	4b21      	ldr	r3, [pc, #132]	; (8007160 <HAL_RCC_ClockConfig+0x1b4>)
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <HAL_RCC_ClockConfig+0x1b4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 020f 	and.w	r2, r3, #15
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e030      	b.n	8007156 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007100:	4918      	ldr	r1, [pc, #96]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007102:	4b18      	ldr	r3, [pc, #96]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800711e:	4911      	ldr	r1, [pc, #68]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007120:	4b10      	ldr	r3, [pc, #64]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4313      	orrs	r3, r2
 8007130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007132:	f000 f885 	bl	8007240 <HAL_RCC_GetSysClockFreq>
 8007136:	4601      	mov	r1, r0
 8007138:	4b0a      	ldr	r3, [pc, #40]	; (8007164 <HAL_RCC_ClockConfig+0x1b8>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	4a09      	ldr	r2, [pc, #36]	; (8007168 <HAL_RCC_ClockConfig+0x1bc>)
 8007144:	5cd3      	ldrb	r3, [r2, r3]
 8007146:	fa21 f303 	lsr.w	r3, r1, r3
 800714a:	4a08      	ldr	r2, [pc, #32]	; (800716c <HAL_RCC_ClockConfig+0x1c0>)
 800714c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800714e:	2000      	movs	r0, #0
 8007150:	f7fc fbc2 	bl	80038d8 <HAL_InitTick>

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40023c00 	.word	0x40023c00
 8007164:	40023800 	.word	0x40023800
 8007168:	0800967c 	.word	0x0800967c
 800716c:	200081c4 	.word	0x200081c4

08007170 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08c      	sub	sp, #48	; 0x30
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d129      	bne.n	80071d6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8007182:	2300      	movs	r3, #0
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	4a2b      	ldr	r2, [pc, #172]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 8007188:	4b2a      	ldr	r3, [pc, #168]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	f043 0301 	orr.w	r3, r3, #1
 8007190:	6313      	str	r3, [r2, #48]	; 0x30
 8007192:	4b28      	ldr	r3, [pc, #160]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800719e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a4:	2302      	movs	r3, #2
 80071a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a8:	2303      	movs	r3, #3
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80071b4:	f107 031c 	add.w	r3, r7, #28
 80071b8:	4619      	mov	r1, r3
 80071ba:	481f      	ldr	r0, [pc, #124]	; (8007238 <HAL_RCC_MCOConfig+0xc8>)
 80071bc:	f7fe fe3c 	bl	8005e38 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80071c0:	481c      	ldr	r0, [pc, #112]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	430b      	orrs	r3, r1
 80071d0:	4313      	orrs	r3, r2
 80071d2:	6083      	str	r3, [r0, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80071d4:	e029      	b.n	800722a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	4a16      	ldr	r2, [pc, #88]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f043 0304 	orr.w	r3, r3, #4
 80071e4:	6313      	str	r3, [r2, #48]	; 0x30
 80071e6:	4b13      	ldr	r3, [pc, #76]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80071f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f8:	2302      	movs	r3, #2
 80071fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071fc:	2303      	movs	r3, #3
 80071fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007200:	2300      	movs	r3, #0
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007204:	2300      	movs	r3, #0
 8007206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007208:	f107 031c 	add.w	r3, r7, #28
 800720c:	4619      	mov	r1, r3
 800720e:	480b      	ldr	r0, [pc, #44]	; (800723c <HAL_RCC_MCOConfig+0xcc>)
 8007210:	f7fe fe12 	bl	8005e38 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8007214:	4807      	ldr	r0, [pc, #28]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 8007216:	4b07      	ldr	r3, [pc, #28]	; (8007234 <HAL_RCC_MCOConfig+0xc4>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	00d9      	lsls	r1, r3, #3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	430b      	orrs	r3, r1
 8007226:	4313      	orrs	r3, r2
 8007228:	6083      	str	r3, [r0, #8]
}
 800722a:	bf00      	nop
 800722c:	3730      	adds	r7, #48	; 0x30
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800
 8007238:	40020000 	.word	0x40020000
 800723c:	40020800 	.word	0x40020800

08007240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	b087      	sub	sp, #28
 8007246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007248:	2200      	movs	r2, #0
 800724a:	60fa      	str	r2, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	617a      	str	r2, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8007254:	2200      	movs	r2, #0
 8007256:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007258:	4a51      	ldr	r2, [pc, #324]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800725a:	6892      	ldr	r2, [r2, #8]
 800725c:	f002 020c 	and.w	r2, r2, #12
 8007260:	2a04      	cmp	r2, #4
 8007262:	d007      	beq.n	8007274 <HAL_RCC_GetSysClockFreq+0x34>
 8007264:	2a08      	cmp	r2, #8
 8007266:	d008      	beq.n	800727a <HAL_RCC_GetSysClockFreq+0x3a>
 8007268:	2a00      	cmp	r2, #0
 800726a:	f040 8090 	bne.w	800738e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800726e:	4b4d      	ldr	r3, [pc, #308]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8007270:	613b      	str	r3, [r7, #16]
       break;
 8007272:	e08f      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007274:	4b4c      	ldr	r3, [pc, #304]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x168>)
 8007276:	613b      	str	r3, [r7, #16]
      break;
 8007278:	e08c      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800727a:	4a49      	ldr	r2, [pc, #292]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800727c:	6852      	ldr	r2, [r2, #4]
 800727e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007282:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007284:	4a46      	ldr	r2, [pc, #280]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007286:	6852      	ldr	r2, [r2, #4]
 8007288:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800728c:	2a00      	cmp	r2, #0
 800728e:	d023      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007290:	4b43      	ldr	r3, [pc, #268]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	099b      	lsrs	r3, r3, #6
 8007296:	f04f 0400 	mov.w	r4, #0
 800729a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	ea03 0301 	and.w	r3, r3, r1
 80072a6:	ea04 0402 	and.w	r4, r4, r2
 80072aa:	4a3f      	ldr	r2, [pc, #252]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80072ac:	fb02 f104 	mul.w	r1, r2, r4
 80072b0:	2200      	movs	r2, #0
 80072b2:	fb02 f203 	mul.w	r2, r2, r3
 80072b6:	440a      	add	r2, r1
 80072b8:	493b      	ldr	r1, [pc, #236]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80072ba:	fba3 0101 	umull	r0, r1, r3, r1
 80072be:	1853      	adds	r3, r2, r1
 80072c0:	4619      	mov	r1, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f04f 0400 	mov.w	r4, #0
 80072c8:	461a      	mov	r2, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	f7f8 ff8e 	bl	80001ec <__aeabi_uldivmod>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e04c      	b.n	8007372 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072d8:	4a31      	ldr	r2, [pc, #196]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80072da:	6852      	ldr	r2, [r2, #4]
 80072dc:	0992      	lsrs	r2, r2, #6
 80072de:	4611      	mov	r1, r2
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f240 15ff 	movw	r5, #511	; 0x1ff
 80072e8:	f04f 0600 	mov.w	r6, #0
 80072ec:	ea05 0501 	and.w	r5, r5, r1
 80072f0:	ea06 0602 	and.w	r6, r6, r2
 80072f4:	4629      	mov	r1, r5
 80072f6:	4632      	mov	r2, r6
 80072f8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80072fc:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8007300:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8007304:	4651      	mov	r1, sl
 8007306:	465a      	mov	r2, fp
 8007308:	46aa      	mov	sl, r5
 800730a:	46b3      	mov	fp, r6
 800730c:	4655      	mov	r5, sl
 800730e:	465e      	mov	r6, fp
 8007310:	1b4d      	subs	r5, r1, r5
 8007312:	eb62 0606 	sbc.w	r6, r2, r6
 8007316:	4629      	mov	r1, r5
 8007318:	4632      	mov	r2, r6
 800731a:	0194      	lsls	r4, r2, #6
 800731c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007320:	018b      	lsls	r3, r1, #6
 8007322:	1a5b      	subs	r3, r3, r1
 8007324:	eb64 0402 	sbc.w	r4, r4, r2
 8007328:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800732c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8007330:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8007334:	4643      	mov	r3, r8
 8007336:	464c      	mov	r4, r9
 8007338:	4655      	mov	r5, sl
 800733a:	465e      	mov	r6, fp
 800733c:	18ed      	adds	r5, r5, r3
 800733e:	eb46 0604 	adc.w	r6, r6, r4
 8007342:	462b      	mov	r3, r5
 8007344:	4634      	mov	r4, r6
 8007346:	02a2      	lsls	r2, r4, #10
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	029b      	lsls	r3, r3, #10
 8007354:	603b      	str	r3, [r7, #0]
 8007356:	e897 0018 	ldmia.w	r7, {r3, r4}
 800735a:	4618      	mov	r0, r3
 800735c:	4621      	mov	r1, r4
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f04f 0400 	mov.w	r4, #0
 8007364:	461a      	mov	r2, r3
 8007366:	4623      	mov	r3, r4
 8007368:	f7f8 ff40 	bl	80001ec <__aeabi_uldivmod>
 800736c:	4603      	mov	r3, r0
 800736e:	460c      	mov	r4, r1
 8007370:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007372:	4b0b      	ldr	r3, [pc, #44]	; (80073a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	3301      	adds	r3, #1
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	fbb2 f3f3 	udiv	r3, r2, r3
 800738a:	613b      	str	r3, [r7, #16]
      break;
 800738c:	e002      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8007390:	613b      	str	r3, [r7, #16]
      break;
 8007392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007394:	693b      	ldr	r3, [r7, #16]
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a0:	40023800 	.word	0x40023800
 80073a4:	00f42400 	.word	0x00f42400
 80073a8:	017d7840 	.word	0x017d7840

080073ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80073b2:	681b      	ldr	r3, [r3, #0]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	200081c4 	.word	0x200081c4

080073c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073c8:	f7ff fff0 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073cc:	4601      	mov	r1, r0
 80073ce:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	0a9b      	lsrs	r3, r3, #10
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	4a03      	ldr	r2, [pc, #12]	; (80073e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073da:	5cd3      	ldrb	r3, [r2, r3]
 80073dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	40023800 	.word	0x40023800
 80073e8:	0800968c 	.word	0x0800968c

080073ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073f0:	f7ff ffdc 	bl	80073ac <HAL_RCC_GetHCLKFreq>
 80073f4:	4601      	mov	r1, r0
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <HAL_RCC_GetPCLK2Freq+0x20>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	0b5b      	lsrs	r3, r3, #13
 80073fc:	f003 0307 	and.w	r3, r3, #7
 8007400:	4a03      	ldr	r2, [pc, #12]	; (8007410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007402:	5cd3      	ldrb	r3, [r2, r3]
 8007404:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007408:	4618      	mov	r0, r3
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40023800 	.word	0x40023800
 8007410:	0800968c 	.word	0x0800968c

08007414 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e025      	b.n	8007474 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fa63 	bl	8008908 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2202      	movs	r2, #2
 8007446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f000 fadd 	bl	8007a14 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	f000 fb48 	bl	8007afa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3708      	adds	r7, #8
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e055      	b.n	800753a <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d106      	bne.n	80074ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 f8f1 	bl	8008690 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	6812      	ldr	r2, [r2, #0]
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6851      	ldr	r1, [r2, #4]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	6892      	ldr	r2, [r2, #8]
 80074d2:	4311      	orrs	r1, r2
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68d2      	ldr	r2, [r2, #12]
 80074d8:	4311      	orrs	r1, r2
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6912      	ldr	r2, [r2, #16]
 80074de:	4311      	orrs	r1, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6952      	ldr	r2, [r2, #20]
 80074e4:	4311      	orrs	r1, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6992      	ldr	r2, [r2, #24]
 80074ea:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80074ee:	4311      	orrs	r1, r2
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	69d2      	ldr	r2, [r2, #28]
 80074f4:	4311      	orrs	r1, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6a12      	ldr	r2, [r2, #32]
 80074fa:	4311      	orrs	r1, r2
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007500:	430a      	orrs	r2, r1
 8007502:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6992      	ldr	r2, [r2, #24]
 800750c:	0c12      	lsrs	r2, r2, #16
 800750e:	f002 0104 	and.w	r1, r2, #4
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007516:	430a      	orrs	r2, r1
 8007518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	69d2      	ldr	r2, [r2, #28]
 8007524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007528:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e03f      	b.n	80075d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f8f9 	bl	8008760 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2224      	movs	r2, #36	; 0x24
 8007572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	68d2      	ldr	r2, [r2, #12]
 8007580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007584:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f828 	bl	80075dc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	6912      	ldr	r2, [r2, #16]
 8007596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800759a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	6952      	ldr	r2, [r2, #20]
 80075a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075aa:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	68d2      	ldr	r2, [r2, #12]
 80075b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075ba:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007618:	f023 030c 	bic.w	r3, r3, #12
 800761c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	4313      	orrs	r3, r2
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007650:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800766c:	f040 80e4 	bne.w	8007838 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4aab      	ldr	r2, [pc, #684]	; (8007924 <UART_SetConfig+0x348>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <UART_SetConfig+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4aaa      	ldr	r2, [pc, #680]	; (8007928 <UART_SetConfig+0x34c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d16c      	bne.n	800775e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681c      	ldr	r4, [r3, #0]
 8007688:	f7ff feb0 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 800768c:	4602      	mov	r2, r0
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	009a      	lsls	r2, r3, #2
 8007696:	441a      	add	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	4aa2      	ldr	r2, [pc, #648]	; (800792c <UART_SetConfig+0x350>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	011d      	lsls	r5, r3, #4
 80076ac:	f7ff fe9e 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 80076b0:	4602      	mov	r2, r0
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009a      	lsls	r2, r3, #2
 80076ba:	441a      	add	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80076c6:	f7ff fe91 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 80076ca:	4602      	mov	r2, r0
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009a      	lsls	r2, r3, #2
 80076d4:	441a      	add	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	005b      	lsls	r3, r3, #1
 80076dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e0:	4a92      	ldr	r2, [pc, #584]	; (800792c <UART_SetConfig+0x350>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	2264      	movs	r2, #100	; 0x64
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
 80076ee:	1af3      	subs	r3, r6, r3
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	3332      	adds	r3, #50	; 0x32
 80076f4:	4a8d      	ldr	r2, [pc, #564]	; (800792c <UART_SetConfig+0x350>)
 80076f6:	fba2 2303 	umull	r2, r3, r2, r3
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007702:	441d      	add	r5, r3
 8007704:	f7ff fe72 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 8007708:	4602      	mov	r2, r0
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009a      	lsls	r2, r3, #2
 8007712:	441a      	add	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	fbb2 f6f3 	udiv	r6, r2, r3
 800771e:	f7ff fe65 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 8007722:	4602      	mov	r2, r0
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009a      	lsls	r2, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	4a7c      	ldr	r2, [pc, #496]	; (800792c <UART_SetConfig+0x350>)
 800773a:	fba2 2303 	umull	r2, r3, r2, r3
 800773e:	095b      	lsrs	r3, r3, #5
 8007740:	2264      	movs	r2, #100	; 0x64
 8007742:	fb02 f303 	mul.w	r3, r2, r3
 8007746:	1af3      	subs	r3, r6, r3
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	3332      	adds	r3, #50	; 0x32
 800774c:	4a77      	ldr	r2, [pc, #476]	; (800792c <UART_SetConfig+0x350>)
 800774e:	fba2 2303 	umull	r2, r3, r2, r3
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	f003 0307 	and.w	r3, r3, #7
 8007758:	442b      	add	r3, r5
 800775a:	60a3      	str	r3, [r4, #8]
 800775c:	e154      	b.n	8007a08 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681c      	ldr	r4, [r3, #0]
 8007762:	f7ff fe2f 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8007766:	4602      	mov	r2, r0
 8007768:	4613      	mov	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	009a      	lsls	r2, r3, #2
 8007770:	441a      	add	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	4a6b      	ldr	r2, [pc, #428]	; (800792c <UART_SetConfig+0x350>)
 800777e:	fba2 2303 	umull	r2, r3, r2, r3
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	011d      	lsls	r5, r3, #4
 8007786:	f7ff fe1d 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 800778a:	4602      	mov	r2, r0
 800778c:	4613      	mov	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	009a      	lsls	r2, r3, #2
 8007794:	441a      	add	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	fbb2 f6f3 	udiv	r6, r2, r3
 80077a0:	f7ff fe10 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80077a4:	4602      	mov	r2, r0
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009a      	lsls	r2, r3, #2
 80077ae:	441a      	add	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ba:	4a5c      	ldr	r2, [pc, #368]	; (800792c <UART_SetConfig+0x350>)
 80077bc:	fba2 2303 	umull	r2, r3, r2, r3
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	2264      	movs	r2, #100	; 0x64
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
 80077c8:	1af3      	subs	r3, r6, r3
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	3332      	adds	r3, #50	; 0x32
 80077ce:	4a57      	ldr	r2, [pc, #348]	; (800792c <UART_SetConfig+0x350>)
 80077d0:	fba2 2303 	umull	r2, r3, r2, r3
 80077d4:	095b      	lsrs	r3, r3, #5
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077dc:	441d      	add	r5, r3
 80077de:	f7ff fdf1 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009a      	lsls	r2, r3, #2
 80077ec:	441a      	add	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80077f8:	f7ff fde4 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009a      	lsls	r2, r3, #2
 8007806:	441a      	add	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007812:	4a46      	ldr	r2, [pc, #280]	; (800792c <UART_SetConfig+0x350>)
 8007814:	fba2 2303 	umull	r2, r3, r2, r3
 8007818:	095b      	lsrs	r3, r3, #5
 800781a:	2264      	movs	r2, #100	; 0x64
 800781c:	fb02 f303 	mul.w	r3, r2, r3
 8007820:	1af3      	subs	r3, r6, r3
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	3332      	adds	r3, #50	; 0x32
 8007826:	4a41      	ldr	r2, [pc, #260]	; (800792c <UART_SetConfig+0x350>)
 8007828:	fba2 2303 	umull	r2, r3, r2, r3
 800782c:	095b      	lsrs	r3, r3, #5
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	442b      	add	r3, r5
 8007834:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8007836:	e0e7      	b.n	8007a08 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a39      	ldr	r2, [pc, #228]	; (8007924 <UART_SetConfig+0x348>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d004      	beq.n	800784c <UART_SetConfig+0x270>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a38      	ldr	r2, [pc, #224]	; (8007928 <UART_SetConfig+0x34c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d171      	bne.n	8007930 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681c      	ldr	r4, [r3, #0]
 8007850:	f7ff fdcc 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 8007854:	4602      	mov	r2, r0
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009a      	lsls	r2, r3, #2
 800785e:	441a      	add	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	4a30      	ldr	r2, [pc, #192]	; (800792c <UART_SetConfig+0x350>)
 800786c:	fba2 2303 	umull	r2, r3, r2, r3
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	011d      	lsls	r5, r3, #4
 8007874:	f7ff fdba 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 8007878:	4602      	mov	r2, r0
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009a      	lsls	r2, r3, #2
 8007882:	441a      	add	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	fbb2 f6f3 	udiv	r6, r2, r3
 800788e:	f7ff fdad 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 8007892:	4602      	mov	r2, r0
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009a      	lsls	r2, r3, #2
 800789c:	441a      	add	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a8:	4a20      	ldr	r2, [pc, #128]	; (800792c <UART_SetConfig+0x350>)
 80078aa:	fba2 2303 	umull	r2, r3, r2, r3
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2264      	movs	r2, #100	; 0x64
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	1af3      	subs	r3, r6, r3
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	3332      	adds	r3, #50	; 0x32
 80078bc:	4a1b      	ldr	r2, [pc, #108]	; (800792c <UART_SetConfig+0x350>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078c8:	441d      	add	r5, r3
 80078ca:	f7ff fd8f 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009a      	lsls	r2, r3, #2
 80078d8:	441a      	add	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80078e4:	f7ff fd82 	bl	80073ec <HAL_RCC_GetPCLK2Freq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009a      	lsls	r2, r3, #2
 80078f2:	441a      	add	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fe:	4a0b      	ldr	r2, [pc, #44]	; (800792c <UART_SetConfig+0x350>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	2264      	movs	r2, #100	; 0x64
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	1af3      	subs	r3, r6, r3
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	3332      	adds	r3, #50	; 0x32
 8007912:	4a06      	ldr	r2, [pc, #24]	; (800792c <UART_SetConfig+0x350>)
 8007914:	fba2 2303 	umull	r2, r3, r2, r3
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	442b      	add	r3, r5
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	e071      	b.n	8007a08 <UART_SetConfig+0x42c>
 8007924:	40011000 	.word	0x40011000
 8007928:	40011400 	.word	0x40011400
 800792c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681c      	ldr	r4, [r3, #0]
 8007934:	f7ff fd46 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8007938:	4602      	mov	r2, r0
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009a      	lsls	r2, r3, #2
 8007942:	441a      	add	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	4a30      	ldr	r2, [pc, #192]	; (8007a10 <UART_SetConfig+0x434>)
 8007950:	fba2 2303 	umull	r2, r3, r2, r3
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	011d      	lsls	r5, r3, #4
 8007958:	f7ff fd34 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 800795c:	4602      	mov	r2, r0
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009a      	lsls	r2, r3, #2
 8007966:	441a      	add	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007972:	f7ff fd27 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 8007976:	4602      	mov	r2, r0
 8007978:	4613      	mov	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	009a      	lsls	r2, r3, #2
 8007980:	441a      	add	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	fbb2 f3f3 	udiv	r3, r2, r3
 800798c:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <UART_SetConfig+0x434>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	095b      	lsrs	r3, r3, #5
 8007994:	2264      	movs	r2, #100	; 0x64
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	1af3      	subs	r3, r6, r3
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	3332      	adds	r3, #50	; 0x32
 80079a0:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <UART_SetConfig+0x434>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	095b      	lsrs	r3, r3, #5
 80079a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079ac:	441d      	add	r5, r3
 80079ae:	f7ff fd09 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80079b2:	4602      	mov	r2, r0
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009a      	lsls	r2, r3, #2
 80079bc:	441a      	add	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80079c8:	f7ff fcfc 	bl	80073c4 <HAL_RCC_GetPCLK1Freq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009a      	lsls	r2, r3, #2
 80079d6:	441a      	add	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e2:	4a0b      	ldr	r2, [pc, #44]	; (8007a10 <UART_SetConfig+0x434>)
 80079e4:	fba2 2303 	umull	r2, r3, r2, r3
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	2264      	movs	r2, #100	; 0x64
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	1af3      	subs	r3, r6, r3
 80079f2:	011b      	lsls	r3, r3, #4
 80079f4:	3332      	adds	r3, #50	; 0x32
 80079f6:	4a06      	ldr	r2, [pc, #24]	; (8007a10 <UART_SetConfig+0x434>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	095b      	lsrs	r3, r3, #5
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	442b      	add	r3, r5
 8007a04:	60a3      	str	r3, [r4, #8]
}
 8007a06:	e7ff      	b.n	8007a08 <UART_SetConfig+0x42c>
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a10:	51eb851f 	.word	0x51eb851f

08007a14 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d029      	beq.n	8007a82 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007a3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a3e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a48:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007a4e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007a54:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007a5a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007a60:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007a66:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007a6c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007a72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e034      	b.n	8007aec <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a8e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007a98:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007a9e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ac0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007ac6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007acc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007ad2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007ad8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d02e      	beq.n	8007b72 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007b20:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b30:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007b3a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007b44:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b4e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007b58:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007b62:	4313      	orrs	r3, r2
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	609a      	str	r2, [r3, #8]
 8007b70:	e03b      	b.n	8007bea <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b82:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007b94:	4313      	orrs	r3, r2
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ba8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	3b01      	subs	r3, #1
 8007bb6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bb8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007bc2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007bcc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <run_nn>:
q7_t output_data[IP1_OUT_DIM];

q7_t col_buffer[3200];
q7_t scratch_buffer[40960];

void run_nn() {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08e      	sub	sp, #56	; 0x38
 8007bfc:	af0c      	add	r7, sp, #48	; 0x30

  q7_t* buffer1 = scratch_buffer;
 8007bfe:	4b57      	ldr	r3, [pc, #348]	; (8007d5c <run_nn+0x164>)
 8007c00:	607b      	str	r3, [r7, #4]
  q7_t* buffer2 = buffer1 + 32768;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c08:	603b      	str	r3, [r7, #0]
  arm_convolve_HWC_q7_RGB(input_data, CONV1_IN_DIM, CONV1_IN_CH, conv1_wt, CONV1_OUT_CH, CONV1_KER_DIM, CONV1_PAD, CONV1_STRIDE, conv1_bias, CONV1_BIAS_LSHIFT, CONV1_OUT_RSHIFT, buffer1, CONV1_OUT_DIM, (q15_t*)col_buffer, NULL);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c0e:	4b54      	ldr	r3, [pc, #336]	; (8007d60 <run_nn+0x168>)
 8007c10:	9309      	str	r3, [sp, #36]	; 0x24
 8007c12:	2320      	movs	r3, #32
 8007c14:	9308      	str	r3, [sp, #32]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	230b      	movs	r3, #11
 8007c1c:	9306      	str	r3, [sp, #24]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9305      	str	r3, [sp, #20]
 8007c22:	4b50      	ldr	r3, [pc, #320]	; (8007d64 <run_nn+0x16c>)
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	2301      	movs	r3, #1
 8007c28:	9303      	str	r3, [sp, #12]
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	2305      	movs	r3, #5
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	2320      	movs	r3, #32
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <run_nn+0x170>)
 8007c38:	2203      	movs	r2, #3
 8007c3a:	2120      	movs	r1, #32
 8007c3c:	484b      	ldr	r0, [pc, #300]	; (8007d6c <run_nn+0x174>)
 8007c3e:	f7f8 fd3d 	bl	80006bc <arm_convolve_HWC_q7_RGB>
  arm_maxpool_q7_HWC(buffer1, POOL1_IN_DIM, POOL1_IN_CH, POOL1_KER_DIM, POOL1_PAD, POOL1_STRIDE, POOL1_OUT_DIM, col_buffer, buffer2);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	9304      	str	r3, [sp, #16]
 8007c46:	4b46      	ldr	r3, [pc, #280]	; (8007d60 <run_nn+0x168>)
 8007c48:	9303      	str	r3, [sp, #12]
 8007c4a:	2310      	movs	r3, #16
 8007c4c:	9302      	str	r3, [sp, #8]
 8007c4e:	2302      	movs	r3, #2
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	2300      	movs	r3, #0
 8007c54:	9300      	str	r3, [sp, #0]
 8007c56:	2303      	movs	r3, #3
 8007c58:	2220      	movs	r2, #32
 8007c5a:	2120      	movs	r1, #32
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7fb fb75 	bl	800334c <arm_maxpool_q7_HWC>
  arm_relu_q7(buffer2, RELU1_OUT_DIM*RELU1_OUT_DIM*RELU1_OUT_CH);
 8007c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c66:	6838      	ldr	r0, [r7, #0]
 8007c68:	f7f8 fcc8 	bl	80005fc <arm_relu_q7>
  arm_convolve_HWC_q7_fast(buffer2, CONV2_IN_DIM, CONV2_IN_CH, conv2_wt, CONV2_OUT_CH, CONV2_KER_DIM, CONV2_PAD, CONV2_STRIDE, conv2_bias, CONV2_BIAS_LSHIFT, CONV2_OUT_RSHIFT, buffer1, CONV2_OUT_DIM, (q15_t*)col_buffer, NULL);
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c70:	4b3b      	ldr	r3, [pc, #236]	; (8007d60 <run_nn+0x168>)
 8007c72:	9309      	str	r3, [sp, #36]	; 0x24
 8007c74:	2310      	movs	r3, #16
 8007c76:	9308      	str	r3, [sp, #32]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	9306      	str	r3, [sp, #24]
 8007c80:	2300      	movs	r3, #0
 8007c82:	9305      	str	r3, [sp, #20]
 8007c84:	4b3a      	ldr	r3, [pc, #232]	; (8007d70 <run_nn+0x178>)
 8007c86:	9304      	str	r3, [sp, #16]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	2305      	movs	r3, #5
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	2310      	movs	r3, #16
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4b36      	ldr	r3, [pc, #216]	; (8007d74 <run_nn+0x17c>)
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	2110      	movs	r1, #16
 8007c9e:	6838      	ldr	r0, [r7, #0]
 8007ca0:	f7f8 ff4c 	bl	8000b3c <arm_convolve_HWC_q7_fast>
  arm_relu_q7(buffer1, RELU2_OUT_DIM*RELU2_OUT_DIM*RELU2_OUT_CH);
 8007ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7f8 fca7 	bl	80005fc <arm_relu_q7>
  arm_avepool_q7_HWC(buffer1, POOL2_IN_DIM, POOL2_IN_CH, POOL2_KER_DIM, POOL2_PAD, POOL2_STRIDE, POOL2_OUT_DIM, col_buffer, buffer2);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	4b2b      	ldr	r3, [pc, #172]	; (8007d60 <run_nn+0x168>)
 8007cb4:	9303      	str	r3, [sp, #12]
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	9302      	str	r3, [sp, #8]
 8007cba:	2302      	movs	r3, #2
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	2210      	movs	r2, #16
 8007cc6:	2110      	movs	r1, #16
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fb fc76 	bl	80035ba <arm_avepool_q7_HWC>
  arm_convolve_HWC_q7_fast(buffer2, CONV3_IN_DIM, CONV3_IN_CH, conv3_wt, CONV3_OUT_CH, CONV3_KER_DIM, CONV3_PAD, CONV3_STRIDE, conv3_bias, CONV3_BIAS_LSHIFT, CONV3_OUT_RSHIFT, buffer1, CONV3_OUT_DIM, (q15_t*)col_buffer, NULL);
 8007cce:	2300      	movs	r3, #0
 8007cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cd2:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <run_nn+0x168>)
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	9308      	str	r3, [sp, #32]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	9307      	str	r3, [sp, #28]
 8007cde:	2308      	movs	r3, #8
 8007ce0:	9306      	str	r3, [sp, #24]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	4b24      	ldr	r3, [pc, #144]	; (8007d78 <run_nn+0x180>)
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	2301      	movs	r3, #1
 8007cec:	9303      	str	r3, [sp, #12]
 8007cee:	2302      	movs	r3, #2
 8007cf0:	9302      	str	r3, [sp, #8]
 8007cf2:	2305      	movs	r3, #5
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	2320      	movs	r3, #32
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	4b20      	ldr	r3, [pc, #128]	; (8007d7c <run_nn+0x184>)
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	2108      	movs	r1, #8
 8007d00:	6838      	ldr	r0, [r7, #0]
 8007d02:	f7f8 ff1b 	bl	8000b3c <arm_convolve_HWC_q7_fast>
  arm_relu_q7(buffer1, RELU3_OUT_DIM*RELU3_OUT_DIM*RELU3_OUT_CH);
 8007d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7f8 fc76 	bl	80005fc <arm_relu_q7>
  arm_avepool_q7_HWC(buffer1, POOL3_IN_DIM, POOL3_IN_CH, POOL3_KER_DIM, POOL3_PAD, POOL3_STRIDE, POOL3_OUT_DIM, col_buffer, buffer2);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	9304      	str	r3, [sp, #16]
 8007d14:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <run_nn+0x168>)
 8007d16:	9303      	str	r3, [sp, #12]
 8007d18:	2304      	movs	r3, #4
 8007d1a:	9302      	str	r3, [sp, #8]
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	2300      	movs	r3, #0
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	2303      	movs	r3, #3
 8007d26:	2220      	movs	r2, #32
 8007d28:	2108      	movs	r1, #8
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fb fc45 	bl	80035ba <arm_avepool_q7_HWC>
  arm_fully_connected_q7_opt(buffer2, ip1_wt, IP1_IN_DIM, IP1_OUT_DIM, IP1_BIAS_LSHIFT, IP1_OUT_RSHIFT, ip1_bias, output_data, (q15_t*)col_buffer);
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <run_nn+0x168>)
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <run_nn+0x188>)
 8007d36:	9303      	str	r3, [sp, #12]
 8007d38:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <run_nn+0x18c>)
 8007d3a:	9302      	str	r3, [sp, #8]
 8007d3c:	2307      	movs	r3, #7
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	2305      	movs	r3, #5
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	230a      	movs	r3, #10
 8007d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d4a:	490f      	ldr	r1, [pc, #60]	; (8007d88 <run_nn+0x190>)
 8007d4c:	6838      	ldr	r0, [r7, #0]
 8007d4e:	f7fa fc60 	bl	8002612 <arm_fully_connected_q7_opt>
}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20009b94 	.word	0x20009b94
 8007d60:	20008260 	.word	0x20008260
 8007d64:	20000968 	.word	0x20000968
 8007d68:	20000008 	.word	0x20000008
 8007d6c:	20008f94 	.word	0x20008f94
 8007d70:	20003b88 	.word	0x20003b88
 8007d74:	20000988 	.word	0x20000988
 8007d78:	20006d98 	.word	0x20006d98
 8007d7c:	20003b98 	.word	0x20003b98
 8007d80:	2002026c 	.word	0x2002026c
 8007d84:	200081b8 	.word	0x200081b8
 8007d88:	20006db8 	.word	0x20006db8

08007d8c <HAL_DCMI_FrameEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	captured = 1;
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <HAL_DCMI_FrameEventCallback+0x1c>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]
	HAL_DCMI_Stop(hdcmi);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fb ffbe 	bl	8003d1c <HAL_DCMI_Stop>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20008248 	.word	0x20008248

08007dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08a      	sub	sp, #40	; 0x28
 8007db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Hello, world!\n");
 8007db2:	4826      	ldr	r0, [pc, #152]	; (8007e4c <main+0xa0>)
 8007db4:	f000 ffbc 	bl	8008d30 <puts>
	memset(data, 0, sizeof(data)/sizeof(uint16_t));
 8007db8:	f44f 42c6 	mov.w	r2, #25344	; 0x6300
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4824      	ldr	r0, [pc, #144]	; (8007e50 <main+0xa4>)
 8007dc0:	f000 ff52 	bl	8008c68 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007dc4:	f7fb fd66 	bl	8003894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dc8:	f000 f852 	bl	8007e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dcc:	f000 f9f6 	bl	80081bc <MX_GPIO_Init>
  MX_DMA_Init();
 8007dd0:	f000 f98c 	bl	80080ec <MX_DMA_Init>
  MX_DCMI_Init();
 8007dd4:	f000 f8c2 	bl	8007f5c <MX_DCMI_Init>
  MX_FMC_Init();
 8007dd8:	f000 f9a8 	bl	800812c <MX_FMC_Init>
  MX_I2C1_Init();
 8007ddc:	f000 f8e6 	bl	8007fac <MX_I2C1_Init>
  MX_SPI1_Init();
 8007de0:	f000 f924 	bl	800802c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8007de4:	f000 f958 	bl	8008098 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  OV7670_init(&hi2c1);
 8007de8:	481a      	ldr	r0, [pc, #104]	; (8007e54 <main+0xa8>)
 8007dea:	f000 fa99 	bl	8008320 <OV7670_init>
  a = 5;
 8007dee:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <main+0xac>)
 8007df0:	2205      	movs	r2, #5
 8007df2:	601a      	str	r2, [r3, #0]
  run_nn();
 8007df4:	f7ff ff00 	bl	8007bf8 <run_nn>
  a = 1;
 8007df8:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <main+0xac>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]
  float floater_data[10];
  arm_q7_to_float(output_data, floater_data, 10);
 8007dfe:	463b      	mov	r3, r7
 8007e00:	220a      	movs	r2, #10
 8007e02:	4619      	mov	r1, r3
 8007e04:	4815      	ldr	r0, [pc, #84]	; (8007e5c <main+0xb0>)
 8007e06:	f7f8 fb79 	bl	80004fc <arm_q7_to_float>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// PA0 is the blue push button
  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	4814      	ldr	r0, [pc, #80]	; (8007e60 <main+0xb4>)
 8007e0e:	f7fe f9bd 	bl	800618c <HAL_GPIO_ReadPin>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d112      	bne.n	8007e3e <main+0x92>
  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e1e:	4811      	ldr	r0, [pc, #68]	; (8007e64 <main+0xb8>)
 8007e20:	f7fe f9cc 	bl	80061bc <HAL_GPIO_WritePin>
  		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t) &data, sizeof(data)/4);
 8007e24:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <main+0xa4>)
 8007e26:	f44f 5346 	mov.w	r3, #12672	; 0x3180
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	480e      	ldr	r0, [pc, #56]	; (8007e68 <main+0xbc>)
 8007e2e:	f7fb fed5 	bl	8003bdc <HAL_DCMI_Start_DMA>
			while(!captured);
 8007e32:	bf00      	nop
 8007e34:	4b0d      	ldr	r3, [pc, #52]	; (8007e6c <main+0xc0>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0fb      	beq.n	8007e34 <main+0x88>
 8007e3c:	e7e5      	b.n	8007e0a <main+0x5e>
//					HAL_UART_Transmit(&huart1, &buffer[j], 1, 1000);
//				}
//			}

  	} else {
  		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007e44:	4807      	ldr	r0, [pc, #28]	; (8007e64 <main+0xb8>)
 8007e46:	f7fe f9b9 	bl	80061bc <HAL_GPIO_WritePin>
  	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8007e4a:	e7de      	b.n	8007e0a <main+0x5e>
 8007e4c:	0800956c 	.word	0x0800956c
 8007e50:	20013c14 	.word	0x20013c14
 8007e54:	20008ee0 	.word	0x20008ee0
 8007e58:	20020278 	.word	0x20020278
 8007e5c:	2002026c 	.word	0x2002026c
 8007e60:	40020000 	.word	0x40020000
 8007e64:	40021800 	.word	0x40021800
 8007e68:	20013b94 	.word	0x20013b94
 8007e6c:	20008248 	.word	0x20008248

08007e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b094      	sub	sp, #80	; 0x50
 8007e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e76:	f107 0320 	add.w	r3, r7, #32
 8007e7a:	2230      	movs	r2, #48	; 0x30
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fef2 	bl	8008c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e84:	f107 030c 	add.w	r3, r7, #12
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	609a      	str	r2, [r3, #8]
 8007e90:	60da      	str	r2, [r3, #12]
 8007e92:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e94:	2300      	movs	r3, #0
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	4a2e      	ldr	r2, [pc, #184]	; (8007f54 <SystemClock_Config+0xe4>)
 8007e9a:	4b2e      	ldr	r3, [pc, #184]	; (8007f54 <SystemClock_Config+0xe4>)
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8007ea4:	4b2b      	ldr	r3, [pc, #172]	; (8007f54 <SystemClock_Config+0xe4>)
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eac:	60bb      	str	r3, [r7, #8]
 8007eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	607b      	str	r3, [r7, #4]
 8007eb4:	4a28      	ldr	r2, [pc, #160]	; (8007f58 <SystemClock_Config+0xe8>)
 8007eb6:	4b28      	ldr	r3, [pc, #160]	; (8007f58 <SystemClock_Config+0xe8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <SystemClock_Config+0xe8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ec8:	607b      	str	r3, [r7, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007edc:	2300      	movs	r3, #0
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007ee4:	23b4      	movs	r3, #180	; 0xb4
 8007ee6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007eec:	2304      	movs	r3, #4
 8007eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007ef0:	f107 0320 	add.w	r3, r7, #32
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fe17 	bl	8006b28 <HAL_RCC_OscConfig>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007f00:	f000 fa06 	bl	8008310 <Error_Handler>
  }
  /**Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007f04:	f7fe fdc0 	bl	8006a88 <HAL_PWREx_EnableOverDrive>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007f0e:	f000 f9ff 	bl	8008310 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007f12:	230f      	movs	r3, #15
 8007f14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007f16:	2302      	movs	r3, #2
 8007f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007f1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007f22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007f2a:	f107 030c 	add.w	r3, r7, #12
 8007f2e:	2105      	movs	r1, #5
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff f83b 	bl	8006fac <HAL_RCC_ClockConfig>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007f3c:	f000 f9e8 	bl	8008310 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8007f40:	2200      	movs	r2, #0
 8007f42:	2100      	movs	r1, #0
 8007f44:	2000      	movs	r0, #0
 8007f46:	f7ff f913 	bl	8007170 <HAL_RCC_MCOConfig>
}
 8007f4a:	bf00      	nop
 8007f4c:	3750      	adds	r7, #80	; 0x50
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800
 8007f58:	40007000 	.word	0x40007000

08007f5c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8007f60:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f62:	4a11      	ldr	r2, [pc, #68]	; (8007fa8 <MX_DCMI_Init+0x4c>)
 8007f64:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f6e:	2220      	movs	r2, #32
 8007f70:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f74:	2280      	movs	r2, #128	; 0x80
 8007f76:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8007f8a:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8007f90:	4804      	ldr	r0, [pc, #16]	; (8007fa4 <MX_DCMI_Init+0x48>)
 8007f92:	f7fc f867 	bl	8004064 <HAL_DCMI_Init>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8007f9c:	f000 f9b8 	bl	8008310 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8007fa0:	bf00      	nop
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20013b94 	.word	0x20013b94
 8007fa8:	50050000 	.word	0x50050000

08007fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fb2:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <MX_I2C1_Init+0x78>)
 8007fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <MX_I2C1_Init+0x7c>)
 8007fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007fbc:	4b18      	ldr	r3, [pc, #96]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007fc2:	4b17      	ldr	r3, [pc, #92]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007fc8:	4b15      	ldr	r3, [pc, #84]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007fd0:	4b13      	ldr	r3, [pc, #76]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007fe8:	480d      	ldr	r0, [pc, #52]	; (8008020 <MX_I2C1_Init+0x74>)
 8007fea:	f7fe f901 	bl	80061f0 <HAL_I2C_Init>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007ff4:	f000 f98c 	bl	8008310 <Error_Handler>
  }
  /**Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	4809      	ldr	r0, [pc, #36]	; (8008020 <MX_I2C1_Init+0x74>)
 8007ffc:	f7fe fcc9 	bl	8006992 <HAL_I2CEx_ConfigAnalogFilter>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8008006:	f000 f983 	bl	8008310 <Error_Handler>
  }
  /**Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800800a:	2100      	movs	r1, #0
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <MX_I2C1_Init+0x74>)
 800800e:	f7fe fcfc 	bl	8006a0a <HAL_I2CEx_ConfigDigitalFilter>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8008018:	f000 f97a 	bl	8008310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800801c:	bf00      	nop
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20008ee0 	.word	0x20008ee0
 8008024:	40005400 	.word	0x40005400
 8008028:	000186a0 	.word	0x000186a0

0800802c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008030:	4b17      	ldr	r3, [pc, #92]	; (8008090 <MX_SPI1_Init+0x64>)
 8008032:	4a18      	ldr	r2, [pc, #96]	; (8008094 <MX_SPI1_Init+0x68>)
 8008034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8008036:	4b16      	ldr	r3, [pc, #88]	; (8008090 <MX_SPI1_Init+0x64>)
 8008038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800803c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800803e:	4b14      	ldr	r3, [pc, #80]	; (8008090 <MX_SPI1_Init+0x64>)
 8008040:	2200      	movs	r2, #0
 8008042:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008044:	4b12      	ldr	r3, [pc, #72]	; (8008090 <MX_SPI1_Init+0x64>)
 8008046:	2200      	movs	r2, #0
 8008048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800804a:	4b11      	ldr	r3, [pc, #68]	; (8008090 <MX_SPI1_Init+0x64>)
 800804c:	2200      	movs	r2, #0
 800804e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008050:	4b0f      	ldr	r3, [pc, #60]	; (8008090 <MX_SPI1_Init+0x64>)
 8008052:	2200      	movs	r2, #0
 8008054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008056:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <MX_SPI1_Init+0x64>)
 8008058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800805c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800805e:	4b0c      	ldr	r3, [pc, #48]	; (8008090 <MX_SPI1_Init+0x64>)
 8008060:	2200      	movs	r2, #0
 8008062:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <MX_SPI1_Init+0x64>)
 8008066:	2200      	movs	r2, #0
 8008068:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <MX_SPI1_Init+0x64>)
 800806c:	2200      	movs	r2, #0
 800806e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <MX_SPI1_Init+0x64>)
 8008072:	2200      	movs	r2, #0
 8008074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <MX_SPI1_Init+0x64>)
 8008078:	220a      	movs	r2, #10
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800807c:	4804      	ldr	r0, [pc, #16]	; (8008090 <MX_SPI1_Init+0x64>)
 800807e:	f7ff f9fd 	bl	800747c <HAL_SPI_Init>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8008088:	f000 f942 	bl	8008310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800808c:	bf00      	nop
 800808e:	bd80      	pop	{r7, pc}
 8008090:	20020214 	.word	0x20020214
 8008094:	40013000 	.word	0x40013000

08008098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 800809e:	4a12      	ldr	r2, [pc, #72]	; (80080e8 <MX_USART1_UART_Init+0x50>)
 80080a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80080a2:	4b10      	ldr	r3, [pc, #64]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80080a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80080b0:	4b0c      	ldr	r3, [pc, #48]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080be:	220c      	movs	r2, #12
 80080c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80080c2:	4b08      	ldr	r3, [pc, #32]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80080c8:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80080ce:	4805      	ldr	r0, [pc, #20]	; (80080e4 <MX_USART1_UART_Init+0x4c>)
 80080d0:	f7ff fa37 	bl	8007542 <HAL_UART_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80080da:	f000 f919 	bl	8008310 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80080de:	bf00      	nop
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20013bd4 	.word	0x20013bd4
 80080e8:	40011000 	.word	0x40011000

080080ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80080f2:	2300      	movs	r3, #0
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	4a0c      	ldr	r2, [pc, #48]	; (8008128 <MX_DMA_Init+0x3c>)
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <MX_DMA_Init+0x3c>)
 80080fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008100:	6313      	str	r3, [r2, #48]	; 0x30
 8008102:	4b09      	ldr	r3, [pc, #36]	; (8008128 <MX_DMA_Init+0x3c>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	2039      	movs	r0, #57	; 0x39
 8008114:	f7fb fd2b 	bl	8003b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008118:	2039      	movs	r0, #57	; 0x39
 800811a:	f7fb fd44 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	40023800 	.word	0x40023800

0800812c <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8008132:	4b20      	ldr	r3, [pc, #128]	; (80081b4 <MX_FMC_Init+0x88>)
 8008134:	4a20      	ldr	r2, [pc, #128]	; (80081b8 <MX_FMC_Init+0x8c>)
 8008136:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8008138:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <MX_FMC_Init+0x88>)
 800813a:	2201      	movs	r2, #1
 800813c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800813e:	4b1d      	ldr	r3, [pc, #116]	; (80081b4 <MX_FMC_Init+0x88>)
 8008140:	2200      	movs	r2, #0
 8008142:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8008144:	4b1b      	ldr	r3, [pc, #108]	; (80081b4 <MX_FMC_Init+0x88>)
 8008146:	2204      	movs	r2, #4
 8008148:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800814a:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <MX_FMC_Init+0x88>)
 800814c:	2210      	movs	r2, #16
 800814e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008150:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <MX_FMC_Init+0x88>)
 8008152:	2240      	movs	r2, #64	; 0x40
 8008154:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8008156:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <MX_FMC_Init+0x88>)
 8008158:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800815c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800815e:	4b15      	ldr	r3, [pc, #84]	; (80081b4 <MX_FMC_Init+0x88>)
 8008160:	2200      	movs	r2, #0
 8008162:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8008164:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <MX_FMC_Init+0x88>)
 8008166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800816a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800816c:	4b11      	ldr	r3, [pc, #68]	; (80081b4 <MX_FMC_Init+0x88>)
 800816e:	2200      	movs	r2, #0
 8008170:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8008172:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <MX_FMC_Init+0x88>)
 8008174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008178:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800817a:	2302      	movs	r3, #2
 800817c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800817e:	2307      	movs	r3, #7
 8008180:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8008182:	2304      	movs	r3, #4
 8008184:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8008186:	2307      	movs	r3, #7
 8008188:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800818a:	2303      	movs	r3, #3
 800818c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800818e:	2302      	movs	r3, #2
 8008190:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8008192:	2302      	movs	r3, #2
 8008194:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4806      	ldr	r0, [pc, #24]	; (80081b4 <MX_FMC_Init+0x88>)
 800819c:	f7ff f93a 	bl	8007414 <HAL_SDRAM_Init>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 80081a6:	f000 f8b3 	bl	8008310 <Error_Handler>
  }

}
 80081aa:	bf00      	nop
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	2002027c 	.word	0x2002027c
 80081b8:	a0000140 	.word	0xa0000140

080081bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	; 0x30
 80081c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c2:	f107 031c 	add.w	r3, r7, #28
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
 80081ca:	605a      	str	r2, [r3, #4]
 80081cc:	609a      	str	r2, [r3, #8]
 80081ce:	60da      	str	r2, [r3, #12]
 80081d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80081d2:	2300      	movs	r3, #0
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	4a4b      	ldr	r2, [pc, #300]	; (8008304 <MX_GPIO_Init+0x148>)
 80081d8:	4b4a      	ldr	r3, [pc, #296]	; (8008304 <MX_GPIO_Init+0x148>)
 80081da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081dc:	f043 0310 	orr.w	r3, r3, #16
 80081e0:	6313      	str	r3, [r2, #48]	; 0x30
 80081e2:	4b48      	ldr	r3, [pc, #288]	; (8008304 <MX_GPIO_Init+0x148>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	4a44      	ldr	r2, [pc, #272]	; (8008304 <MX_GPIO_Init+0x148>)
 80081f4:	4b43      	ldr	r3, [pc, #268]	; (8008304 <MX_GPIO_Init+0x148>)
 80081f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f8:	f043 0320 	orr.w	r3, r3, #32
 80081fc:	6313      	str	r3, [r2, #48]	; 0x30
 80081fe:	4b41      	ldr	r3, [pc, #260]	; (8008304 <MX_GPIO_Init+0x148>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	4a3d      	ldr	r2, [pc, #244]	; (8008304 <MX_GPIO_Init+0x148>)
 8008210:	4b3c      	ldr	r3, [pc, #240]	; (8008304 <MX_GPIO_Init+0x148>)
 8008212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008214:	f043 0304 	orr.w	r3, r3, #4
 8008218:	6313      	str	r3, [r2, #48]	; 0x30
 800821a:	4b3a      	ldr	r3, [pc, #232]	; (8008304 <MX_GPIO_Init+0x148>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	f003 0304 	and.w	r3, r3, #4
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	4a36      	ldr	r2, [pc, #216]	; (8008304 <MX_GPIO_Init+0x148>)
 800822c:	4b35      	ldr	r3, [pc, #212]	; (8008304 <MX_GPIO_Init+0x148>)
 800822e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008230:	f043 0301 	orr.w	r3, r3, #1
 8008234:	6313      	str	r3, [r2, #48]	; 0x30
 8008236:	4b33      	ldr	r3, [pc, #204]	; (8008304 <MX_GPIO_Init+0x148>)
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	60fb      	str	r3, [r7, #12]
 8008240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008242:	2300      	movs	r3, #0
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	4a2f      	ldr	r2, [pc, #188]	; (8008304 <MX_GPIO_Init+0x148>)
 8008248:	4b2e      	ldr	r3, [pc, #184]	; (8008304 <MX_GPIO_Init+0x148>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008250:	6313      	str	r3, [r2, #48]	; 0x30
 8008252:	4b2c      	ldr	r3, [pc, #176]	; (8008304 <MX_GPIO_Init+0x148>)
 8008254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825a:	60bb      	str	r3, [r7, #8]
 800825c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
 8008262:	4a28      	ldr	r2, [pc, #160]	; (8008304 <MX_GPIO_Init+0x148>)
 8008264:	4b27      	ldr	r3, [pc, #156]	; (8008304 <MX_GPIO_Init+0x148>)
 8008266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	6313      	str	r3, [r2, #48]	; 0x30
 800826e:	4b25      	ldr	r3, [pc, #148]	; (8008304 <MX_GPIO_Init+0x148>)
 8008270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008272:	f003 0308 	and.w	r3, r3, #8
 8008276:	607b      	str	r3, [r7, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800827a:	2300      	movs	r3, #0
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	4a21      	ldr	r2, [pc, #132]	; (8008304 <MX_GPIO_Init+0x148>)
 8008280:	4b20      	ldr	r3, [pc, #128]	; (8008304 <MX_GPIO_Init+0x148>)
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	f043 0302 	orr.w	r3, r3, #2
 8008288:	6313      	str	r3, [r2, #48]	; 0x30
 800828a:	4b1e      	ldr	r3, [pc, #120]	; (8008304 <MX_GPIO_Init+0x148>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8008296:	2200      	movs	r2, #0
 8008298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800829c:	481a      	ldr	r0, [pc, #104]	; (8008308 <MX_GPIO_Init+0x14c>)
 800829e:	f7fd ff8d 	bl	80061bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 80082a2:	2301      	movs	r3, #1
 80082a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082a6:	2300      	movs	r3, #0
 80082a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80082aa:	2302      	movs	r3, #2
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80082ae:	f107 031c 	add.w	r3, r7, #28
 80082b2:	4619      	mov	r1, r3
 80082b4:	4815      	ldr	r0, [pc, #84]	; (800830c <MX_GPIO_Init+0x150>)
 80082b6:	f7fd fdbf 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80082ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082c0:	2302      	movs	r3, #2
 80082c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082c8:	2300      	movs	r3, #0
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80082cc:	2300      	movs	r3, #0
 80082ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082d0:	f107 031c 	add.w	r3, r7, #28
 80082d4:	4619      	mov	r1, r3
 80082d6:	480d      	ldr	r0, [pc, #52]	; (800830c <MX_GPIO_Init+0x150>)
 80082d8:	f7fd fdae 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80082dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082e2:	2301      	movs	r3, #1
 80082e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082ea:	2300      	movs	r3, #0
 80082ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80082ee:	f107 031c 	add.w	r3, r7, #28
 80082f2:	4619      	mov	r1, r3
 80082f4:	4804      	ldr	r0, [pc, #16]	; (8008308 <MX_GPIO_Init+0x14c>)
 80082f6:	f7fd fd9f 	bl	8005e38 <HAL_GPIO_Init>

}
 80082fa:	bf00      	nop
 80082fc:	3730      	adds	r7, #48	; 0x30
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	40023800 	.word	0x40023800
 8008308:	40021800 	.word	0x40021800
 800830c:	40020000 	.word	0x40020000

08008310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008314:	bf00      	nop
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <OV7670_init>:
		{ 0xb1, 0x0c }, //
		{ 0xb2, 0x0e }, //
		{ 0xb3, 0x82 }, //
		{ 0x4b, 0x01 }, };

void OV7670_init(I2C_HandleTypeDef* p_hi2c1){
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af02      	add	r7, sp, #8
 8008326:	6078      	str	r0, [r7, #4]
	// reset to default values first
	uint8_t data[2];
	data[0] = OV7670_reg[0][0];
 8008328:	2312      	movs	r3, #18
 800832a:	743b      	strb	r3, [r7, #16]
	data[1] = OV7670_reg[0][1];
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(p_hi2c1, DevAddress<<1, &data, 2, 1000);
 8008330:	4b1a      	ldr	r3, [pc, #104]	; (800839c <OV7670_init+0x7c>)
 8008332:	881b      	ldrh	r3, [r3, #0]
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	b299      	uxth	r1, r3
 8008338:	f107 0210 	add.w	r2, r7, #16
 800833c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	2302      	movs	r3, #2
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7fe f833 	bl	80063b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800834a:	2002      	movs	r0, #2
 800834c:	f7fb fb14 	bl	8003978 <HAL_Delay>

	// write all the settings to OV7670
	for (int i = 1; i < OV7670_REG_NUM; i++){
 8008350:	2301      	movs	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e01a      	b.n	800838c <OV7670_init+0x6c>
		uint8_t data[2];
		data[0] = OV7670_reg[i][0];
 8008356:	4a12      	ldr	r2, [pc, #72]	; (80083a0 <OV7670_init+0x80>)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800835e:	733b      	strb	r3, [r7, #12]
		data[1] = OV7670_reg[i][1];
 8008360:	4a0f      	ldr	r2, [pc, #60]	; (80083a0 <OV7670_init+0x80>)
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(p_hi2c1, DevAddress<<1, &data, 2, 1000);
 800836c:	4b0b      	ldr	r3, [pc, #44]	; (800839c <OV7670_init+0x7c>)
 800836e:	881b      	ldrh	r3, [r3, #0]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	b299      	uxth	r1, r3
 8008374:	f107 020c 	add.w	r2, r7, #12
 8008378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2302      	movs	r3, #2
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f7fe f815 	bl	80063b0 <HAL_I2C_Master_Transmit>
	for (int i = 1; i < OV7670_REG_NUM; i++){
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	3301      	adds	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b7a      	cmp	r3, #122	; 0x7a
 8008390:	dde1      	ble.n	8008356 <OV7670_init+0x36>
	}
}
 8008392:	bf00      	nop
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	200081c2 	.word	0x200081c2
 80083a0:	08009584 	.word	0x08009584

080083a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]
 80083ae:	4a10      	ldr	r2, [pc, #64]	; (80083f0 <HAL_MspInit+0x4c>)
 80083b0:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <HAL_MspInit+0x4c>)
 80083b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b8:	6453      	str	r3, [r2, #68]	; 0x44
 80083ba:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <HAL_MspInit+0x4c>)
 80083bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c2:	607b      	str	r3, [r7, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80083c6:	2300      	movs	r3, #0
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4a09      	ldr	r2, [pc, #36]	; (80083f0 <HAL_MspInit+0x4c>)
 80083cc:	4b08      	ldr	r3, [pc, #32]	; (80083f0 <HAL_MspInit+0x4c>)
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d4:	6413      	str	r3, [r2, #64]	; 0x40
 80083d6:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <HAL_MspInit+0x4c>)
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40023800 	.word	0x40023800

080083f4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08e      	sub	sp, #56	; 0x38
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	60da      	str	r2, [r3, #12]
 800840a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a72      	ldr	r2, [pc, #456]	; (80085dc <HAL_DCMI_MspInit+0x1e8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	f040 80de 	bne.w	80085d4 <HAL_DCMI_MspInit+0x1e0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8008418:	2300      	movs	r3, #0
 800841a:	623b      	str	r3, [r7, #32]
 800841c:	4a70      	ldr	r2, [pc, #448]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800841e:	4b70      	ldr	r3, [pc, #448]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	6353      	str	r3, [r2, #52]	; 0x34
 8008428:	4b6d      	ldr	r3, [pc, #436]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800842a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	623b      	str	r3, [r7, #32]
 8008432:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008434:	2300      	movs	r3, #0
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	4a69      	ldr	r2, [pc, #420]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800843a:	4b69      	ldr	r3, [pc, #420]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800843c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843e:	f043 0310 	orr.w	r3, r3, #16
 8008442:	6313      	str	r3, [r2, #48]	; 0x30
 8008444:	4b66      	ldr	r3, [pc, #408]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	61fb      	str	r3, [r7, #28]
 800844e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008450:	2300      	movs	r3, #0
 8008452:	61bb      	str	r3, [r7, #24]
 8008454:	4a62      	ldr	r2, [pc, #392]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008456:	4b62      	ldr	r3, [pc, #392]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	6313      	str	r3, [r2, #48]	; 0x30
 8008460:	4b5f      	ldr	r3, [pc, #380]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	61bb      	str	r3, [r7, #24]
 800846a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800846c:	2300      	movs	r3, #0
 800846e:	617b      	str	r3, [r7, #20]
 8008470:	4a5b      	ldr	r2, [pc, #364]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008472:	4b5b      	ldr	r3, [pc, #364]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	f043 0304 	orr.w	r3, r3, #4
 800847a:	6313      	str	r3, [r2, #48]	; 0x30
 800847c:	4b58      	ldr	r3, [pc, #352]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008488:	2300      	movs	r3, #0
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	4a54      	ldr	r2, [pc, #336]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800848e:	4b54      	ldr	r3, [pc, #336]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f043 0308 	orr.w	r3, r3, #8
 8008496:	6313      	str	r3, [r2, #48]	; 0x30
 8008498:	4b51      	ldr	r3, [pc, #324]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	613b      	str	r3, [r7, #16]
 80084a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	4a4d      	ldr	r2, [pc, #308]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 80084aa:	4b4d      	ldr	r3, [pc, #308]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b2:	6313      	str	r3, [r2, #48]	; 0x30
 80084b4:	4b4a      	ldr	r3, [pc, #296]	; (80085e0 <HAL_DCMI_MspInit+0x1ec>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PG9     ------> DCMI_VSYNC 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80084c0:	2370      	movs	r3, #112	; 0x70
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c4:	2302      	movs	r3, #2
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084cc:	2300      	movs	r3, #0
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80084d0:	230d      	movs	r3, #13
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d8:	4619      	mov	r1, r3
 80084da:	4842      	ldr	r0, [pc, #264]	; (80085e4 <HAL_DCMI_MspInit+0x1f0>)
 80084dc:	f7fd fcac 	bl	8005e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80084e0:	2350      	movs	r3, #80	; 0x50
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e4:	2302      	movs	r3, #2
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ec:	2300      	movs	r3, #0
 80084ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80084f0:	230d      	movs	r3, #13
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f8:	4619      	mov	r1, r3
 80084fa:	483b      	ldr	r0, [pc, #236]	; (80085e8 <HAL_DCMI_MspInit+0x1f4>)
 80084fc:	f7fd fc9c 	bl	8005e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008500:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008506:	2302      	movs	r3, #2
 8008508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800850a:	2300      	movs	r3, #0
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800850e:	2300      	movs	r3, #0
 8008510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008512:	230d      	movs	r3, #13
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800851a:	4619      	mov	r1, r3
 800851c:	4833      	ldr	r0, [pc, #204]	; (80085ec <HAL_DCMI_MspInit+0x1f8>)
 800851e:	f7fd fc8b 	bl	8005e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008522:	2308      	movs	r3, #8
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008526:	2302      	movs	r3, #2
 8008528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852a:	2300      	movs	r3, #0
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800852e:	2300      	movs	r3, #0
 8008530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008532:	230d      	movs	r3, #13
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800853a:	4619      	mov	r1, r3
 800853c:	482c      	ldr	r0, [pc, #176]	; (80085f0 <HAL_DCMI_MspInit+0x1fc>)
 800853e:	f7fd fc7b 	bl	8005e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008548:	2302      	movs	r3, #2
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008550:	2300      	movs	r3, #0
 8008552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008554:	230d      	movs	r3, #13
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800855c:	4619      	mov	r1, r3
 800855e:	4825      	ldr	r0, [pc, #148]	; (80085f4 <HAL_DCMI_MspInit+0x200>)
 8008560:	f7fd fc6a 	bl	8005e38 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 8008566:	4a25      	ldr	r2, [pc, #148]	; (80085fc <HAL_DCMI_MspInit+0x208>)
 8008568:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800856a:	4b23      	ldr	r3, [pc, #140]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 800856c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008570:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008572:	4b21      	ldr	r3, [pc, #132]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 8008574:	2200      	movs	r2, #0
 8008576:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8008578:	4b1f      	ldr	r3, [pc, #124]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 800857a:	2200      	movs	r2, #0
 800857c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800857e:	4b1e      	ldr	r3, [pc, #120]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 8008580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008584:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008586:	4b1c      	ldr	r3, [pc, #112]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 8008588:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800858c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800858e:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 8008590:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008594:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8008596:	4b18      	ldr	r3, [pc, #96]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 8008598:	2200      	movs	r2, #0
 800859a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800859c:	4b16      	ldr	r3, [pc, #88]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 800859e:	2200      	movs	r2, #0
 80085a0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085a2:	4b15      	ldr	r3, [pc, #84]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80085a8:	4813      	ldr	r0, [pc, #76]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 80085aa:	f7fb fdc1 	bl	8004130 <HAL_DMA_Init>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_DCMI_MspInit+0x1c4>
    {
      Error_Handler();
 80085b4:	f7ff feac 	bl	8008310 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a0f      	ldr	r2, [pc, #60]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
 80085be:	4a0e      	ldr	r2, [pc, #56]	; (80085f8 <HAL_DCMI_MspInit+0x204>)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80085c4:	2200      	movs	r2, #0
 80085c6:	2100      	movs	r1, #0
 80085c8:	204e      	movs	r0, #78	; 0x4e
 80085ca:	f7fb fad0 	bl	8003b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80085ce:	204e      	movs	r0, #78	; 0x4e
 80085d0:	f7fb fae9 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80085d4:	bf00      	nop
 80085d6:	3738      	adds	r7, #56	; 0x38
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	50050000 	.word	0x50050000
 80085e0:	40023800 	.word	0x40023800
 80085e4:	40021000 	.word	0x40021000
 80085e8:	40020000 	.word	0x40020000
 80085ec:	40020800 	.word	0x40020800
 80085f0:	40020c00 	.word	0x40020c00
 80085f4:	40021800 	.word	0x40021800
 80085f8:	20008f34 	.word	0x20008f34
 80085fc:	40026428 	.word	0x40026428

08008600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	; 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008608:	f107 0314 	add.w	r3, r7, #20
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	605a      	str	r2, [r3, #4]
 8008612:	609a      	str	r2, [r3, #8]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a19      	ldr	r2, [pc, #100]	; (8008684 <HAL_I2C_MspInit+0x84>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d12c      	bne.n	800867c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008622:	2300      	movs	r3, #0
 8008624:	613b      	str	r3, [r7, #16]
 8008626:	4a18      	ldr	r2, [pc, #96]	; (8008688 <HAL_I2C_MspInit+0x88>)
 8008628:	4b17      	ldr	r3, [pc, #92]	; (8008688 <HAL_I2C_MspInit+0x88>)
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f043 0302 	orr.w	r3, r3, #2
 8008630:	6313      	str	r3, [r2, #48]	; 0x30
 8008632:	4b15      	ldr	r3, [pc, #84]	; (8008688 <HAL_I2C_MspInit+0x88>)
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800863e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008644:	2312      	movs	r3, #18
 8008646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008648:	2301      	movs	r3, #1
 800864a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800864c:	2303      	movs	r3, #3
 800864e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008650:	2304      	movs	r3, #4
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	4619      	mov	r1, r3
 800865a:	480c      	ldr	r0, [pc, #48]	; (800868c <HAL_I2C_MspInit+0x8c>)
 800865c:	f7fd fbec 	bl	8005e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	4a08      	ldr	r2, [pc, #32]	; (8008688 <HAL_I2C_MspInit+0x88>)
 8008666:	4b08      	ldr	r3, [pc, #32]	; (8008688 <HAL_I2C_MspInit+0x88>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800866e:	6413      	str	r3, [r2, #64]	; 0x40
 8008670:	4b05      	ldr	r3, [pc, #20]	; (8008688 <HAL_I2C_MspInit+0x88>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800867c:	bf00      	nop
 800867e:	3728      	adds	r7, #40	; 0x28
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40005400 	.word	0x40005400
 8008688:	40023800 	.word	0x40023800
 800868c:	40020400 	.word	0x40020400

08008690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b08a      	sub	sp, #40	; 0x28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	609a      	str	r2, [r3, #8]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a28      	ldr	r2, [pc, #160]	; (8008750 <HAL_SPI_MspInit+0xc0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d149      	bne.n	8008746 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80086b2:	2300      	movs	r3, #0
 80086b4:	613b      	str	r3, [r7, #16]
 80086b6:	4a27      	ldr	r2, [pc, #156]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086b8:	4b26      	ldr	r3, [pc, #152]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086c0:	6453      	str	r3, [r2, #68]	; 0x44
 80086c2:	4b24      	ldr	r3, [pc, #144]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086ca:	613b      	str	r3, [r7, #16]
 80086cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	4a20      	ldr	r2, [pc, #128]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086d4:	4b1f      	ldr	r3, [pc, #124]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d8:	f043 0301 	orr.w	r3, r3, #1
 80086dc:	6313      	str	r3, [r2, #48]	; 0x30
 80086de:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80086ea:	2300      	movs	r3, #0
 80086ec:	60bb      	str	r3, [r7, #8]
 80086ee:	4a19      	ldr	r2, [pc, #100]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086f0:	4b18      	ldr	r3, [pc, #96]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	6313      	str	r3, [r2, #48]	; 0x30
 80086fa:	4b16      	ldr	r3, [pc, #88]	; (8008754 <HAL_SPI_MspInit+0xc4>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8008706:	23a0      	movs	r3, #160	; 0xa0
 8008708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800870a:	2302      	movs	r3, #2
 800870c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800870e:	2300      	movs	r3, #0
 8008710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008712:	2303      	movs	r3, #3
 8008714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008716:	2305      	movs	r3, #5
 8008718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800871a:	f107 0314 	add.w	r3, r7, #20
 800871e:	4619      	mov	r1, r3
 8008720:	480d      	ldr	r0, [pc, #52]	; (8008758 <HAL_SPI_MspInit+0xc8>)
 8008722:	f7fd fb89 	bl	8005e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008726:	2310      	movs	r3, #16
 8008728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872a:	2302      	movs	r3, #2
 800872c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008732:	2303      	movs	r3, #3
 8008734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008736:	2305      	movs	r3, #5
 8008738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800873a:	f107 0314 	add.w	r3, r7, #20
 800873e:	4619      	mov	r1, r3
 8008740:	4806      	ldr	r0, [pc, #24]	; (800875c <HAL_SPI_MspInit+0xcc>)
 8008742:	f7fd fb79 	bl	8005e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008746:	bf00      	nop
 8008748:	3728      	adds	r7, #40	; 0x28
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40013000 	.word	0x40013000
 8008754:	40023800 	.word	0x40023800
 8008758:	40020000 	.word	0x40020000
 800875c:	40020400 	.word	0x40020400

08008760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08a      	sub	sp, #40	; 0x28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008768:	f107 0314 	add.w	r3, r7, #20
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	605a      	str	r2, [r3, #4]
 8008772:	609a      	str	r2, [r3, #8]
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a19      	ldr	r2, [pc, #100]	; (80087e4 <HAL_UART_MspInit+0x84>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d12c      	bne.n	80087dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	4a18      	ldr	r2, [pc, #96]	; (80087e8 <HAL_UART_MspInit+0x88>)
 8008788:	4b17      	ldr	r3, [pc, #92]	; (80087e8 <HAL_UART_MspInit+0x88>)
 800878a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878c:	f043 0310 	orr.w	r3, r3, #16
 8008790:	6453      	str	r3, [r2, #68]	; 0x44
 8008792:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <HAL_UART_MspInit+0x88>)
 8008794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008796:	f003 0310 	and.w	r3, r3, #16
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	4a11      	ldr	r2, [pc, #68]	; (80087e8 <HAL_UART_MspInit+0x88>)
 80087a4:	4b10      	ldr	r3, [pc, #64]	; (80087e8 <HAL_UART_MspInit+0x88>)
 80087a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a8:	f043 0301 	orr.w	r3, r3, #1
 80087ac:	6313      	str	r3, [r2, #48]	; 0x30
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <HAL_UART_MspInit+0x88>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	60fb      	str	r3, [r7, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80087ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80087be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c0:	2302      	movs	r3, #2
 80087c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087c4:	2301      	movs	r3, #1
 80087c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c8:	2303      	movs	r3, #3
 80087ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80087cc:	2307      	movs	r3, #7
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d0:	f107 0314 	add.w	r3, r7, #20
 80087d4:	4619      	mov	r1, r3
 80087d6:	4805      	ldr	r0, [pc, #20]	; (80087ec <HAL_UART_MspInit+0x8c>)
 80087d8:	f7fd fb2e 	bl	8005e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80087dc:	bf00      	nop
 80087de:	3728      	adds	r7, #40	; 0x28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	40011000 	.word	0x40011000
 80087e8:	40023800 	.word	0x40023800
 80087ec:	40020000 	.word	0x40020000

080087f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80087f6:	4b3c      	ldr	r3, [pc, #240]	; (80088e8 <HAL_FMC_MspInit+0xf8>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d16f      	bne.n	80088de <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80087fe:	4b3a      	ldr	r3, [pc, #232]	; (80088e8 <HAL_FMC_MspInit+0xf8>)
 8008800:	2201      	movs	r2, #1
 8008802:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008804:	2300      	movs	r3, #0
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	4a38      	ldr	r2, [pc, #224]	; (80088ec <HAL_FMC_MspInit+0xfc>)
 800880a:	4b38      	ldr	r3, [pc, #224]	; (80088ec <HAL_FMC_MspInit+0xfc>)
 800880c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880e:	f043 0301 	orr.w	r3, r3, #1
 8008812:	6393      	str	r3, [r2, #56]	; 0x38
 8008814:	4b35      	ldr	r3, [pc, #212]	; (80088ec <HAL_FMC_MspInit+0xfc>)
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8008820:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8008824:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008826:	2302      	movs	r3, #2
 8008828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800882a:	2300      	movs	r3, #0
 800882c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800882e:	2303      	movs	r3, #3
 8008830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008832:	230c      	movs	r3, #12
 8008834:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008836:	1d3b      	adds	r3, r7, #4
 8008838:	4619      	mov	r1, r3
 800883a:	482d      	ldr	r0, [pc, #180]	; (80088f0 <HAL_FMC_MspInit+0x100>)
 800883c:	f7fd fafc 	bl	8005e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008840:	2301      	movs	r3, #1
 8008842:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008844:	2302      	movs	r3, #2
 8008846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800884c:	2303      	movs	r3, #3
 800884e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008850:	230c      	movs	r3, #12
 8008852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008854:	1d3b      	adds	r3, r7, #4
 8008856:	4619      	mov	r1, r3
 8008858:	4826      	ldr	r0, [pc, #152]	; (80088f4 <HAL_FMC_MspInit+0x104>)
 800885a:	f7fd faed 	bl	8005e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 800885e:	f248 1333 	movw	r3, #33075	; 0x8133
 8008862:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008864:	2302      	movs	r3, #2
 8008866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800886c:	2303      	movs	r3, #3
 800886e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008870:	230c      	movs	r3, #12
 8008872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008874:	1d3b      	adds	r3, r7, #4
 8008876:	4619      	mov	r1, r3
 8008878:	481f      	ldr	r0, [pc, #124]	; (80088f8 <HAL_FMC_MspInit+0x108>)
 800887a:	f7fd fadd 	bl	8005e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800887e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008882:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008884:	2302      	movs	r3, #2
 8008886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008888:	2300      	movs	r3, #0
 800888a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800888c:	2303      	movs	r3, #3
 800888e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008890:	230c      	movs	r3, #12
 8008892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008894:	1d3b      	adds	r3, r7, #4
 8008896:	4619      	mov	r1, r3
 8008898:	4818      	ldr	r0, [pc, #96]	; (80088fc <HAL_FMC_MspInit+0x10c>)
 800889a:	f7fd facd 	bl	8005e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800889e:	f24c 7303 	movw	r3, #50947	; 0xc703
 80088a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a4:	2302      	movs	r3, #2
 80088a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ac:	2303      	movs	r3, #3
 80088ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80088b0:	230c      	movs	r3, #12
 80088b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088b4:	1d3b      	adds	r3, r7, #4
 80088b6:	4619      	mov	r1, r3
 80088b8:	4811      	ldr	r0, [pc, #68]	; (8008900 <HAL_FMC_MspInit+0x110>)
 80088ba:	f7fd fabd 	bl	8005e38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80088be:	2360      	movs	r3, #96	; 0x60
 80088c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c2:	2302      	movs	r3, #2
 80088c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ca:	2303      	movs	r3, #3
 80088cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80088ce:	230c      	movs	r3, #12
 80088d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088d2:	1d3b      	adds	r3, r7, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	480b      	ldr	r0, [pc, #44]	; (8008904 <HAL_FMC_MspInit+0x114>)
 80088d8:	f7fd faae 	bl	8005e38 <HAL_GPIO_Init>
 80088dc:	e000      	b.n	80088e0 <HAL_FMC_MspInit+0xf0>
    return;
 80088de:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	2000824c 	.word	0x2000824c
 80088ec:	40023800 	.word	0x40023800
 80088f0:	40021400 	.word	0x40021400
 80088f4:	40020800 	.word	0x40020800
 80088f8:	40021800 	.word	0x40021800
 80088fc:	40021000 	.word	0x40021000
 8008900:	40020c00 	.word	0x40020c00
 8008904:	40020400 	.word	0x40020400

08008908 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8008910:	f7ff ff6e 	bl	80087f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008920:	bf00      	nop
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800892a:	b480      	push	{r7}
 800892c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800892e:	e7fe      	b.n	800892e <HardFault_Handler+0x4>

08008930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008934:	e7fe      	b.n	8008934 <MemManage_Handler+0x4>

08008936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008936:	b480      	push	{r7}
 8008938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800893a:	e7fe      	b.n	800893a <BusFault_Handler+0x4>

0800893c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008940:	e7fe      	b.n	8008940 <UsageFault_Handler+0x4>

08008942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008942:	b480      	push	{r7}
 8008944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008946:	bf00      	nop
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008954:	bf00      	nop
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800895e:	b480      	push	{r7}
 8008960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008962:	bf00      	nop
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008970:	f7fa ffe2 	bl	8003938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008974:	bf00      	nop
 8008976:	bd80      	pop	{r7, pc}

08008978 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 800897c:	4802      	ldr	r0, [pc, #8]	; (8008988 <DMA2_Stream1_IRQHandler+0x10>)
 800897e:	f7fb fd77 	bl	8004470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008982:	bf00      	nop
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20008f34 	.word	0x20008f34

0800898c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8008990:	4802      	ldr	r0, [pc, #8]	; (800899c <DCMI_IRQHandler+0x10>)
 8008992:	f7fb fa1f 	bl	8003dd4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8008996:	bf00      	nop
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20013b94 	.word	0x20013b94

080089a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80089a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80089ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d013      	beq.n	80089e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80089b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80089bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80089c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00b      	beq.n	80089e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80089c8:	e000      	b.n	80089cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80089ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80089cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0f9      	beq.n	80089ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80089d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	b2d2      	uxtb	r2, r2
 80089de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80089e0:	687b      	ldr	r3, [r7, #4]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80089ee:	b590      	push	{r4, r7, lr}
 80089f0:	b087      	sub	sp, #28
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089fa:	2300      	movs	r3, #0
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	e00a      	b.n	8008a16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008a00:	68bc      	ldr	r4, [r7, #8]
 8008a02:	1c63      	adds	r3, r4, #1
 8008a04:	60bb      	str	r3, [r7, #8]
 8008a06:	f3af 8000 	nop.w
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	3301      	adds	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	dbf0      	blt.n	8008a00 <_read+0x12>
	}

return len;
 8008a1e:	687b      	ldr	r3, [r7, #4]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd90      	pop	{r4, r7, pc}

08008a28 <_write>:

int _write(int file, char *ptr, int len)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	e009      	b.n	8008a4e <_write+0x26>
	{
		ITM_SendChar(ptr[DataIdx]);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	4413      	add	r3, r2
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff ffac 	bl	80089a0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	dbf1      	blt.n	8008a3a <_write+0x12>
	}
	return len;
 8008a56:	687b      	ldr	r3, [r7, #4]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008a68:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <_sbrk+0x50>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <_sbrk+0x16>
		heap_end = &end;
 8008a70:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <_sbrk+0x50>)
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <_sbrk+0x54>)
 8008a74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008a76:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <_sbrk+0x50>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <_sbrk+0x50>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4413      	add	r3, r2
 8008a84:	466a      	mov	r2, sp
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d907      	bls.n	8008a9a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008a8a:	f000 f8a9 	bl	8008be0 <__errno>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	230c      	movs	r3, #12
 8008a92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008a94:	f04f 33ff 	mov.w	r3, #4294967295
 8008a98:	e006      	b.n	8008aa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <_sbrk+0x50>)
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	4a03      	ldr	r2, [pc, #12]	; (8008ab0 <_sbrk+0x50>)
 8008aa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	20008250 	.word	0x20008250
 8008ab4:	200202b4 	.word	0x200202b4

08008ab8 <_close>:

int _close(int file)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
	return -1;
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ae0:	605a      	str	r2, [r3, #4]
	return 0;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <_isatty>:

int _isatty(int file)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	return 1;
 8008af8:	2301      	movs	r3, #1
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
	return 0;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b20:	b480      	push	{r7}
 8008b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b24:	4a16      	ldr	r2, [pc, #88]	; (8008b80 <SystemInit+0x60>)
 8008b26:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <SystemInit+0x60>)
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008b34:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <SystemInit+0x64>)
 8008b36:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <SystemInit+0x64>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b40:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <SystemInit+0x64>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008b46:	4a0f      	ldr	r2, [pc, #60]	; (8008b84 <SystemInit+0x64>)
 8008b48:	4b0e      	ldr	r3, [pc, #56]	; (8008b84 <SystemInit+0x64>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <SystemInit+0x64>)
 8008b58:	4a0b      	ldr	r2, [pc, #44]	; (8008b88 <SystemInit+0x68>)
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008b5c:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <SystemInit+0x64>)
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <SystemInit+0x64>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <SystemInit+0x64>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <SystemInit+0x60>)
 8008b70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b74:	609a      	str	r2, [r3, #8]
#endif
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	e000ed00 	.word	0xe000ed00
 8008b84:	40023800 	.word	0x40023800
 8008b88:	24003010 	.word	0x24003010

08008b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008bc4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008b90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b92:	e003      	b.n	8008b9c <LoopCopyDataInit>

08008b94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008b96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b9a:	3104      	adds	r1, #4

08008b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b9c:	480b      	ldr	r0, [pc, #44]	; (8008bcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ba0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ba2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ba4:	d3f6      	bcc.n	8008b94 <CopyDataInit>
  ldr  r2, =_sbss
 8008ba6:	4a0b      	ldr	r2, [pc, #44]	; (8008bd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008ba8:	e002      	b.n	8008bb0 <LoopFillZerobss>

08008baa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008baa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008bac:	f842 3b04 	str.w	r3, [r2], #4

08008bb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008bb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008bb4:	d3f9      	bcc.n	8008baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008bb6:	f7ff ffb3 	bl	8008b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008bba:	f000 f817 	bl	8008bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008bbe:	f7ff f8f5 	bl	8007dac <main>
  bx  lr    
 8008bc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008bc4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8008bc8:	08009708 	.word	0x08009708
  ldr  r0, =_sdata
 8008bcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bd0:	2000822c 	.word	0x2000822c
  ldr  r2, =_sbss
 8008bd4:	2000822c 	.word	0x2000822c
  ldr  r3, = _ebss
 8008bd8:	200202b4 	.word	0x200202b4

08008bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008bdc:	e7fe      	b.n	8008bdc <ADC_IRQHandler>
	...

08008be0 <__errno>:
 8008be0:	4b01      	ldr	r3, [pc, #4]	; (8008be8 <__errno+0x8>)
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	200081c8 	.word	0x200081c8

08008bec <__libc_init_array>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	4e0d      	ldr	r6, [pc, #52]	; (8008c24 <__libc_init_array+0x38>)
 8008bf0:	4c0d      	ldr	r4, [pc, #52]	; (8008c28 <__libc_init_array+0x3c>)
 8008bf2:	1ba4      	subs	r4, r4, r6
 8008bf4:	10a4      	asrs	r4, r4, #2
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	42a5      	cmp	r5, r4
 8008bfa:	d109      	bne.n	8008c10 <__libc_init_array+0x24>
 8008bfc:	4e0b      	ldr	r6, [pc, #44]	; (8008c2c <__libc_init_array+0x40>)
 8008bfe:	4c0c      	ldr	r4, [pc, #48]	; (8008c30 <__libc_init_array+0x44>)
 8008c00:	f000 fca8 	bl	8009554 <_init>
 8008c04:	1ba4      	subs	r4, r4, r6
 8008c06:	10a4      	asrs	r4, r4, #2
 8008c08:	2500      	movs	r5, #0
 8008c0a:	42a5      	cmp	r5, r4
 8008c0c:	d105      	bne.n	8008c1a <__libc_init_array+0x2e>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}
 8008c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c14:	4798      	blx	r3
 8008c16:	3501      	adds	r5, #1
 8008c18:	e7ee      	b.n	8008bf8 <__libc_init_array+0xc>
 8008c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c1e:	4798      	blx	r3
 8008c20:	3501      	adds	r5, #1
 8008c22:	e7f2      	b.n	8008c0a <__libc_init_array+0x1e>
 8008c24:	08009700 	.word	0x08009700
 8008c28:	08009700 	.word	0x08009700
 8008c2c:	08009700 	.word	0x08009700
 8008c30:	08009704 	.word	0x08009704

08008c34 <memmove>:
 8008c34:	4288      	cmp	r0, r1
 8008c36:	b510      	push	{r4, lr}
 8008c38:	eb01 0302 	add.w	r3, r1, r2
 8008c3c:	d803      	bhi.n	8008c46 <memmove+0x12>
 8008c3e:	1e42      	subs	r2, r0, #1
 8008c40:	4299      	cmp	r1, r3
 8008c42:	d10c      	bne.n	8008c5e <memmove+0x2a>
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	4298      	cmp	r0, r3
 8008c48:	d2f9      	bcs.n	8008c3e <memmove+0xa>
 8008c4a:	1881      	adds	r1, r0, r2
 8008c4c:	1ad2      	subs	r2, r2, r3
 8008c4e:	42d3      	cmn	r3, r2
 8008c50:	d100      	bne.n	8008c54 <memmove+0x20>
 8008c52:	bd10      	pop	{r4, pc}
 8008c54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c5c:	e7f7      	b.n	8008c4e <memmove+0x1a>
 8008c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c62:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c66:	e7eb      	b.n	8008c40 <memmove+0xc>

08008c68 <memset>:
 8008c68:	4402      	add	r2, r0
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d100      	bne.n	8008c72 <memset+0xa>
 8008c70:	4770      	bx	lr
 8008c72:	f803 1b01 	strb.w	r1, [r3], #1
 8008c76:	e7f9      	b.n	8008c6c <memset+0x4>

08008c78 <_puts_r>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b118      	cbz	r0, 8008c88 <_puts_r+0x10>
 8008c80:	6983      	ldr	r3, [r0, #24]
 8008c82:	b90b      	cbnz	r3, 8008c88 <_puts_r+0x10>
 8008c84:	f000 fa0e 	bl	80090a4 <__sinit>
 8008c88:	69ab      	ldr	r3, [r5, #24]
 8008c8a:	68ac      	ldr	r4, [r5, #8]
 8008c8c:	b913      	cbnz	r3, 8008c94 <_puts_r+0x1c>
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 fa08 	bl	80090a4 <__sinit>
 8008c94:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <_puts_r+0xac>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	d117      	bne.n	8008cca <_puts_r+0x52>
 8008c9a:	686c      	ldr	r4, [r5, #4]
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	071b      	lsls	r3, r3, #28
 8008ca0:	d51d      	bpl.n	8008cde <_puts_r+0x66>
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	b1db      	cbz	r3, 8008cde <_puts_r+0x66>
 8008ca6:	3e01      	subs	r6, #1
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cae:	3b01      	subs	r3, #1
 8008cb0:	60a3      	str	r3, [r4, #8]
 8008cb2:	b9e9      	cbnz	r1, 8008cf0 <_puts_r+0x78>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da2e      	bge.n	8008d16 <_puts_r+0x9e>
 8008cb8:	4622      	mov	r2, r4
 8008cba:	210a      	movs	r1, #10
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f000 f83f 	bl	8008d40 <__swbuf_r>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d011      	beq.n	8008cea <_puts_r+0x72>
 8008cc6:	200a      	movs	r0, #10
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
 8008cca:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <_puts_r+0xb0>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	d101      	bne.n	8008cd4 <_puts_r+0x5c>
 8008cd0:	68ac      	ldr	r4, [r5, #8]
 8008cd2:	e7e3      	b.n	8008c9c <_puts_r+0x24>
 8008cd4:	4b15      	ldr	r3, [pc, #84]	; (8008d2c <_puts_r+0xb4>)
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	bf08      	it	eq
 8008cda:	68ec      	ldreq	r4, [r5, #12]
 8008cdc:	e7de      	b.n	8008c9c <_puts_r+0x24>
 8008cde:	4621      	mov	r1, r4
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	f000 f87f 	bl	8008de4 <__swsetup_r>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d0dd      	beq.n	8008ca6 <_puts_r+0x2e>
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	da04      	bge.n	8008cfe <_puts_r+0x86>
 8008cf4:	69a2      	ldr	r2, [r4, #24]
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	db06      	blt.n	8008d08 <_puts_r+0x90>
 8008cfa:	290a      	cmp	r1, #10
 8008cfc:	d004      	beq.n	8008d08 <_puts_r+0x90>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	6022      	str	r2, [r4, #0]
 8008d04:	7019      	strb	r1, [r3, #0]
 8008d06:	e7cf      	b.n	8008ca8 <_puts_r+0x30>
 8008d08:	4622      	mov	r2, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 f818 	bl	8008d40 <__swbuf_r>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d1c9      	bne.n	8008ca8 <_puts_r+0x30>
 8008d14:	e7e9      	b.n	8008cea <_puts_r+0x72>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	200a      	movs	r0, #10
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	7018      	strb	r0, [r3, #0]
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	bf00      	nop
 8008d24:	080096b8 	.word	0x080096b8
 8008d28:	080096d8 	.word	0x080096d8
 8008d2c:	08009698 	.word	0x08009698

08008d30 <puts>:
 8008d30:	4b02      	ldr	r3, [pc, #8]	; (8008d3c <puts+0xc>)
 8008d32:	4601      	mov	r1, r0
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f7ff bf9f 	b.w	8008c78 <_puts_r>
 8008d3a:	bf00      	nop
 8008d3c:	200081c8 	.word	0x200081c8

08008d40 <__swbuf_r>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	460e      	mov	r6, r1
 8008d44:	4614      	mov	r4, r2
 8008d46:	4605      	mov	r5, r0
 8008d48:	b118      	cbz	r0, 8008d52 <__swbuf_r+0x12>
 8008d4a:	6983      	ldr	r3, [r0, #24]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <__swbuf_r+0x12>
 8008d4e:	f000 f9a9 	bl	80090a4 <__sinit>
 8008d52:	4b21      	ldr	r3, [pc, #132]	; (8008dd8 <__swbuf_r+0x98>)
 8008d54:	429c      	cmp	r4, r3
 8008d56:	d12a      	bne.n	8008dae <__swbuf_r+0x6e>
 8008d58:	686c      	ldr	r4, [r5, #4]
 8008d5a:	69a3      	ldr	r3, [r4, #24]
 8008d5c:	60a3      	str	r3, [r4, #8]
 8008d5e:	89a3      	ldrh	r3, [r4, #12]
 8008d60:	071a      	lsls	r2, r3, #28
 8008d62:	d52e      	bpl.n	8008dc2 <__swbuf_r+0x82>
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	b363      	cbz	r3, 8008dc2 <__swbuf_r+0x82>
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	6820      	ldr	r0, [r4, #0]
 8008d6c:	1ac0      	subs	r0, r0, r3
 8008d6e:	6963      	ldr	r3, [r4, #20]
 8008d70:	b2f6      	uxtb	r6, r6
 8008d72:	4298      	cmp	r0, r3
 8008d74:	4637      	mov	r7, r6
 8008d76:	db04      	blt.n	8008d82 <__swbuf_r+0x42>
 8008d78:	4621      	mov	r1, r4
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 f928 	bl	8008fd0 <_fflush_r>
 8008d80:	bb28      	cbnz	r0, 8008dce <__swbuf_r+0x8e>
 8008d82:	68a3      	ldr	r3, [r4, #8]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	60a3      	str	r3, [r4, #8]
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	6022      	str	r2, [r4, #0]
 8008d8e:	701e      	strb	r6, [r3, #0]
 8008d90:	6963      	ldr	r3, [r4, #20]
 8008d92:	3001      	adds	r0, #1
 8008d94:	4298      	cmp	r0, r3
 8008d96:	d004      	beq.n	8008da2 <__swbuf_r+0x62>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	07db      	lsls	r3, r3, #31
 8008d9c:	d519      	bpl.n	8008dd2 <__swbuf_r+0x92>
 8008d9e:	2e0a      	cmp	r6, #10
 8008da0:	d117      	bne.n	8008dd2 <__swbuf_r+0x92>
 8008da2:	4621      	mov	r1, r4
 8008da4:	4628      	mov	r0, r5
 8008da6:	f000 f913 	bl	8008fd0 <_fflush_r>
 8008daa:	b190      	cbz	r0, 8008dd2 <__swbuf_r+0x92>
 8008dac:	e00f      	b.n	8008dce <__swbuf_r+0x8e>
 8008dae:	4b0b      	ldr	r3, [pc, #44]	; (8008ddc <__swbuf_r+0x9c>)
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d101      	bne.n	8008db8 <__swbuf_r+0x78>
 8008db4:	68ac      	ldr	r4, [r5, #8]
 8008db6:	e7d0      	b.n	8008d5a <__swbuf_r+0x1a>
 8008db8:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <__swbuf_r+0xa0>)
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	bf08      	it	eq
 8008dbe:	68ec      	ldreq	r4, [r5, #12]
 8008dc0:	e7cb      	b.n	8008d5a <__swbuf_r+0x1a>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 f80d 	bl	8008de4 <__swsetup_r>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	d0cc      	beq.n	8008d68 <__swbuf_r+0x28>
 8008dce:	f04f 37ff 	mov.w	r7, #4294967295
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	080096b8 	.word	0x080096b8
 8008ddc:	080096d8 	.word	0x080096d8
 8008de0:	08009698 	.word	0x08009698

08008de4 <__swsetup_r>:
 8008de4:	4b32      	ldr	r3, [pc, #200]	; (8008eb0 <__swsetup_r+0xcc>)
 8008de6:	b570      	push	{r4, r5, r6, lr}
 8008de8:	681d      	ldr	r5, [r3, #0]
 8008dea:	4606      	mov	r6, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	b125      	cbz	r5, 8008dfa <__swsetup_r+0x16>
 8008df0:	69ab      	ldr	r3, [r5, #24]
 8008df2:	b913      	cbnz	r3, 8008dfa <__swsetup_r+0x16>
 8008df4:	4628      	mov	r0, r5
 8008df6:	f000 f955 	bl	80090a4 <__sinit>
 8008dfa:	4b2e      	ldr	r3, [pc, #184]	; (8008eb4 <__swsetup_r+0xd0>)
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	d10f      	bne.n	8008e20 <__swsetup_r+0x3c>
 8008e00:	686c      	ldr	r4, [r5, #4]
 8008e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	0715      	lsls	r5, r2, #28
 8008e0a:	d42c      	bmi.n	8008e66 <__swsetup_r+0x82>
 8008e0c:	06d0      	lsls	r0, r2, #27
 8008e0e:	d411      	bmi.n	8008e34 <__swsetup_r+0x50>
 8008e10:	2209      	movs	r2, #9
 8008e12:	6032      	str	r2, [r6, #0]
 8008e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	4b25      	ldr	r3, [pc, #148]	; (8008eb8 <__swsetup_r+0xd4>)
 8008e22:	429c      	cmp	r4, r3
 8008e24:	d101      	bne.n	8008e2a <__swsetup_r+0x46>
 8008e26:	68ac      	ldr	r4, [r5, #8]
 8008e28:	e7eb      	b.n	8008e02 <__swsetup_r+0x1e>
 8008e2a:	4b24      	ldr	r3, [pc, #144]	; (8008ebc <__swsetup_r+0xd8>)
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	bf08      	it	eq
 8008e30:	68ec      	ldreq	r4, [r5, #12]
 8008e32:	e7e6      	b.n	8008e02 <__swsetup_r+0x1e>
 8008e34:	0751      	lsls	r1, r2, #29
 8008e36:	d512      	bpl.n	8008e5e <__swsetup_r+0x7a>
 8008e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e3a:	b141      	cbz	r1, 8008e4e <__swsetup_r+0x6a>
 8008e3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e40:	4299      	cmp	r1, r3
 8008e42:	d002      	beq.n	8008e4a <__swsetup_r+0x66>
 8008e44:	4630      	mov	r0, r6
 8008e46:	f000 fa1b 	bl	8009280 <_free_r>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e54:	81a3      	strh	r3, [r4, #12]
 8008e56:	2300      	movs	r3, #0
 8008e58:	6063      	str	r3, [r4, #4]
 8008e5a:	6923      	ldr	r3, [r4, #16]
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f043 0308 	orr.w	r3, r3, #8
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	b94b      	cbnz	r3, 8008e7e <__swsetup_r+0x9a>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e74:	d003      	beq.n	8008e7e <__swsetup_r+0x9a>
 8008e76:	4621      	mov	r1, r4
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f000 f9c1 	bl	8009200 <__smakebuf_r>
 8008e7e:	89a2      	ldrh	r2, [r4, #12]
 8008e80:	f012 0301 	ands.w	r3, r2, #1
 8008e84:	d00c      	beq.n	8008ea0 <__swsetup_r+0xbc>
 8008e86:	2300      	movs	r3, #0
 8008e88:	60a3      	str	r3, [r4, #8]
 8008e8a:	6963      	ldr	r3, [r4, #20]
 8008e8c:	425b      	negs	r3, r3
 8008e8e:	61a3      	str	r3, [r4, #24]
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	b953      	cbnz	r3, 8008eaa <__swsetup_r+0xc6>
 8008e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008e9c:	d1ba      	bne.n	8008e14 <__swsetup_r+0x30>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ea0:	0792      	lsls	r2, r2, #30
 8008ea2:	bf58      	it	pl
 8008ea4:	6963      	ldrpl	r3, [r4, #20]
 8008ea6:	60a3      	str	r3, [r4, #8]
 8008ea8:	e7f2      	b.n	8008e90 <__swsetup_r+0xac>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e7f7      	b.n	8008e9e <__swsetup_r+0xba>
 8008eae:	bf00      	nop
 8008eb0:	200081c8 	.word	0x200081c8
 8008eb4:	080096b8 	.word	0x080096b8
 8008eb8:	080096d8 	.word	0x080096d8
 8008ebc:	08009698 	.word	0x08009698

08008ec0 <__sflush_r>:
 8008ec0:	898a      	ldrh	r2, [r1, #12]
 8008ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	0710      	lsls	r0, r2, #28
 8008eca:	460c      	mov	r4, r1
 8008ecc:	d45a      	bmi.n	8008f84 <__sflush_r+0xc4>
 8008ece:	684b      	ldr	r3, [r1, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	dc05      	bgt.n	8008ee0 <__sflush_r+0x20>
 8008ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dc02      	bgt.n	8008ee0 <__sflush_r+0x20>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	d0f9      	beq.n	8008eda <__sflush_r+0x1a>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008eec:	682f      	ldr	r7, [r5, #0]
 8008eee:	602b      	str	r3, [r5, #0]
 8008ef0:	d033      	beq.n	8008f5a <__sflush_r+0x9a>
 8008ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ef4:	89a3      	ldrh	r3, [r4, #12]
 8008ef6:	075a      	lsls	r2, r3, #29
 8008ef8:	d505      	bpl.n	8008f06 <__sflush_r+0x46>
 8008efa:	6863      	ldr	r3, [r4, #4]
 8008efc:	1ac0      	subs	r0, r0, r3
 8008efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f00:	b10b      	cbz	r3, 8008f06 <__sflush_r+0x46>
 8008f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f04:	1ac0      	subs	r0, r0, r3
 8008f06:	2300      	movs	r3, #0
 8008f08:	4602      	mov	r2, r0
 8008f0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f0c:	6a21      	ldr	r1, [r4, #32]
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b0      	blx	r6
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	d106      	bne.n	8008f26 <__sflush_r+0x66>
 8008f18:	6829      	ldr	r1, [r5, #0]
 8008f1a:	291d      	cmp	r1, #29
 8008f1c:	d84b      	bhi.n	8008fb6 <__sflush_r+0xf6>
 8008f1e:	4a2b      	ldr	r2, [pc, #172]	; (8008fcc <__sflush_r+0x10c>)
 8008f20:	40ca      	lsrs	r2, r1
 8008f22:	07d6      	lsls	r6, r2, #31
 8008f24:	d547      	bpl.n	8008fb6 <__sflush_r+0xf6>
 8008f26:	2200      	movs	r2, #0
 8008f28:	6062      	str	r2, [r4, #4]
 8008f2a:	04d9      	lsls	r1, r3, #19
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	d504      	bpl.n	8008f3c <__sflush_r+0x7c>
 8008f32:	1c42      	adds	r2, r0, #1
 8008f34:	d101      	bne.n	8008f3a <__sflush_r+0x7a>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b903      	cbnz	r3, 8008f3c <__sflush_r+0x7c>
 8008f3a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f3e:	602f      	str	r7, [r5, #0]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	d0ca      	beq.n	8008eda <__sflush_r+0x1a>
 8008f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	d002      	beq.n	8008f52 <__sflush_r+0x92>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f000 f997 	bl	8009280 <_free_r>
 8008f52:	2000      	movs	r0, #0
 8008f54:	6360      	str	r0, [r4, #52]	; 0x34
 8008f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5a:	6a21      	ldr	r1, [r4, #32]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4628      	mov	r0, r5
 8008f60:	47b0      	blx	r6
 8008f62:	1c41      	adds	r1, r0, #1
 8008f64:	d1c6      	bne.n	8008ef4 <__sflush_r+0x34>
 8008f66:	682b      	ldr	r3, [r5, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0c3      	beq.n	8008ef4 <__sflush_r+0x34>
 8008f6c:	2b1d      	cmp	r3, #29
 8008f6e:	d001      	beq.n	8008f74 <__sflush_r+0xb4>
 8008f70:	2b16      	cmp	r3, #22
 8008f72:	d101      	bne.n	8008f78 <__sflush_r+0xb8>
 8008f74:	602f      	str	r7, [r5, #0]
 8008f76:	e7b0      	b.n	8008eda <__sflush_r+0x1a>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f7e:	81a3      	strh	r3, [r4, #12]
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	690f      	ldr	r7, [r1, #16]
 8008f86:	2f00      	cmp	r7, #0
 8008f88:	d0a7      	beq.n	8008eda <__sflush_r+0x1a>
 8008f8a:	0793      	lsls	r3, r2, #30
 8008f8c:	680e      	ldr	r6, [r1, #0]
 8008f8e:	bf08      	it	eq
 8008f90:	694b      	ldreq	r3, [r1, #20]
 8008f92:	600f      	str	r7, [r1, #0]
 8008f94:	bf18      	it	ne
 8008f96:	2300      	movne	r3, #0
 8008f98:	eba6 0807 	sub.w	r8, r6, r7
 8008f9c:	608b      	str	r3, [r1, #8]
 8008f9e:	f1b8 0f00 	cmp.w	r8, #0
 8008fa2:	dd9a      	ble.n	8008eda <__sflush_r+0x1a>
 8008fa4:	4643      	mov	r3, r8
 8008fa6:	463a      	mov	r2, r7
 8008fa8:	6a21      	ldr	r1, [r4, #32]
 8008faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b0      	blx	r6
 8008fb0:	2800      	cmp	r0, #0
 8008fb2:	dc07      	bgt.n	8008fc4 <__sflush_r+0x104>
 8008fb4:	89a3      	ldrh	r3, [r4, #12]
 8008fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	4407      	add	r7, r0
 8008fc6:	eba8 0800 	sub.w	r8, r8, r0
 8008fca:	e7e8      	b.n	8008f9e <__sflush_r+0xde>
 8008fcc:	20400001 	.word	0x20400001

08008fd0 <_fflush_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	690b      	ldr	r3, [r1, #16]
 8008fd4:	4605      	mov	r5, r0
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	b1db      	cbz	r3, 8009012 <_fflush_r+0x42>
 8008fda:	b118      	cbz	r0, 8008fe4 <_fflush_r+0x14>
 8008fdc:	6983      	ldr	r3, [r0, #24]
 8008fde:	b90b      	cbnz	r3, 8008fe4 <_fflush_r+0x14>
 8008fe0:	f000 f860 	bl	80090a4 <__sinit>
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <_fflush_r+0x48>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d109      	bne.n	8008ffe <_fflush_r+0x2e>
 8008fea:	686c      	ldr	r4, [r5, #4]
 8008fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff0:	b17b      	cbz	r3, 8009012 <_fflush_r+0x42>
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ffa:	f7ff bf61 	b.w	8008ec0 <__sflush_r>
 8008ffe:	4b07      	ldr	r3, [pc, #28]	; (800901c <_fflush_r+0x4c>)
 8009000:	429c      	cmp	r4, r3
 8009002:	d101      	bne.n	8009008 <_fflush_r+0x38>
 8009004:	68ac      	ldr	r4, [r5, #8]
 8009006:	e7f1      	b.n	8008fec <_fflush_r+0x1c>
 8009008:	4b05      	ldr	r3, [pc, #20]	; (8009020 <_fflush_r+0x50>)
 800900a:	429c      	cmp	r4, r3
 800900c:	bf08      	it	eq
 800900e:	68ec      	ldreq	r4, [r5, #12]
 8009010:	e7ec      	b.n	8008fec <_fflush_r+0x1c>
 8009012:	2000      	movs	r0, #0
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	bf00      	nop
 8009018:	080096b8 	.word	0x080096b8
 800901c:	080096d8 	.word	0x080096d8
 8009020:	08009698 	.word	0x08009698

08009024 <_cleanup_r>:
 8009024:	4901      	ldr	r1, [pc, #4]	; (800902c <_cleanup_r+0x8>)
 8009026:	f000 b8a9 	b.w	800917c <_fwalk_reent>
 800902a:	bf00      	nop
 800902c:	08008fd1 	.word	0x08008fd1

08009030 <std.isra.0>:
 8009030:	2300      	movs	r3, #0
 8009032:	b510      	push	{r4, lr}
 8009034:	4604      	mov	r4, r0
 8009036:	6003      	str	r3, [r0, #0]
 8009038:	6043      	str	r3, [r0, #4]
 800903a:	6083      	str	r3, [r0, #8]
 800903c:	8181      	strh	r1, [r0, #12]
 800903e:	6643      	str	r3, [r0, #100]	; 0x64
 8009040:	81c2      	strh	r2, [r0, #14]
 8009042:	6103      	str	r3, [r0, #16]
 8009044:	6143      	str	r3, [r0, #20]
 8009046:	6183      	str	r3, [r0, #24]
 8009048:	4619      	mov	r1, r3
 800904a:	2208      	movs	r2, #8
 800904c:	305c      	adds	r0, #92	; 0x5c
 800904e:	f7ff fe0b 	bl	8008c68 <memset>
 8009052:	4b05      	ldr	r3, [pc, #20]	; (8009068 <std.isra.0+0x38>)
 8009054:	6263      	str	r3, [r4, #36]	; 0x24
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <std.isra.0+0x3c>)
 8009058:	62a3      	str	r3, [r4, #40]	; 0x28
 800905a:	4b05      	ldr	r3, [pc, #20]	; (8009070 <std.isra.0+0x40>)
 800905c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <std.isra.0+0x44>)
 8009060:	6224      	str	r4, [r4, #32]
 8009062:	6323      	str	r3, [r4, #48]	; 0x30
 8009064:	bd10      	pop	{r4, pc}
 8009066:	bf00      	nop
 8009068:	080093f9 	.word	0x080093f9
 800906c:	0800941b 	.word	0x0800941b
 8009070:	08009453 	.word	0x08009453
 8009074:	08009477 	.word	0x08009477

08009078 <__sfmoreglue>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	1e4a      	subs	r2, r1, #1
 800907c:	2568      	movs	r5, #104	; 0x68
 800907e:	4355      	muls	r5, r2
 8009080:	460e      	mov	r6, r1
 8009082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009086:	f000 f949 	bl	800931c <_malloc_r>
 800908a:	4604      	mov	r4, r0
 800908c:	b140      	cbz	r0, 80090a0 <__sfmoreglue+0x28>
 800908e:	2100      	movs	r1, #0
 8009090:	e880 0042 	stmia.w	r0, {r1, r6}
 8009094:	300c      	adds	r0, #12
 8009096:	60a0      	str	r0, [r4, #8]
 8009098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800909c:	f7ff fde4 	bl	8008c68 <memset>
 80090a0:	4620      	mov	r0, r4
 80090a2:	bd70      	pop	{r4, r5, r6, pc}

080090a4 <__sinit>:
 80090a4:	6983      	ldr	r3, [r0, #24]
 80090a6:	b510      	push	{r4, lr}
 80090a8:	4604      	mov	r4, r0
 80090aa:	bb33      	cbnz	r3, 80090fa <__sinit+0x56>
 80090ac:	6483      	str	r3, [r0, #72]	; 0x48
 80090ae:	64c3      	str	r3, [r0, #76]	; 0x4c
 80090b0:	6503      	str	r3, [r0, #80]	; 0x50
 80090b2:	4b12      	ldr	r3, [pc, #72]	; (80090fc <__sinit+0x58>)
 80090b4:	4a12      	ldr	r2, [pc, #72]	; (8009100 <__sinit+0x5c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6282      	str	r2, [r0, #40]	; 0x28
 80090ba:	4298      	cmp	r0, r3
 80090bc:	bf04      	itt	eq
 80090be:	2301      	moveq	r3, #1
 80090c0:	6183      	streq	r3, [r0, #24]
 80090c2:	f000 f81f 	bl	8009104 <__sfp>
 80090c6:	6060      	str	r0, [r4, #4]
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 f81b 	bl	8009104 <__sfp>
 80090ce:	60a0      	str	r0, [r4, #8]
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 f817 	bl	8009104 <__sfp>
 80090d6:	2200      	movs	r2, #0
 80090d8:	60e0      	str	r0, [r4, #12]
 80090da:	2104      	movs	r1, #4
 80090dc:	6860      	ldr	r0, [r4, #4]
 80090de:	f7ff ffa7 	bl	8009030 <std.isra.0>
 80090e2:	2201      	movs	r2, #1
 80090e4:	2109      	movs	r1, #9
 80090e6:	68a0      	ldr	r0, [r4, #8]
 80090e8:	f7ff ffa2 	bl	8009030 <std.isra.0>
 80090ec:	2202      	movs	r2, #2
 80090ee:	2112      	movs	r1, #18
 80090f0:	68e0      	ldr	r0, [r4, #12]
 80090f2:	f7ff ff9d 	bl	8009030 <std.isra.0>
 80090f6:	2301      	movs	r3, #1
 80090f8:	61a3      	str	r3, [r4, #24]
 80090fa:	bd10      	pop	{r4, pc}
 80090fc:	08009694 	.word	0x08009694
 8009100:	08009025 	.word	0x08009025

08009104 <__sfp>:
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009106:	4b1c      	ldr	r3, [pc, #112]	; (8009178 <__sfp+0x74>)
 8009108:	681e      	ldr	r6, [r3, #0]
 800910a:	69b3      	ldr	r3, [r6, #24]
 800910c:	4607      	mov	r7, r0
 800910e:	b913      	cbnz	r3, 8009116 <__sfp+0x12>
 8009110:	4630      	mov	r0, r6
 8009112:	f7ff ffc7 	bl	80090a4 <__sinit>
 8009116:	3648      	adds	r6, #72	; 0x48
 8009118:	68b4      	ldr	r4, [r6, #8]
 800911a:	6873      	ldr	r3, [r6, #4]
 800911c:	3b01      	subs	r3, #1
 800911e:	d503      	bpl.n	8009128 <__sfp+0x24>
 8009120:	6833      	ldr	r3, [r6, #0]
 8009122:	b133      	cbz	r3, 8009132 <__sfp+0x2e>
 8009124:	6836      	ldr	r6, [r6, #0]
 8009126:	e7f7      	b.n	8009118 <__sfp+0x14>
 8009128:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800912c:	b16d      	cbz	r5, 800914a <__sfp+0x46>
 800912e:	3468      	adds	r4, #104	; 0x68
 8009130:	e7f4      	b.n	800911c <__sfp+0x18>
 8009132:	2104      	movs	r1, #4
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff ff9f 	bl	8009078 <__sfmoreglue>
 800913a:	6030      	str	r0, [r6, #0]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1f1      	bne.n	8009124 <__sfp+0x20>
 8009140:	230c      	movs	r3, #12
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	4604      	mov	r4, r0
 8009146:	4620      	mov	r0, r4
 8009148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800914e:	81e3      	strh	r3, [r4, #14]
 8009150:	2301      	movs	r3, #1
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	6665      	str	r5, [r4, #100]	; 0x64
 8009156:	6025      	str	r5, [r4, #0]
 8009158:	60a5      	str	r5, [r4, #8]
 800915a:	6065      	str	r5, [r4, #4]
 800915c:	6125      	str	r5, [r4, #16]
 800915e:	6165      	str	r5, [r4, #20]
 8009160:	61a5      	str	r5, [r4, #24]
 8009162:	2208      	movs	r2, #8
 8009164:	4629      	mov	r1, r5
 8009166:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800916a:	f7ff fd7d 	bl	8008c68 <memset>
 800916e:	6365      	str	r5, [r4, #52]	; 0x34
 8009170:	63a5      	str	r5, [r4, #56]	; 0x38
 8009172:	64a5      	str	r5, [r4, #72]	; 0x48
 8009174:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009176:	e7e6      	b.n	8009146 <__sfp+0x42>
 8009178:	08009694 	.word	0x08009694

0800917c <_fwalk_reent>:
 800917c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009180:	4680      	mov	r8, r0
 8009182:	4689      	mov	r9, r1
 8009184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009188:	2600      	movs	r6, #0
 800918a:	b914      	cbnz	r4, 8009192 <_fwalk_reent+0x16>
 800918c:	4630      	mov	r0, r6
 800918e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009192:	68a5      	ldr	r5, [r4, #8]
 8009194:	6867      	ldr	r7, [r4, #4]
 8009196:	3f01      	subs	r7, #1
 8009198:	d501      	bpl.n	800919e <_fwalk_reent+0x22>
 800919a:	6824      	ldr	r4, [r4, #0]
 800919c:	e7f5      	b.n	800918a <_fwalk_reent+0xe>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d907      	bls.n	80091b4 <_fwalk_reent+0x38>
 80091a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091a8:	3301      	adds	r3, #1
 80091aa:	d003      	beq.n	80091b4 <_fwalk_reent+0x38>
 80091ac:	4629      	mov	r1, r5
 80091ae:	4640      	mov	r0, r8
 80091b0:	47c8      	blx	r9
 80091b2:	4306      	orrs	r6, r0
 80091b4:	3568      	adds	r5, #104	; 0x68
 80091b6:	e7ee      	b.n	8009196 <_fwalk_reent+0x1a>

080091b8 <__swhatbuf_r>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	460e      	mov	r6, r1
 80091bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c0:	2900      	cmp	r1, #0
 80091c2:	b090      	sub	sp, #64	; 0x40
 80091c4:	4614      	mov	r4, r2
 80091c6:	461d      	mov	r5, r3
 80091c8:	da07      	bge.n	80091da <__swhatbuf_r+0x22>
 80091ca:	2300      	movs	r3, #0
 80091cc:	602b      	str	r3, [r5, #0]
 80091ce:	89b3      	ldrh	r3, [r6, #12]
 80091d0:	061a      	lsls	r2, r3, #24
 80091d2:	d410      	bmi.n	80091f6 <__swhatbuf_r+0x3e>
 80091d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d8:	e00e      	b.n	80091f8 <__swhatbuf_r+0x40>
 80091da:	aa01      	add	r2, sp, #4
 80091dc:	f000 f972 	bl	80094c4 <_fstat_r>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	dbf2      	blt.n	80091ca <__swhatbuf_r+0x12>
 80091e4:	9a02      	ldr	r2, [sp, #8]
 80091e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091ee:	425a      	negs	r2, r3
 80091f0:	415a      	adcs	r2, r3
 80091f2:	602a      	str	r2, [r5, #0]
 80091f4:	e7ee      	b.n	80091d4 <__swhatbuf_r+0x1c>
 80091f6:	2340      	movs	r3, #64	; 0x40
 80091f8:	2000      	movs	r0, #0
 80091fa:	6023      	str	r3, [r4, #0]
 80091fc:	b010      	add	sp, #64	; 0x40
 80091fe:	bd70      	pop	{r4, r5, r6, pc}

08009200 <__smakebuf_r>:
 8009200:	898b      	ldrh	r3, [r1, #12]
 8009202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009204:	079d      	lsls	r5, r3, #30
 8009206:	4606      	mov	r6, r0
 8009208:	460c      	mov	r4, r1
 800920a:	d507      	bpl.n	800921c <__smakebuf_r+0x1c>
 800920c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	6123      	str	r3, [r4, #16]
 8009214:	2301      	movs	r3, #1
 8009216:	6163      	str	r3, [r4, #20]
 8009218:	b002      	add	sp, #8
 800921a:	bd70      	pop	{r4, r5, r6, pc}
 800921c:	ab01      	add	r3, sp, #4
 800921e:	466a      	mov	r2, sp
 8009220:	f7ff ffca 	bl	80091b8 <__swhatbuf_r>
 8009224:	9900      	ldr	r1, [sp, #0]
 8009226:	4605      	mov	r5, r0
 8009228:	4630      	mov	r0, r6
 800922a:	f000 f877 	bl	800931c <_malloc_r>
 800922e:	b948      	cbnz	r0, 8009244 <__smakebuf_r+0x44>
 8009230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009234:	059a      	lsls	r2, r3, #22
 8009236:	d4ef      	bmi.n	8009218 <__smakebuf_r+0x18>
 8009238:	f023 0303 	bic.w	r3, r3, #3
 800923c:	f043 0302 	orr.w	r3, r3, #2
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	e7e3      	b.n	800920c <__smakebuf_r+0xc>
 8009244:	4b0d      	ldr	r3, [pc, #52]	; (800927c <__smakebuf_r+0x7c>)
 8009246:	62b3      	str	r3, [r6, #40]	; 0x28
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	6020      	str	r0, [r4, #0]
 800924c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009250:	81a3      	strh	r3, [r4, #12]
 8009252:	9b00      	ldr	r3, [sp, #0]
 8009254:	6163      	str	r3, [r4, #20]
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	6120      	str	r0, [r4, #16]
 800925a:	b15b      	cbz	r3, 8009274 <__smakebuf_r+0x74>
 800925c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009260:	4630      	mov	r0, r6
 8009262:	f000 f941 	bl	80094e8 <_isatty_r>
 8009266:	b128      	cbz	r0, 8009274 <__smakebuf_r+0x74>
 8009268:	89a3      	ldrh	r3, [r4, #12]
 800926a:	f023 0303 	bic.w	r3, r3, #3
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	431d      	orrs	r5, r3
 8009278:	81a5      	strh	r5, [r4, #12]
 800927a:	e7cd      	b.n	8009218 <__smakebuf_r+0x18>
 800927c:	08009025 	.word	0x08009025

08009280 <_free_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4605      	mov	r5, r0
 8009284:	2900      	cmp	r1, #0
 8009286:	d045      	beq.n	8009314 <_free_r+0x94>
 8009288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800928c:	1f0c      	subs	r4, r1, #4
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	18e4      	addlt	r4, r4, r3
 8009294:	f000 f94a 	bl	800952c <__malloc_lock>
 8009298:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <_free_r+0x98>)
 800929a:	6813      	ldr	r3, [r2, #0]
 800929c:	4610      	mov	r0, r2
 800929e:	b933      	cbnz	r3, 80092ae <_free_r+0x2e>
 80092a0:	6063      	str	r3, [r4, #4]
 80092a2:	6014      	str	r4, [r2, #0]
 80092a4:	4628      	mov	r0, r5
 80092a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092aa:	f000 b940 	b.w	800952e <__malloc_unlock>
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	d90c      	bls.n	80092cc <_free_r+0x4c>
 80092b2:	6821      	ldr	r1, [r4, #0]
 80092b4:	1862      	adds	r2, r4, r1
 80092b6:	4293      	cmp	r3, r2
 80092b8:	bf04      	itt	eq
 80092ba:	681a      	ldreq	r2, [r3, #0]
 80092bc:	685b      	ldreq	r3, [r3, #4]
 80092be:	6063      	str	r3, [r4, #4]
 80092c0:	bf04      	itt	eq
 80092c2:	1852      	addeq	r2, r2, r1
 80092c4:	6022      	streq	r2, [r4, #0]
 80092c6:	6004      	str	r4, [r0, #0]
 80092c8:	e7ec      	b.n	80092a4 <_free_r+0x24>
 80092ca:	4613      	mov	r3, r2
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	b10a      	cbz	r2, 80092d4 <_free_r+0x54>
 80092d0:	42a2      	cmp	r2, r4
 80092d2:	d9fa      	bls.n	80092ca <_free_r+0x4a>
 80092d4:	6819      	ldr	r1, [r3, #0]
 80092d6:	1858      	adds	r0, r3, r1
 80092d8:	42a0      	cmp	r0, r4
 80092da:	d10b      	bne.n	80092f4 <_free_r+0x74>
 80092dc:	6820      	ldr	r0, [r4, #0]
 80092de:	4401      	add	r1, r0
 80092e0:	1858      	adds	r0, r3, r1
 80092e2:	4282      	cmp	r2, r0
 80092e4:	6019      	str	r1, [r3, #0]
 80092e6:	d1dd      	bne.n	80092a4 <_free_r+0x24>
 80092e8:	6810      	ldr	r0, [r2, #0]
 80092ea:	6852      	ldr	r2, [r2, #4]
 80092ec:	605a      	str	r2, [r3, #4]
 80092ee:	4401      	add	r1, r0
 80092f0:	6019      	str	r1, [r3, #0]
 80092f2:	e7d7      	b.n	80092a4 <_free_r+0x24>
 80092f4:	d902      	bls.n	80092fc <_free_r+0x7c>
 80092f6:	230c      	movs	r3, #12
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	e7d3      	b.n	80092a4 <_free_r+0x24>
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	1821      	adds	r1, r4, r0
 8009300:	428a      	cmp	r2, r1
 8009302:	bf04      	itt	eq
 8009304:	6811      	ldreq	r1, [r2, #0]
 8009306:	6852      	ldreq	r2, [r2, #4]
 8009308:	6062      	str	r2, [r4, #4]
 800930a:	bf04      	itt	eq
 800930c:	1809      	addeq	r1, r1, r0
 800930e:	6021      	streq	r1, [r4, #0]
 8009310:	605c      	str	r4, [r3, #4]
 8009312:	e7c7      	b.n	80092a4 <_free_r+0x24>
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	bf00      	nop
 8009318:	20008254 	.word	0x20008254

0800931c <_malloc_r>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	1ccd      	adds	r5, r1, #3
 8009320:	f025 0503 	bic.w	r5, r5, #3
 8009324:	3508      	adds	r5, #8
 8009326:	2d0c      	cmp	r5, #12
 8009328:	bf38      	it	cc
 800932a:	250c      	movcc	r5, #12
 800932c:	2d00      	cmp	r5, #0
 800932e:	4606      	mov	r6, r0
 8009330:	db01      	blt.n	8009336 <_malloc_r+0x1a>
 8009332:	42a9      	cmp	r1, r5
 8009334:	d903      	bls.n	800933e <_malloc_r+0x22>
 8009336:	230c      	movs	r3, #12
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	2000      	movs	r0, #0
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	f000 f8f5 	bl	800952c <__malloc_lock>
 8009342:	4a23      	ldr	r2, [pc, #140]	; (80093d0 <_malloc_r+0xb4>)
 8009344:	6814      	ldr	r4, [r2, #0]
 8009346:	4621      	mov	r1, r4
 8009348:	b991      	cbnz	r1, 8009370 <_malloc_r+0x54>
 800934a:	4c22      	ldr	r4, [pc, #136]	; (80093d4 <_malloc_r+0xb8>)
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	b91b      	cbnz	r3, 8009358 <_malloc_r+0x3c>
 8009350:	4630      	mov	r0, r6
 8009352:	f000 f841 	bl	80093d8 <_sbrk_r>
 8009356:	6020      	str	r0, [r4, #0]
 8009358:	4629      	mov	r1, r5
 800935a:	4630      	mov	r0, r6
 800935c:	f000 f83c 	bl	80093d8 <_sbrk_r>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d126      	bne.n	80093b2 <_malloc_r+0x96>
 8009364:	230c      	movs	r3, #12
 8009366:	6033      	str	r3, [r6, #0]
 8009368:	4630      	mov	r0, r6
 800936a:	f000 f8e0 	bl	800952e <__malloc_unlock>
 800936e:	e7e4      	b.n	800933a <_malloc_r+0x1e>
 8009370:	680b      	ldr	r3, [r1, #0]
 8009372:	1b5b      	subs	r3, r3, r5
 8009374:	d41a      	bmi.n	80093ac <_malloc_r+0x90>
 8009376:	2b0b      	cmp	r3, #11
 8009378:	d90f      	bls.n	800939a <_malloc_r+0x7e>
 800937a:	600b      	str	r3, [r1, #0]
 800937c:	50cd      	str	r5, [r1, r3]
 800937e:	18cc      	adds	r4, r1, r3
 8009380:	4630      	mov	r0, r6
 8009382:	f000 f8d4 	bl	800952e <__malloc_unlock>
 8009386:	f104 000b 	add.w	r0, r4, #11
 800938a:	1d23      	adds	r3, r4, #4
 800938c:	f020 0007 	bic.w	r0, r0, #7
 8009390:	1ac3      	subs	r3, r0, r3
 8009392:	d01b      	beq.n	80093cc <_malloc_r+0xb0>
 8009394:	425a      	negs	r2, r3
 8009396:	50e2      	str	r2, [r4, r3]
 8009398:	bd70      	pop	{r4, r5, r6, pc}
 800939a:	428c      	cmp	r4, r1
 800939c:	bf0d      	iteet	eq
 800939e:	6863      	ldreq	r3, [r4, #4]
 80093a0:	684b      	ldrne	r3, [r1, #4]
 80093a2:	6063      	strne	r3, [r4, #4]
 80093a4:	6013      	streq	r3, [r2, #0]
 80093a6:	bf18      	it	ne
 80093a8:	460c      	movne	r4, r1
 80093aa:	e7e9      	b.n	8009380 <_malloc_r+0x64>
 80093ac:	460c      	mov	r4, r1
 80093ae:	6849      	ldr	r1, [r1, #4]
 80093b0:	e7ca      	b.n	8009348 <_malloc_r+0x2c>
 80093b2:	1cc4      	adds	r4, r0, #3
 80093b4:	f024 0403 	bic.w	r4, r4, #3
 80093b8:	42a0      	cmp	r0, r4
 80093ba:	d005      	beq.n	80093c8 <_malloc_r+0xac>
 80093bc:	1a21      	subs	r1, r4, r0
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 f80a 	bl	80093d8 <_sbrk_r>
 80093c4:	3001      	adds	r0, #1
 80093c6:	d0cd      	beq.n	8009364 <_malloc_r+0x48>
 80093c8:	6025      	str	r5, [r4, #0]
 80093ca:	e7d9      	b.n	8009380 <_malloc_r+0x64>
 80093cc:	bd70      	pop	{r4, r5, r6, pc}
 80093ce:	bf00      	nop
 80093d0:	20008254 	.word	0x20008254
 80093d4:	20008258 	.word	0x20008258

080093d8 <_sbrk_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4c06      	ldr	r4, [pc, #24]	; (80093f4 <_sbrk_r+0x1c>)
 80093dc:	2300      	movs	r3, #0
 80093de:	4605      	mov	r5, r0
 80093e0:	4608      	mov	r0, r1
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	f7ff fb3c 	bl	8008a60 <_sbrk>
 80093e8:	1c43      	adds	r3, r0, #1
 80093ea:	d102      	bne.n	80093f2 <_sbrk_r+0x1a>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	b103      	cbz	r3, 80093f2 <_sbrk_r+0x1a>
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	200202b0 	.word	0x200202b0

080093f8 <__sread>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	460c      	mov	r4, r1
 80093fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009400:	f000 f896 	bl	8009530 <_read_r>
 8009404:	2800      	cmp	r0, #0
 8009406:	bfab      	itete	ge
 8009408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800940a:	89a3      	ldrhlt	r3, [r4, #12]
 800940c:	181b      	addge	r3, r3, r0
 800940e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009412:	bfac      	ite	ge
 8009414:	6563      	strge	r3, [r4, #84]	; 0x54
 8009416:	81a3      	strhlt	r3, [r4, #12]
 8009418:	bd10      	pop	{r4, pc}

0800941a <__swrite>:
 800941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	461f      	mov	r7, r3
 8009420:	898b      	ldrh	r3, [r1, #12]
 8009422:	05db      	lsls	r3, r3, #23
 8009424:	4605      	mov	r5, r0
 8009426:	460c      	mov	r4, r1
 8009428:	4616      	mov	r6, r2
 800942a:	d505      	bpl.n	8009438 <__swrite+0x1e>
 800942c:	2302      	movs	r3, #2
 800942e:	2200      	movs	r2, #0
 8009430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009434:	f000 f868 	bl	8009508 <_lseek_r>
 8009438:	89a3      	ldrh	r3, [r4, #12]
 800943a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800943e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009442:	81a3      	strh	r3, [r4, #12]
 8009444:	4632      	mov	r2, r6
 8009446:	463b      	mov	r3, r7
 8009448:	4628      	mov	r0, r5
 800944a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800944e:	f000 b817 	b.w	8009480 <_write_r>

08009452 <__sseek>:
 8009452:	b510      	push	{r4, lr}
 8009454:	460c      	mov	r4, r1
 8009456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945a:	f000 f855 	bl	8009508 <_lseek_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	bf15      	itete	ne
 8009464:	6560      	strne	r0, [r4, #84]	; 0x54
 8009466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800946a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800946e:	81a3      	strheq	r3, [r4, #12]
 8009470:	bf18      	it	ne
 8009472:	81a3      	strhne	r3, [r4, #12]
 8009474:	bd10      	pop	{r4, pc}

08009476 <__sclose>:
 8009476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947a:	f000 b813 	b.w	80094a4 <_close_r>
	...

08009480 <_write_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4c07      	ldr	r4, [pc, #28]	; (80094a0 <_write_r+0x20>)
 8009484:	4605      	mov	r5, r0
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	6022      	str	r2, [r4, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7ff faca 	bl	8008a28 <_write>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_write_r+0x1e>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	b103      	cbz	r3, 800949e <_write_r+0x1e>
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200202b0 	.word	0x200202b0

080094a4 <_close_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4c06      	ldr	r4, [pc, #24]	; (80094c0 <_close_r+0x1c>)
 80094a8:	2300      	movs	r3, #0
 80094aa:	4605      	mov	r5, r0
 80094ac:	4608      	mov	r0, r1
 80094ae:	6023      	str	r3, [r4, #0]
 80094b0:	f7ff fb02 	bl	8008ab8 <_close>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_close_r+0x1a>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	b103      	cbz	r3, 80094be <_close_r+0x1a>
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	200202b0 	.word	0x200202b0

080094c4 <_fstat_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4c07      	ldr	r4, [pc, #28]	; (80094e4 <_fstat_r+0x20>)
 80094c8:	2300      	movs	r3, #0
 80094ca:	4605      	mov	r5, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	4611      	mov	r1, r2
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	f7ff fafd 	bl	8008ad0 <_fstat>
 80094d6:	1c43      	adds	r3, r0, #1
 80094d8:	d102      	bne.n	80094e0 <_fstat_r+0x1c>
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	b103      	cbz	r3, 80094e0 <_fstat_r+0x1c>
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	bf00      	nop
 80094e4:	200202b0 	.word	0x200202b0

080094e8 <_isatty_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4c06      	ldr	r4, [pc, #24]	; (8009504 <_isatty_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4605      	mov	r5, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	6023      	str	r3, [r4, #0]
 80094f4:	f7ff fafc 	bl	8008af0 <_isatty>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_isatty_r+0x1a>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_isatty_r+0x1a>
 8009500:	602b      	str	r3, [r5, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	200202b0 	.word	0x200202b0

08009508 <_lseek_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4c07      	ldr	r4, [pc, #28]	; (8009528 <_lseek_r+0x20>)
 800950c:	4605      	mov	r5, r0
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	2200      	movs	r2, #0
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7ff faf5 	bl	8008b06 <_lseek>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_lseek_r+0x1e>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	b103      	cbz	r3, 8009526 <_lseek_r+0x1e>
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	200202b0 	.word	0x200202b0

0800952c <__malloc_lock>:
 800952c:	4770      	bx	lr

0800952e <__malloc_unlock>:
 800952e:	4770      	bx	lr

08009530 <_read_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4c07      	ldr	r4, [pc, #28]	; (8009550 <_read_r+0x20>)
 8009534:	4605      	mov	r5, r0
 8009536:	4608      	mov	r0, r1
 8009538:	4611      	mov	r1, r2
 800953a:	2200      	movs	r2, #0
 800953c:	6022      	str	r2, [r4, #0]
 800953e:	461a      	mov	r2, r3
 8009540:	f7ff fa55 	bl	80089ee <_read>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_read_r+0x1e>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	b103      	cbz	r3, 800954e <_read_r+0x1e>
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	200202b0 	.word	0x200202b0

08009554 <_init>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	bf00      	nop
 8009558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955a:	bc08      	pop	{r3}
 800955c:	469e      	mov	lr, r3
 800955e:	4770      	bx	lr

08009560 <_fini>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr
